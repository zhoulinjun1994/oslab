
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 e0 12 00 	lgdtl  0x12e018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 e0 12 c0       	mov    $0xc012e000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>

c010002a <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c010002a:	55                   	push   %ebp
c010002b:	89 e5                	mov    %esp,%ebp
c010002d:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100030:	ba 78 2f 1b c0       	mov    $0xc01b2f78,%edx
c0100035:	b8 d4 fd 1a c0       	mov    $0xc01afdd4,%eax
c010003a:	29 c2                	sub    %eax,%edx
c010003c:	89 d0                	mov    %edx,%eax
c010003e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100042:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100049:	00 
c010004a:	c7 04 24 d4 fd 1a c0 	movl   $0xc01afdd4,(%esp)
c0100051:	e8 9a c7 00 00       	call   c010c7f0 <memset>

    cons_init();                // init the console
c0100056:	e8 7f 16 00 00       	call   c01016da <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005b:	c7 45 f4 80 c9 10 c0 	movl   $0xc010c980,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100069:	c7 04 24 9c c9 10 c0 	movl   $0xc010c99c,(%esp)
c0100070:	e8 e3 02 00 00       	call   c0100358 <cprintf>

    print_kerninfo();
c0100075:	e8 0a 09 00 00       	call   c0100984 <print_kerninfo>

    grade_backtrace();
c010007a:	e8 a2 00 00 00       	call   c0100121 <grade_backtrace>

    pmm_init();                 // init physical memory management
c010007f:	e8 db 57 00 00       	call   c010585f <pmm_init>

    pic_init();                 // init interrupt controller
c0100084:	e8 2f 20 00 00       	call   c01020b8 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100089:	e8 a7 21 00 00       	call   c0102235 <idt_init>

    vmm_init();                 // init virtual memory management
c010008e:	e8 d1 86 00 00       	call   c0108764 <vmm_init>
    sched_init();               // init scheduler
c0100093:	e8 ba b5 00 00       	call   c010b652 <sched_init>
    proc_init();                // init process table
c0100098:	e8 51 ad 00 00       	call   c010adee <proc_init>
    
    ide_init();                 // init ide devices
c010009d:	e8 69 17 00 00       	call   c010180b <ide_init>
    swap_init();                // init swap
c01000a2:	e8 6b 6e 00 00       	call   c0106f12 <swap_init>

    clock_init();               // init clock interrupt
c01000a7:	e8 e4 0d 00 00       	call   c0100e90 <clock_init>
    intr_enable();              // enable irq interrupt
c01000ac:	e8 75 1f 00 00       	call   c0102026 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b1:	e8 f7 ae 00 00       	call   c010afad <cpu_idle>

c01000b6 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000b6:	55                   	push   %ebp
c01000b7:	89 e5                	mov    %esp,%ebp
c01000b9:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000bc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000c3:	00 
c01000c4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000cb:	00 
c01000cc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000d3:	e8 ea 0c 00 00       	call   c0100dc2 <mon_backtrace>
}
c01000d8:	c9                   	leave  
c01000d9:	c3                   	ret    

c01000da <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000da:	55                   	push   %ebp
c01000db:	89 e5                	mov    %esp,%ebp
c01000dd:	53                   	push   %ebx
c01000de:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e1:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000e4:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000e7:	8d 55 08             	lea    0x8(%ebp),%edx
c01000ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01000ed:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000f1:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000f5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000f9:	89 04 24             	mov    %eax,(%esp)
c01000fc:	e8 b5 ff ff ff       	call   c01000b6 <grade_backtrace2>
}
c0100101:	83 c4 14             	add    $0x14,%esp
c0100104:	5b                   	pop    %ebx
c0100105:	5d                   	pop    %ebp
c0100106:	c3                   	ret    

c0100107 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100107:	55                   	push   %ebp
c0100108:	89 e5                	mov    %esp,%ebp
c010010a:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c010010d:	8b 45 10             	mov    0x10(%ebp),%eax
c0100110:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100114:	8b 45 08             	mov    0x8(%ebp),%eax
c0100117:	89 04 24             	mov    %eax,(%esp)
c010011a:	e8 bb ff ff ff       	call   c01000da <grade_backtrace1>
}
c010011f:	c9                   	leave  
c0100120:	c3                   	ret    

c0100121 <grade_backtrace>:

void
grade_backtrace(void) {
c0100121:	55                   	push   %ebp
c0100122:	89 e5                	mov    %esp,%ebp
c0100124:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100127:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c010012c:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100133:	ff 
c0100134:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100138:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010013f:	e8 c3 ff ff ff       	call   c0100107 <grade_backtrace0>
}
c0100144:	c9                   	leave  
c0100145:	c3                   	ret    

c0100146 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100146:	55                   	push   %ebp
c0100147:	89 e5                	mov    %esp,%ebp
c0100149:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c010014c:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c010014f:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100152:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100155:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100158:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010015c:	0f b7 c0             	movzwl %ax,%eax
c010015f:	83 e0 03             	and    $0x3,%eax
c0100162:	89 c2                	mov    %eax,%edx
c0100164:	a1 e0 fd 1a c0       	mov    0xc01afde0,%eax
c0100169:	89 54 24 08          	mov    %edx,0x8(%esp)
c010016d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100171:	c7 04 24 a1 c9 10 c0 	movl   $0xc010c9a1,(%esp)
c0100178:	e8 db 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c010017d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100181:	0f b7 d0             	movzwl %ax,%edx
c0100184:	a1 e0 fd 1a c0       	mov    0xc01afde0,%eax
c0100189:	89 54 24 08          	mov    %edx,0x8(%esp)
c010018d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100191:	c7 04 24 af c9 10 c0 	movl   $0xc010c9af,(%esp)
c0100198:	e8 bb 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c010019d:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001a1:	0f b7 d0             	movzwl %ax,%edx
c01001a4:	a1 e0 fd 1a c0       	mov    0xc01afde0,%eax
c01001a9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001b1:	c7 04 24 bd c9 10 c0 	movl   $0xc010c9bd,(%esp)
c01001b8:	e8 9b 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001bd:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001c1:	0f b7 d0             	movzwl %ax,%edx
c01001c4:	a1 e0 fd 1a c0       	mov    0xc01afde0,%eax
c01001c9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001d1:	c7 04 24 cb c9 10 c0 	movl   $0xc010c9cb,(%esp)
c01001d8:	e8 7b 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001dd:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001e1:	0f b7 d0             	movzwl %ax,%edx
c01001e4:	a1 e0 fd 1a c0       	mov    0xc01afde0,%eax
c01001e9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001f1:	c7 04 24 d9 c9 10 c0 	movl   $0xc010c9d9,(%esp)
c01001f8:	e8 5b 01 00 00       	call   c0100358 <cprintf>
    round ++;
c01001fd:	a1 e0 fd 1a c0       	mov    0xc01afde0,%eax
c0100202:	83 c0 01             	add    $0x1,%eax
c0100205:	a3 e0 fd 1a c0       	mov    %eax,0xc01afde0
}
c010020a:	c9                   	leave  
c010020b:	c3                   	ret    

c010020c <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c010020c:	55                   	push   %ebp
c010020d:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c010020f:	5d                   	pop    %ebp
c0100210:	c3                   	ret    

c0100211 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100211:	55                   	push   %ebp
c0100212:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100214:	5d                   	pop    %ebp
c0100215:	c3                   	ret    

c0100216 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100216:	55                   	push   %ebp
c0100217:	89 e5                	mov    %esp,%ebp
c0100219:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c010021c:	e8 25 ff ff ff       	call   c0100146 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100221:	c7 04 24 e8 c9 10 c0 	movl   $0xc010c9e8,(%esp)
c0100228:	e8 2b 01 00 00       	call   c0100358 <cprintf>
    lab1_switch_to_user();
c010022d:	e8 da ff ff ff       	call   c010020c <lab1_switch_to_user>
    lab1_print_cur_status();
c0100232:	e8 0f ff ff ff       	call   c0100146 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100237:	c7 04 24 08 ca 10 c0 	movl   $0xc010ca08,(%esp)
c010023e:	e8 15 01 00 00       	call   c0100358 <cprintf>
    lab1_switch_to_kernel();
c0100243:	e8 c9 ff ff ff       	call   c0100211 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100248:	e8 f9 fe ff ff       	call   c0100146 <lab1_print_cur_status>
}
c010024d:	c9                   	leave  
c010024e:	c3                   	ret    

c010024f <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c010024f:	55                   	push   %ebp
c0100250:	89 e5                	mov    %esp,%ebp
c0100252:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c0100255:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100259:	74 13                	je     c010026e <readline+0x1f>
        cprintf("%s", prompt);
c010025b:	8b 45 08             	mov    0x8(%ebp),%eax
c010025e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100262:	c7 04 24 27 ca 10 c0 	movl   $0xc010ca27,(%esp)
c0100269:	e8 ea 00 00 00       	call   c0100358 <cprintf>
    }
    int i = 0, c;
c010026e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100275:	e8 66 01 00 00       	call   c01003e0 <getchar>
c010027a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c010027d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100281:	79 07                	jns    c010028a <readline+0x3b>
            return NULL;
c0100283:	b8 00 00 00 00       	mov    $0x0,%eax
c0100288:	eb 79                	jmp    c0100303 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010028a:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010028e:	7e 28                	jle    c01002b8 <readline+0x69>
c0100290:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0100297:	7f 1f                	jg     c01002b8 <readline+0x69>
            cputchar(c);
c0100299:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010029c:	89 04 24             	mov    %eax,(%esp)
c010029f:	e8 da 00 00 00       	call   c010037e <cputchar>
            buf[i ++] = c;
c01002a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002a7:	8d 50 01             	lea    0x1(%eax),%edx
c01002aa:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01002ad:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002b0:	88 90 00 fe 1a c0    	mov    %dl,-0x3fe50200(%eax)
c01002b6:	eb 46                	jmp    c01002fe <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c01002b8:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002bc:	75 17                	jne    c01002d5 <readline+0x86>
c01002be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002c2:	7e 11                	jle    c01002d5 <readline+0x86>
            cputchar(c);
c01002c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002c7:	89 04 24             	mov    %eax,(%esp)
c01002ca:	e8 af 00 00 00       	call   c010037e <cputchar>
            i --;
c01002cf:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002d3:	eb 29                	jmp    c01002fe <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c01002d5:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002d9:	74 06                	je     c01002e1 <readline+0x92>
c01002db:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002df:	75 1d                	jne    c01002fe <readline+0xaf>
            cputchar(c);
c01002e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002e4:	89 04 24             	mov    %eax,(%esp)
c01002e7:	e8 92 00 00 00       	call   c010037e <cputchar>
            buf[i] = '\0';
c01002ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002ef:	05 00 fe 1a c0       	add    $0xc01afe00,%eax
c01002f4:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01002f7:	b8 00 fe 1a c0       	mov    $0xc01afe00,%eax
c01002fc:	eb 05                	jmp    c0100303 <readline+0xb4>
        }
    }
c01002fe:	e9 72 ff ff ff       	jmp    c0100275 <readline+0x26>
}
c0100303:	c9                   	leave  
c0100304:	c3                   	ret    

c0100305 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100305:	55                   	push   %ebp
c0100306:	89 e5                	mov    %esp,%ebp
c0100308:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c010030b:	8b 45 08             	mov    0x8(%ebp),%eax
c010030e:	89 04 24             	mov    %eax,(%esp)
c0100311:	e8 f0 13 00 00       	call   c0101706 <cons_putc>
    (*cnt) ++;
c0100316:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100319:	8b 00                	mov    (%eax),%eax
c010031b:	8d 50 01             	lea    0x1(%eax),%edx
c010031e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100321:	89 10                	mov    %edx,(%eax)
}
c0100323:	c9                   	leave  
c0100324:	c3                   	ret    

c0100325 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c0100325:	55                   	push   %ebp
c0100326:	89 e5                	mov    %esp,%ebp
c0100328:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c010032b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c0100332:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100335:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100339:	8b 45 08             	mov    0x8(%ebp),%eax
c010033c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100340:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100343:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100347:	c7 04 24 05 03 10 c0 	movl   $0xc0100305,(%esp)
c010034e:	e8 de bb 00 00       	call   c010bf31 <vprintfmt>
    return cnt;
c0100353:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100356:	c9                   	leave  
c0100357:	c3                   	ret    

c0100358 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100358:	55                   	push   %ebp
c0100359:	89 e5                	mov    %esp,%ebp
c010035b:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010035e:	8d 45 0c             	lea    0xc(%ebp),%eax
c0100361:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c0100364:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100367:	89 44 24 04          	mov    %eax,0x4(%esp)
c010036b:	8b 45 08             	mov    0x8(%ebp),%eax
c010036e:	89 04 24             	mov    %eax,(%esp)
c0100371:	e8 af ff ff ff       	call   c0100325 <vcprintf>
c0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100379:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010037c:	c9                   	leave  
c010037d:	c3                   	ret    

c010037e <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c010037e:	55                   	push   %ebp
c010037f:	89 e5                	mov    %esp,%ebp
c0100381:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100384:	8b 45 08             	mov    0x8(%ebp),%eax
c0100387:	89 04 24             	mov    %eax,(%esp)
c010038a:	e8 77 13 00 00       	call   c0101706 <cons_putc>
}
c010038f:	c9                   	leave  
c0100390:	c3                   	ret    

c0100391 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c0100391:	55                   	push   %ebp
c0100392:	89 e5                	mov    %esp,%ebp
c0100394:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c0100397:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c010039e:	eb 13                	jmp    c01003b3 <cputs+0x22>
        cputch(c, &cnt);
c01003a0:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003a4:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003a7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003ab:	89 04 24             	mov    %eax,(%esp)
c01003ae:	e8 52 ff ff ff       	call   c0100305 <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01003b6:	8d 50 01             	lea    0x1(%eax),%edx
c01003b9:	89 55 08             	mov    %edx,0x8(%ebp)
c01003bc:	0f b6 00             	movzbl (%eax),%eax
c01003bf:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003c2:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003c6:	75 d8                	jne    c01003a0 <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003c8:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003cf:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003d6:	e8 2a ff ff ff       	call   c0100305 <cputch>
    return cnt;
c01003db:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003de:	c9                   	leave  
c01003df:	c3                   	ret    

c01003e0 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003e0:	55                   	push   %ebp
c01003e1:	89 e5                	mov    %esp,%ebp
c01003e3:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c01003e6:	e8 57 13 00 00       	call   c0101742 <cons_getc>
c01003eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01003ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003f2:	74 f2                	je     c01003e6 <getchar+0x6>
        /* do nothing */;
    return c;
c01003f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01003f7:	c9                   	leave  
c01003f8:	c3                   	ret    

c01003f9 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01003f9:	55                   	push   %ebp
c01003fa:	89 e5                	mov    %esp,%ebp
c01003fc:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01003ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100402:	8b 00                	mov    (%eax),%eax
c0100404:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100407:	8b 45 10             	mov    0x10(%ebp),%eax
c010040a:	8b 00                	mov    (%eax),%eax
c010040c:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010040f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100416:	e9 d2 00 00 00       	jmp    c01004ed <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c010041b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010041e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100421:	01 d0                	add    %edx,%eax
c0100423:	89 c2                	mov    %eax,%edx
c0100425:	c1 ea 1f             	shr    $0x1f,%edx
c0100428:	01 d0                	add    %edx,%eax
c010042a:	d1 f8                	sar    %eax
c010042c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010042f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100432:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100435:	eb 04                	jmp    c010043b <stab_binsearch+0x42>
            m --;
c0100437:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010043b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010043e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100441:	7c 1f                	jl     c0100462 <stab_binsearch+0x69>
c0100443:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100446:	89 d0                	mov    %edx,%eax
c0100448:	01 c0                	add    %eax,%eax
c010044a:	01 d0                	add    %edx,%eax
c010044c:	c1 e0 02             	shl    $0x2,%eax
c010044f:	89 c2                	mov    %eax,%edx
c0100451:	8b 45 08             	mov    0x8(%ebp),%eax
c0100454:	01 d0                	add    %edx,%eax
c0100456:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010045a:	0f b6 c0             	movzbl %al,%eax
c010045d:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100460:	75 d5                	jne    c0100437 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100462:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100465:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100468:	7d 0b                	jge    c0100475 <stab_binsearch+0x7c>
            l = true_m + 1;
c010046a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010046d:	83 c0 01             	add    $0x1,%eax
c0100470:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100473:	eb 78                	jmp    c01004ed <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100475:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010047c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010047f:	89 d0                	mov    %edx,%eax
c0100481:	01 c0                	add    %eax,%eax
c0100483:	01 d0                	add    %edx,%eax
c0100485:	c1 e0 02             	shl    $0x2,%eax
c0100488:	89 c2                	mov    %eax,%edx
c010048a:	8b 45 08             	mov    0x8(%ebp),%eax
c010048d:	01 d0                	add    %edx,%eax
c010048f:	8b 40 08             	mov    0x8(%eax),%eax
c0100492:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100495:	73 13                	jae    c01004aa <stab_binsearch+0xb1>
            *region_left = m;
c0100497:	8b 45 0c             	mov    0xc(%ebp),%eax
c010049a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010049d:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004a2:	83 c0 01             	add    $0x1,%eax
c01004a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004a8:	eb 43                	jmp    c01004ed <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c01004aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004ad:	89 d0                	mov    %edx,%eax
c01004af:	01 c0                	add    %eax,%eax
c01004b1:	01 d0                	add    %edx,%eax
c01004b3:	c1 e0 02             	shl    $0x2,%eax
c01004b6:	89 c2                	mov    %eax,%edx
c01004b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01004bb:	01 d0                	add    %edx,%eax
c01004bd:	8b 40 08             	mov    0x8(%eax),%eax
c01004c0:	3b 45 18             	cmp    0x18(%ebp),%eax
c01004c3:	76 16                	jbe    c01004db <stab_binsearch+0xe2>
            *region_right = m - 1;
c01004c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004c8:	8d 50 ff             	lea    -0x1(%eax),%edx
c01004cb:	8b 45 10             	mov    0x10(%ebp),%eax
c01004ce:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01004d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d3:	83 e8 01             	sub    $0x1,%eax
c01004d6:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004d9:	eb 12                	jmp    c01004ed <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01004db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004de:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004e1:	89 10                	mov    %edx,(%eax)
            l = m;
c01004e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01004e9:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01004ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01004f0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01004f3:	0f 8e 22 ff ff ff    	jle    c010041b <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01004f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01004fd:	75 0f                	jne    c010050e <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01004ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100502:	8b 00                	mov    (%eax),%eax
c0100504:	8d 50 ff             	lea    -0x1(%eax),%edx
c0100507:	8b 45 10             	mov    0x10(%ebp),%eax
c010050a:	89 10                	mov    %edx,(%eax)
c010050c:	eb 3f                	jmp    c010054d <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c010050e:	8b 45 10             	mov    0x10(%ebp),%eax
c0100511:	8b 00                	mov    (%eax),%eax
c0100513:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100516:	eb 04                	jmp    c010051c <stab_binsearch+0x123>
c0100518:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c010051c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010051f:	8b 00                	mov    (%eax),%eax
c0100521:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100524:	7d 1f                	jge    c0100545 <stab_binsearch+0x14c>
c0100526:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100529:	89 d0                	mov    %edx,%eax
c010052b:	01 c0                	add    %eax,%eax
c010052d:	01 d0                	add    %edx,%eax
c010052f:	c1 e0 02             	shl    $0x2,%eax
c0100532:	89 c2                	mov    %eax,%edx
c0100534:	8b 45 08             	mov    0x8(%ebp),%eax
c0100537:	01 d0                	add    %edx,%eax
c0100539:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010053d:	0f b6 c0             	movzbl %al,%eax
c0100540:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100543:	75 d3                	jne    c0100518 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100545:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100548:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010054b:	89 10                	mov    %edx,(%eax)
    }
}
c010054d:	c9                   	leave  
c010054e:	c3                   	ret    

c010054f <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c010054f:	55                   	push   %ebp
c0100550:	89 e5                	mov    %esp,%ebp
c0100552:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100555:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100558:	c7 00 2c ca 10 c0    	movl   $0xc010ca2c,(%eax)
    info->eip_line = 0;
c010055e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100561:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100568:	8b 45 0c             	mov    0xc(%ebp),%eax
c010056b:	c7 40 08 2c ca 10 c0 	movl   $0xc010ca2c,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100572:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100575:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c010057c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010057f:	8b 55 08             	mov    0x8(%ebp),%edx
c0100582:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100585:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100588:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c010058f:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0100596:	76 21                	jbe    c01005b9 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100598:	c7 45 f4 80 f2 10 c0 	movl   $0xc010f280,-0xc(%ebp)
        stab_end = __STAB_END__;
c010059f:	c7 45 f0 e0 4b 12 c0 	movl   $0xc0124be0,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c01005a6:	c7 45 ec e1 4b 12 c0 	movl   $0xc0124be1,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c01005ad:	c7 45 e8 25 b1 12 c0 	movl   $0xc012b125,-0x18(%ebp)
c01005b4:	e9 ea 00 00 00       	jmp    c01006a3 <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01005b9:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01005c0:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c01005c5:	85 c0                	test   %eax,%eax
c01005c7:	74 11                	je     c01005da <debuginfo_eip+0x8b>
c01005c9:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c01005ce:	8b 40 18             	mov    0x18(%eax),%eax
c01005d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01005d4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01005d8:	75 0a                	jne    c01005e4 <debuginfo_eip+0x95>
            return -1;
c01005da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01005df:	e9 9e 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01005e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01005e7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01005ee:	00 
c01005ef:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01005f6:	00 
c01005f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01005fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01005fe:	89 04 24             	mov    %eax,(%esp)
c0100601:	e8 96 8a 00 00       	call   c010909c <user_mem_check>
c0100606:	85 c0                	test   %eax,%eax
c0100608:	75 0a                	jne    c0100614 <debuginfo_eip+0xc5>
            return -1;
c010060a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010060f:	e9 6e 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c0100614:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100617:	8b 00                	mov    (%eax),%eax
c0100619:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c010061c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010061f:	8b 40 04             	mov    0x4(%eax),%eax
c0100622:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100625:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100628:	8b 40 08             	mov    0x8(%eax),%eax
c010062b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c010062e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100631:	8b 40 0c             	mov    0xc(%eax),%eax
c0100634:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100637:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010063a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010063d:	29 c2                	sub    %eax,%edx
c010063f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100642:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100649:	00 
c010064a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010064e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100652:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100655:	89 04 24             	mov    %eax,(%esp)
c0100658:	e8 3f 8a 00 00       	call   c010909c <user_mem_check>
c010065d:	85 c0                	test   %eax,%eax
c010065f:	75 0a                	jne    c010066b <debuginfo_eip+0x11c>
            return -1;
c0100661:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100666:	e9 17 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c010066b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010066e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100671:	29 c2                	sub    %eax,%edx
c0100673:	89 d0                	mov    %edx,%eax
c0100675:	89 c2                	mov    %eax,%edx
c0100677:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010067a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100681:	00 
c0100682:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100686:	89 44 24 04          	mov    %eax,0x4(%esp)
c010068a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010068d:	89 04 24             	mov    %eax,(%esp)
c0100690:	e8 07 8a 00 00       	call   c010909c <user_mem_check>
c0100695:	85 c0                	test   %eax,%eax
c0100697:	75 0a                	jne    c01006a3 <debuginfo_eip+0x154>
            return -1;
c0100699:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010069e:	e9 df 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c01006a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006a6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01006a9:	76 0d                	jbe    c01006b8 <debuginfo_eip+0x169>
c01006ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006ae:	83 e8 01             	sub    $0x1,%eax
c01006b1:	0f b6 00             	movzbl (%eax),%eax
c01006b4:	84 c0                	test   %al,%al
c01006b6:	74 0a                	je     c01006c2 <debuginfo_eip+0x173>
        return -1;
c01006b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006bd:	e9 c0 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01006c2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01006c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01006cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006cf:	29 c2                	sub    %eax,%edx
c01006d1:	89 d0                	mov    %edx,%eax
c01006d3:	c1 f8 02             	sar    $0x2,%eax
c01006d6:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01006dc:	83 e8 01             	sub    $0x1,%eax
c01006df:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01006e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01006e5:	89 44 24 10          	mov    %eax,0x10(%esp)
c01006e9:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01006f0:	00 
c01006f1:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01006f4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01006f8:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01006fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100702:	89 04 24             	mov    %eax,(%esp)
c0100705:	e8 ef fc ff ff       	call   c01003f9 <stab_binsearch>
    if (lfile == 0)
c010070a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010070d:	85 c0                	test   %eax,%eax
c010070f:	75 0a                	jne    c010071b <debuginfo_eip+0x1cc>
        return -1;
c0100711:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100716:	e9 67 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c010071b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010071e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0100721:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100724:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0100727:	8b 45 08             	mov    0x8(%ebp),%eax
c010072a:	89 44 24 10          	mov    %eax,0x10(%esp)
c010072e:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0100735:	00 
c0100736:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100739:	89 44 24 08          	mov    %eax,0x8(%esp)
c010073d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0100740:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100744:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100747:	89 04 24             	mov    %eax,(%esp)
c010074a:	e8 aa fc ff ff       	call   c01003f9 <stab_binsearch>

    if (lfun <= rfun) {
c010074f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100752:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100755:	39 c2                	cmp    %eax,%edx
c0100757:	7f 7c                	jg     c01007d5 <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100759:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010075c:	89 c2                	mov    %eax,%edx
c010075e:	89 d0                	mov    %edx,%eax
c0100760:	01 c0                	add    %eax,%eax
c0100762:	01 d0                	add    %edx,%eax
c0100764:	c1 e0 02             	shl    $0x2,%eax
c0100767:	89 c2                	mov    %eax,%edx
c0100769:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010076c:	01 d0                	add    %edx,%eax
c010076e:	8b 10                	mov    (%eax),%edx
c0100770:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100773:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100776:	29 c1                	sub    %eax,%ecx
c0100778:	89 c8                	mov    %ecx,%eax
c010077a:	39 c2                	cmp    %eax,%edx
c010077c:	73 22                	jae    c01007a0 <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c010077e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100781:	89 c2                	mov    %eax,%edx
c0100783:	89 d0                	mov    %edx,%eax
c0100785:	01 c0                	add    %eax,%eax
c0100787:	01 d0                	add    %edx,%eax
c0100789:	c1 e0 02             	shl    $0x2,%eax
c010078c:	89 c2                	mov    %eax,%edx
c010078e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100791:	01 d0                	add    %edx,%eax
c0100793:	8b 10                	mov    (%eax),%edx
c0100795:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100798:	01 c2                	add    %eax,%edx
c010079a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010079d:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c01007a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007a3:	89 c2                	mov    %eax,%edx
c01007a5:	89 d0                	mov    %edx,%eax
c01007a7:	01 c0                	add    %eax,%eax
c01007a9:	01 d0                	add    %edx,%eax
c01007ab:	c1 e0 02             	shl    $0x2,%eax
c01007ae:	89 c2                	mov    %eax,%edx
c01007b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007b3:	01 d0                	add    %edx,%eax
c01007b5:	8b 50 08             	mov    0x8(%eax),%edx
c01007b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007bb:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01007be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007c1:	8b 40 10             	mov    0x10(%eax),%eax
c01007c4:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01007c7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007ca:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01007cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01007d0:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01007d3:	eb 15                	jmp    c01007ea <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01007d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007d8:	8b 55 08             	mov    0x8(%ebp),%edx
c01007db:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01007de:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01007e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007e7:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01007ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007ed:	8b 40 08             	mov    0x8(%eax),%eax
c01007f0:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01007f7:	00 
c01007f8:	89 04 24             	mov    %eax,(%esp)
c01007fb:	e8 64 be 00 00       	call   c010c664 <strfind>
c0100800:	89 c2                	mov    %eax,%edx
c0100802:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100805:	8b 40 08             	mov    0x8(%eax),%eax
c0100808:	29 c2                	sub    %eax,%edx
c010080a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010080d:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c0100810:	8b 45 08             	mov    0x8(%ebp),%eax
c0100813:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100817:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010081e:	00 
c010081f:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100822:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100826:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100829:	89 44 24 04          	mov    %eax,0x4(%esp)
c010082d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100830:	89 04 24             	mov    %eax,(%esp)
c0100833:	e8 c1 fb ff ff       	call   c01003f9 <stab_binsearch>
    if (lline <= rline) {
c0100838:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010083b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010083e:	39 c2                	cmp    %eax,%edx
c0100840:	7f 24                	jg     c0100866 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c0100842:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100845:	89 c2                	mov    %eax,%edx
c0100847:	89 d0                	mov    %edx,%eax
c0100849:	01 c0                	add    %eax,%eax
c010084b:	01 d0                	add    %edx,%eax
c010084d:	c1 e0 02             	shl    $0x2,%eax
c0100850:	89 c2                	mov    %eax,%edx
c0100852:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100855:	01 d0                	add    %edx,%eax
c0100857:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c010085b:	0f b7 d0             	movzwl %ax,%edx
c010085e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100861:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100864:	eb 13                	jmp    c0100879 <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0100866:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010086b:	e9 12 01 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c0100870:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100873:	83 e8 01             	sub    $0x1,%eax
c0100876:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100879:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010087c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010087f:	39 c2                	cmp    %eax,%edx
c0100881:	7c 56                	jl     c01008d9 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c0100883:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100886:	89 c2                	mov    %eax,%edx
c0100888:	89 d0                	mov    %edx,%eax
c010088a:	01 c0                	add    %eax,%eax
c010088c:	01 d0                	add    %edx,%eax
c010088e:	c1 e0 02             	shl    $0x2,%eax
c0100891:	89 c2                	mov    %eax,%edx
c0100893:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100896:	01 d0                	add    %edx,%eax
c0100898:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010089c:	3c 84                	cmp    $0x84,%al
c010089e:	74 39                	je     c01008d9 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c01008a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008a3:	89 c2                	mov    %eax,%edx
c01008a5:	89 d0                	mov    %edx,%eax
c01008a7:	01 c0                	add    %eax,%eax
c01008a9:	01 d0                	add    %edx,%eax
c01008ab:	c1 e0 02             	shl    $0x2,%eax
c01008ae:	89 c2                	mov    %eax,%edx
c01008b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008b3:	01 d0                	add    %edx,%eax
c01008b5:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01008b9:	3c 64                	cmp    $0x64,%al
c01008bb:	75 b3                	jne    c0100870 <debuginfo_eip+0x321>
c01008bd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008c0:	89 c2                	mov    %eax,%edx
c01008c2:	89 d0                	mov    %edx,%eax
c01008c4:	01 c0                	add    %eax,%eax
c01008c6:	01 d0                	add    %edx,%eax
c01008c8:	c1 e0 02             	shl    $0x2,%eax
c01008cb:	89 c2                	mov    %eax,%edx
c01008cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008d0:	01 d0                	add    %edx,%eax
c01008d2:	8b 40 08             	mov    0x8(%eax),%eax
c01008d5:	85 c0                	test   %eax,%eax
c01008d7:	74 97                	je     c0100870 <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01008d9:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01008dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008df:	39 c2                	cmp    %eax,%edx
c01008e1:	7c 46                	jl     c0100929 <debuginfo_eip+0x3da>
c01008e3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008e6:	89 c2                	mov    %eax,%edx
c01008e8:	89 d0                	mov    %edx,%eax
c01008ea:	01 c0                	add    %eax,%eax
c01008ec:	01 d0                	add    %edx,%eax
c01008ee:	c1 e0 02             	shl    $0x2,%eax
c01008f1:	89 c2                	mov    %eax,%edx
c01008f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008f6:	01 d0                	add    %edx,%eax
c01008f8:	8b 10                	mov    (%eax),%edx
c01008fa:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01008fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100900:	29 c1                	sub    %eax,%ecx
c0100902:	89 c8                	mov    %ecx,%eax
c0100904:	39 c2                	cmp    %eax,%edx
c0100906:	73 21                	jae    c0100929 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100908:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010090b:	89 c2                	mov    %eax,%edx
c010090d:	89 d0                	mov    %edx,%eax
c010090f:	01 c0                	add    %eax,%eax
c0100911:	01 d0                	add    %edx,%eax
c0100913:	c1 e0 02             	shl    $0x2,%eax
c0100916:	89 c2                	mov    %eax,%edx
c0100918:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091b:	01 d0                	add    %edx,%eax
c010091d:	8b 10                	mov    (%eax),%edx
c010091f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100922:	01 c2                	add    %eax,%edx
c0100924:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100927:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100929:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010092c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010092f:	39 c2                	cmp    %eax,%edx
c0100931:	7d 4a                	jge    c010097d <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0100933:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100936:	83 c0 01             	add    $0x1,%eax
c0100939:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010093c:	eb 18                	jmp    c0100956 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c010093e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100941:	8b 40 14             	mov    0x14(%eax),%eax
c0100944:	8d 50 01             	lea    0x1(%eax),%edx
c0100947:	8b 45 0c             	mov    0xc(%ebp),%eax
c010094a:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c010094d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100950:	83 c0 01             	add    $0x1,%eax
c0100953:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100956:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100959:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c010095c:	39 c2                	cmp    %eax,%edx
c010095e:	7d 1d                	jge    c010097d <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100960:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100963:	89 c2                	mov    %eax,%edx
c0100965:	89 d0                	mov    %edx,%eax
c0100967:	01 c0                	add    %eax,%eax
c0100969:	01 d0                	add    %edx,%eax
c010096b:	c1 e0 02             	shl    $0x2,%eax
c010096e:	89 c2                	mov    %eax,%edx
c0100970:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100973:	01 d0                	add    %edx,%eax
c0100975:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100979:	3c a0                	cmp    $0xa0,%al
c010097b:	74 c1                	je     c010093e <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c010097d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100982:	c9                   	leave  
c0100983:	c3                   	ret    

c0100984 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100984:	55                   	push   %ebp
c0100985:	89 e5                	mov    %esp,%ebp
c0100987:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c010098a:	c7 04 24 36 ca 10 c0 	movl   $0xc010ca36,(%esp)
c0100991:	e8 c2 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100996:	c7 44 24 04 2a 00 10 	movl   $0xc010002a,0x4(%esp)
c010099d:	c0 
c010099e:	c7 04 24 4f ca 10 c0 	movl   $0xc010ca4f,(%esp)
c01009a5:	e8 ae f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c01009aa:	c7 44 24 04 79 c9 10 	movl   $0xc010c979,0x4(%esp)
c01009b1:	c0 
c01009b2:	c7 04 24 67 ca 10 c0 	movl   $0xc010ca67,(%esp)
c01009b9:	e8 9a f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c01009be:	c7 44 24 04 d4 fd 1a 	movl   $0xc01afdd4,0x4(%esp)
c01009c5:	c0 
c01009c6:	c7 04 24 7f ca 10 c0 	movl   $0xc010ca7f,(%esp)
c01009cd:	e8 86 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c01009d2:	c7 44 24 04 78 2f 1b 	movl   $0xc01b2f78,0x4(%esp)
c01009d9:	c0 
c01009da:	c7 04 24 97 ca 10 c0 	movl   $0xc010ca97,(%esp)
c01009e1:	e8 72 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c01009e6:	b8 78 2f 1b c0       	mov    $0xc01b2f78,%eax
c01009eb:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c01009f1:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c01009f6:	29 c2                	sub    %eax,%edx
c01009f8:	89 d0                	mov    %edx,%eax
c01009fa:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100a00:	85 c0                	test   %eax,%eax
c0100a02:	0f 48 c2             	cmovs  %edx,%eax
c0100a05:	c1 f8 0a             	sar    $0xa,%eax
c0100a08:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a0c:	c7 04 24 b0 ca 10 c0 	movl   $0xc010cab0,(%esp)
c0100a13:	e8 40 f9 ff ff       	call   c0100358 <cprintf>
}
c0100a18:	c9                   	leave  
c0100a19:	c3                   	ret    

c0100a1a <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100a1a:	55                   	push   %ebp
c0100a1b:	89 e5                	mov    %esp,%ebp
c0100a1d:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100a23:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100a26:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a2d:	89 04 24             	mov    %eax,(%esp)
c0100a30:	e8 1a fb ff ff       	call   c010054f <debuginfo_eip>
c0100a35:	85 c0                	test   %eax,%eax
c0100a37:	74 15                	je     c0100a4e <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100a39:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a40:	c7 04 24 da ca 10 c0 	movl   $0xc010cada,(%esp)
c0100a47:	e8 0c f9 ff ff       	call   c0100358 <cprintf>
c0100a4c:	eb 6d                	jmp    c0100abb <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100a55:	eb 1c                	jmp    c0100a73 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100a5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a5d:	01 d0                	add    %edx,%eax
c0100a5f:	0f b6 00             	movzbl (%eax),%eax
c0100a62:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100a68:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100a6b:	01 ca                	add    %ecx,%edx
c0100a6d:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a6f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100a76:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100a79:	7f dc                	jg     c0100a57 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100a7b:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100a81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a84:	01 d0                	add    %edx,%eax
c0100a86:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100a8c:	8b 55 08             	mov    0x8(%ebp),%edx
c0100a8f:	89 d1                	mov    %edx,%ecx
c0100a91:	29 c1                	sub    %eax,%ecx
c0100a93:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100a96:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100a99:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100a9d:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100aa3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100aa7:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100aab:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100aaf:	c7 04 24 f6 ca 10 c0 	movl   $0xc010caf6,(%esp)
c0100ab6:	e8 9d f8 ff ff       	call   c0100358 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100abb:	c9                   	leave  
c0100abc:	c3                   	ret    

c0100abd <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100abd:	55                   	push   %ebp
c0100abe:	89 e5                	mov    %esp,%ebp
c0100ac0:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100ac3:	8b 45 04             	mov    0x4(%ebp),%eax
c0100ac6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100ac9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100acc:	c9                   	leave  
c0100acd:	c3                   	ret    

c0100ace <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100ace:	55                   	push   %ebp
c0100acf:	89 e5                	mov    %esp,%ebp
c0100ad1:	83 ec 38             	sub    $0x38,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100ad4:	89 e8                	mov    %ebp,%eax
c0100ad6:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0100ad9:	8b 45 e0             	mov    -0x20(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
	uint32_t ebp = read_ebp();
c0100adc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32_t eip = read_eip();
c0100adf:	e8 d9 ff ff ff       	call   c0100abd <read_eip>
c0100ae4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i,j;
	for(i = 0;i<STACKFRAME_DEPTH;i++)
c0100ae7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100aee:	e9 88 00 00 00       	jmp    c0100b7b <print_stackframe+0xad>
	{
		cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100af3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100af6:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100afa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100afd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b01:	c7 04 24 08 cb 10 c0 	movl   $0xc010cb08,(%esp)
c0100b08:	e8 4b f8 ff ff       	call   c0100358 <cprintf>
		uint32_t* args = (uint32_t)ebp + 2;
c0100b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b10:	83 c0 02             	add    $0x2,%eax
c0100b13:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		for(j = 0;j<4;j++)
c0100b16:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100b1d:	eb 25                	jmp    c0100b44 <print_stackframe+0x76>
			cprintf("0x%08x ", args[j]);
c0100b1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b22:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100b29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100b2c:	01 d0                	add    %edx,%eax
c0100b2e:	8b 00                	mov    (%eax),%eax
c0100b30:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b34:	c7 04 24 24 cb 10 c0 	movl   $0xc010cb24,(%esp)
c0100b3b:	e8 18 f8 ff ff       	call   c0100358 <cprintf>
	int i,j;
	for(i = 0;i<STACKFRAME_DEPTH;i++)
	{
		cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
		uint32_t* args = (uint32_t)ebp + 2;
		for(j = 0;j<4;j++)
c0100b40:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100b44:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100b48:	7e d5                	jle    c0100b1f <print_stackframe+0x51>
			cprintf("0x%08x ", args[j]);
		cprintf("\n");
c0100b4a:	c7 04 24 2c cb 10 c0 	movl   $0xc010cb2c,(%esp)
c0100b51:	e8 02 f8 ff ff       	call   c0100358 <cprintf>
		print_debuginfo(eip - 1);
c0100b56:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b59:	83 e8 01             	sub    $0x1,%eax
c0100b5c:	89 04 24             	mov    %eax,(%esp)
c0100b5f:	e8 b6 fe ff ff       	call   c0100a1a <print_debuginfo>
		eip = *((uint32_t*)(ebp + 4));
c0100b64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b67:	83 c0 04             	add    $0x4,%eax
c0100b6a:	8b 00                	mov    (%eax),%eax
c0100b6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ebp = *((uint32_t*)ebp);
c0100b6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b72:	8b 00                	mov    (%eax),%eax
c0100b74:	89 45 f4             	mov    %eax,-0xc(%ebp)
      *                   the calling funciton's ebp = ss:[ebp]
      */
	uint32_t ebp = read_ebp();
	uint32_t eip = read_eip();
	int i,j;
	for(i = 0;i<STACKFRAME_DEPTH;i++)
c0100b77:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100b7b:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100b7f:	0f 8e 6e ff ff ff    	jle    c0100af3 <print_stackframe+0x25>
		cprintf("\n");
		print_debuginfo(eip - 1);
		eip = *((uint32_t*)(ebp + 4));
		ebp = *((uint32_t*)ebp);
	}
}
c0100b85:	c9                   	leave  
c0100b86:	c3                   	ret    

c0100b87 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100b87:	55                   	push   %ebp
c0100b88:	89 e5                	mov    %esp,%ebp
c0100b8a:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100b8d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100b94:	eb 0c                	jmp    c0100ba2 <parse+0x1b>
            *buf ++ = '\0';
c0100b96:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b99:	8d 50 01             	lea    0x1(%eax),%edx
c0100b9c:	89 55 08             	mov    %edx,0x8(%ebp)
c0100b9f:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100ba2:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ba5:	0f b6 00             	movzbl (%eax),%eax
c0100ba8:	84 c0                	test   %al,%al
c0100baa:	74 1d                	je     c0100bc9 <parse+0x42>
c0100bac:	8b 45 08             	mov    0x8(%ebp),%eax
c0100baf:	0f b6 00             	movzbl (%eax),%eax
c0100bb2:	0f be c0             	movsbl %al,%eax
c0100bb5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bb9:	c7 04 24 b0 cb 10 c0 	movl   $0xc010cbb0,(%esp)
c0100bc0:	e8 6c ba 00 00       	call   c010c631 <strchr>
c0100bc5:	85 c0                	test   %eax,%eax
c0100bc7:	75 cd                	jne    c0100b96 <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100bc9:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bcc:	0f b6 00             	movzbl (%eax),%eax
c0100bcf:	84 c0                	test   %al,%al
c0100bd1:	75 02                	jne    c0100bd5 <parse+0x4e>
            break;
c0100bd3:	eb 67                	jmp    c0100c3c <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100bd5:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100bd9:	75 14                	jne    c0100bef <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100bdb:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100be2:	00 
c0100be3:	c7 04 24 b5 cb 10 c0 	movl   $0xc010cbb5,(%esp)
c0100bea:	e8 69 f7 ff ff       	call   c0100358 <cprintf>
        }
        argv[argc ++] = buf;
c0100bef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bf2:	8d 50 01             	lea    0x1(%eax),%edx
c0100bf5:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100bf8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100bff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100c02:	01 c2                	add    %eax,%edx
c0100c04:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c07:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c09:	eb 04                	jmp    c0100c0f <parse+0x88>
            buf ++;
c0100c0b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c12:	0f b6 00             	movzbl (%eax),%eax
c0100c15:	84 c0                	test   %al,%al
c0100c17:	74 1d                	je     c0100c36 <parse+0xaf>
c0100c19:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c1c:	0f b6 00             	movzbl (%eax),%eax
c0100c1f:	0f be c0             	movsbl %al,%eax
c0100c22:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c26:	c7 04 24 b0 cb 10 c0 	movl   $0xc010cbb0,(%esp)
c0100c2d:	e8 ff b9 00 00       	call   c010c631 <strchr>
c0100c32:	85 c0                	test   %eax,%eax
c0100c34:	74 d5                	je     c0100c0b <parse+0x84>
            buf ++;
        }
    }
c0100c36:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c37:	e9 66 ff ff ff       	jmp    c0100ba2 <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100c3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100c3f:	c9                   	leave  
c0100c40:	c3                   	ret    

c0100c41 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100c41:	55                   	push   %ebp
c0100c42:	89 e5                	mov    %esp,%ebp
c0100c44:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100c47:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100c4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c51:	89 04 24             	mov    %eax,(%esp)
c0100c54:	e8 2e ff ff ff       	call   c0100b87 <parse>
c0100c59:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100c5c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100c60:	75 0a                	jne    c0100c6c <runcmd+0x2b>
        return 0;
c0100c62:	b8 00 00 00 00       	mov    $0x0,%eax
c0100c67:	e9 85 00 00 00       	jmp    c0100cf1 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100c6c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100c73:	eb 5c                	jmp    c0100cd1 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100c75:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100c78:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100c7b:	89 d0                	mov    %edx,%eax
c0100c7d:	01 c0                	add    %eax,%eax
c0100c7f:	01 d0                	add    %edx,%eax
c0100c81:	c1 e0 02             	shl    $0x2,%eax
c0100c84:	05 20 e0 12 c0       	add    $0xc012e020,%eax
c0100c89:	8b 00                	mov    (%eax),%eax
c0100c8b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100c8f:	89 04 24             	mov    %eax,(%esp)
c0100c92:	e8 fb b8 00 00       	call   c010c592 <strcmp>
c0100c97:	85 c0                	test   %eax,%eax
c0100c99:	75 32                	jne    c0100ccd <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100c9b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100c9e:	89 d0                	mov    %edx,%eax
c0100ca0:	01 c0                	add    %eax,%eax
c0100ca2:	01 d0                	add    %edx,%eax
c0100ca4:	c1 e0 02             	shl    $0x2,%eax
c0100ca7:	05 20 e0 12 c0       	add    $0xc012e020,%eax
c0100cac:	8b 40 08             	mov    0x8(%eax),%eax
c0100caf:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100cb2:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0100cb5:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100cb8:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100cbc:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100cbf:	83 c2 04             	add    $0x4,%edx
c0100cc2:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100cc6:	89 0c 24             	mov    %ecx,(%esp)
c0100cc9:	ff d0                	call   *%eax
c0100ccb:	eb 24                	jmp    c0100cf1 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100ccd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100cd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cd4:	83 f8 02             	cmp    $0x2,%eax
c0100cd7:	76 9c                	jbe    c0100c75 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100cd9:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100cdc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ce0:	c7 04 24 d3 cb 10 c0 	movl   $0xc010cbd3,(%esp)
c0100ce7:	e8 6c f6 ff ff       	call   c0100358 <cprintf>
    return 0;
c0100cec:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100cf1:	c9                   	leave  
c0100cf2:	c3                   	ret    

c0100cf3 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100cf3:	55                   	push   %ebp
c0100cf4:	89 e5                	mov    %esp,%ebp
c0100cf6:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100cf9:	c7 04 24 ec cb 10 c0 	movl   $0xc010cbec,(%esp)
c0100d00:	e8 53 f6 ff ff       	call   c0100358 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100d05:	c7 04 24 14 cc 10 c0 	movl   $0xc010cc14,(%esp)
c0100d0c:	e8 47 f6 ff ff       	call   c0100358 <cprintf>

    if (tf != NULL) {
c0100d11:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100d15:	74 0b                	je     c0100d22 <kmonitor+0x2f>
        print_trapframe(tf);
c0100d17:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d1a:	89 04 24             	mov    %eax,(%esp)
c0100d1d:	e8 64 18 00 00       	call   c0102586 <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100d22:	c7 04 24 39 cc 10 c0 	movl   $0xc010cc39,(%esp)
c0100d29:	e8 21 f5 ff ff       	call   c010024f <readline>
c0100d2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100d31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100d35:	74 18                	je     c0100d4f <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0100d37:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d3a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d41:	89 04 24             	mov    %eax,(%esp)
c0100d44:	e8 f8 fe ff ff       	call   c0100c41 <runcmd>
c0100d49:	85 c0                	test   %eax,%eax
c0100d4b:	79 02                	jns    c0100d4f <kmonitor+0x5c>
                break;
c0100d4d:	eb 02                	jmp    c0100d51 <kmonitor+0x5e>
            }
        }
    }
c0100d4f:	eb d1                	jmp    c0100d22 <kmonitor+0x2f>
}
c0100d51:	c9                   	leave  
c0100d52:	c3                   	ret    

c0100d53 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100d53:	55                   	push   %ebp
c0100d54:	89 e5                	mov    %esp,%ebp
c0100d56:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d60:	eb 3f                	jmp    c0100da1 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100d62:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d65:	89 d0                	mov    %edx,%eax
c0100d67:	01 c0                	add    %eax,%eax
c0100d69:	01 d0                	add    %edx,%eax
c0100d6b:	c1 e0 02             	shl    $0x2,%eax
c0100d6e:	05 20 e0 12 c0       	add    $0xc012e020,%eax
c0100d73:	8b 48 04             	mov    0x4(%eax),%ecx
c0100d76:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d79:	89 d0                	mov    %edx,%eax
c0100d7b:	01 c0                	add    %eax,%eax
c0100d7d:	01 d0                	add    %edx,%eax
c0100d7f:	c1 e0 02             	shl    $0x2,%eax
c0100d82:	05 20 e0 12 c0       	add    $0xc012e020,%eax
c0100d87:	8b 00                	mov    (%eax),%eax
c0100d89:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100d8d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d91:	c7 04 24 3d cc 10 c0 	movl   $0xc010cc3d,(%esp)
c0100d98:	e8 bb f5 ff ff       	call   c0100358 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d9d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100da1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100da4:	83 f8 02             	cmp    $0x2,%eax
c0100da7:	76 b9                	jbe    c0100d62 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100da9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dae:	c9                   	leave  
c0100daf:	c3                   	ret    

c0100db0 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100db0:	55                   	push   %ebp
c0100db1:	89 e5                	mov    %esp,%ebp
c0100db3:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100db6:	e8 c9 fb ff ff       	call   c0100984 <print_kerninfo>
    return 0;
c0100dbb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dc0:	c9                   	leave  
c0100dc1:	c3                   	ret    

c0100dc2 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100dc2:	55                   	push   %ebp
c0100dc3:	89 e5                	mov    %esp,%ebp
c0100dc5:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100dc8:	e8 01 fd ff ff       	call   c0100ace <print_stackframe>
    return 0;
c0100dcd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dd2:	c9                   	leave  
c0100dd3:	c3                   	ret    

c0100dd4 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100dd4:	55                   	push   %ebp
c0100dd5:	89 e5                	mov    %esp,%ebp
c0100dd7:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100dda:	a1 00 02 1b c0       	mov    0xc01b0200,%eax
c0100ddf:	85 c0                	test   %eax,%eax
c0100de1:	74 02                	je     c0100de5 <__panic+0x11>
        goto panic_dead;
c0100de3:	eb 48                	jmp    c0100e2d <__panic+0x59>
    }
    is_panic = 1;
c0100de5:	c7 05 00 02 1b c0 01 	movl   $0x1,0xc01b0200
c0100dec:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100def:	8d 45 14             	lea    0x14(%ebp),%eax
c0100df2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100df5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100df8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100dfc:	8b 45 08             	mov    0x8(%ebp),%eax
c0100dff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e03:	c7 04 24 46 cc 10 c0 	movl   $0xc010cc46,(%esp)
c0100e0a:	e8 49 f5 ff ff       	call   c0100358 <cprintf>
    vcprintf(fmt, ap);
c0100e0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e12:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e16:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e19:	89 04 24             	mov    %eax,(%esp)
c0100e1c:	e8 04 f5 ff ff       	call   c0100325 <vcprintf>
    cprintf("\n");
c0100e21:	c7 04 24 62 cc 10 c0 	movl   $0xc010cc62,(%esp)
c0100e28:	e8 2b f5 ff ff       	call   c0100358 <cprintf>
    va_end(ap);

panic_dead:
    intr_disable();
c0100e2d:	e8 fa 11 00 00       	call   c010202c <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100e32:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100e39:	e8 b5 fe ff ff       	call   c0100cf3 <kmonitor>
    }
c0100e3e:	eb f2                	jmp    c0100e32 <__panic+0x5e>

c0100e40 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100e40:	55                   	push   %ebp
c0100e41:	89 e5                	mov    %esp,%ebp
c0100e43:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100e46:	8d 45 14             	lea    0x14(%ebp),%eax
c0100e49:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e4f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e53:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e56:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e5a:	c7 04 24 64 cc 10 c0 	movl   $0xc010cc64,(%esp)
c0100e61:	e8 f2 f4 ff ff       	call   c0100358 <cprintf>
    vcprintf(fmt, ap);
c0100e66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e69:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e6d:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e70:	89 04 24             	mov    %eax,(%esp)
c0100e73:	e8 ad f4 ff ff       	call   c0100325 <vcprintf>
    cprintf("\n");
c0100e78:	c7 04 24 62 cc 10 c0 	movl   $0xc010cc62,(%esp)
c0100e7f:	e8 d4 f4 ff ff       	call   c0100358 <cprintf>
    va_end(ap);
}
c0100e84:	c9                   	leave  
c0100e85:	c3                   	ret    

c0100e86 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100e86:	55                   	push   %ebp
c0100e87:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100e89:	a1 00 02 1b c0       	mov    0xc01b0200,%eax
}
c0100e8e:	5d                   	pop    %ebp
c0100e8f:	c3                   	ret    

c0100e90 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100e90:	55                   	push   %ebp
c0100e91:	89 e5                	mov    %esp,%ebp
c0100e93:	83 ec 28             	sub    $0x28,%esp
c0100e96:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100e9c:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100ea0:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100ea4:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100ea8:	ee                   	out    %al,(%dx)
c0100ea9:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100eaf:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100eb3:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100eb7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100ebb:	ee                   	out    %al,(%dx)
c0100ebc:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100ec2:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100ec6:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100eca:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100ece:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100ecf:	c7 05 78 2e 1b c0 00 	movl   $0x0,0xc01b2e78
c0100ed6:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100ed9:	c7 04 24 82 cc 10 c0 	movl   $0xc010cc82,(%esp)
c0100ee0:	e8 73 f4 ff ff       	call   c0100358 <cprintf>
    pic_enable(IRQ_TIMER);
c0100ee5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100eec:	e8 99 11 00 00       	call   c010208a <pic_enable>
}
c0100ef1:	c9                   	leave  
c0100ef2:	c3                   	ret    

c0100ef3 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100ef3:	55                   	push   %ebp
c0100ef4:	89 e5                	mov    %esp,%ebp
c0100ef6:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100ef9:	9c                   	pushf  
c0100efa:	58                   	pop    %eax
c0100efb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0100efe:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100f01:	25 00 02 00 00       	and    $0x200,%eax
c0100f06:	85 c0                	test   %eax,%eax
c0100f08:	74 0c                	je     c0100f16 <__intr_save+0x23>
        intr_disable();
c0100f0a:	e8 1d 11 00 00       	call   c010202c <intr_disable>
        return 1;
c0100f0f:	b8 01 00 00 00       	mov    $0x1,%eax
c0100f14:	eb 05                	jmp    c0100f1b <__intr_save+0x28>
    }
    return 0;
c0100f16:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f1b:	c9                   	leave  
c0100f1c:	c3                   	ret    

c0100f1d <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0100f1d:	55                   	push   %ebp
c0100f1e:	89 e5                	mov    %esp,%ebp
c0100f20:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0100f23:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100f27:	74 05                	je     c0100f2e <__intr_restore+0x11>
        intr_enable();
c0100f29:	e8 f8 10 00 00       	call   c0102026 <intr_enable>
    }
}
c0100f2e:	c9                   	leave  
c0100f2f:	c3                   	ret    

c0100f30 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0100f30:	55                   	push   %ebp
c0100f31:	89 e5                	mov    %esp,%ebp
c0100f33:	83 ec 10             	sub    $0x10,%esp
c0100f36:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f3c:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0100f40:	89 c2                	mov    %eax,%edx
c0100f42:	ec                   	in     (%dx),%al
c0100f43:	88 45 fd             	mov    %al,-0x3(%ebp)
c0100f46:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c0100f4c:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100f50:	89 c2                	mov    %eax,%edx
c0100f52:	ec                   	in     (%dx),%al
c0100f53:	88 45 f9             	mov    %al,-0x7(%ebp)
c0100f56:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c0100f5c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f60:	89 c2                	mov    %eax,%edx
c0100f62:	ec                   	in     (%dx),%al
c0100f63:	88 45 f5             	mov    %al,-0xb(%ebp)
c0100f66:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c0100f6c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0100f70:	89 c2                	mov    %eax,%edx
c0100f72:	ec                   	in     (%dx),%al
c0100f73:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0100f76:	c9                   	leave  
c0100f77:	c3                   	ret    

c0100f78 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0100f78:	55                   	push   %ebp
c0100f79:	89 e5                	mov    %esp,%ebp
c0100f7b:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0100f7e:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0100f85:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f88:	0f b7 00             	movzwl (%eax),%eax
c0100f8b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c0100f8f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f92:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0100f97:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f9a:	0f b7 00             	movzwl (%eax),%eax
c0100f9d:	66 3d 5a a5          	cmp    $0xa55a,%ax
c0100fa1:	74 12                	je     c0100fb5 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c0100fa3:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c0100faa:	66 c7 05 26 02 1b c0 	movw   $0x3b4,0xc01b0226
c0100fb1:	b4 03 
c0100fb3:	eb 13                	jmp    c0100fc8 <cga_init+0x50>
    } else {
        *cp = was;
c0100fb5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fb8:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0100fbc:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c0100fbf:	66 c7 05 26 02 1b c0 	movw   $0x3d4,0xc01b0226
c0100fc6:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c0100fc8:	0f b7 05 26 02 1b c0 	movzwl 0xc01b0226,%eax
c0100fcf:	0f b7 c0             	movzwl %ax,%eax
c0100fd2:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0100fd6:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100fda:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100fde:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100fe2:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0100fe3:	0f b7 05 26 02 1b c0 	movzwl 0xc01b0226,%eax
c0100fea:	83 c0 01             	add    $0x1,%eax
c0100fed:	0f b7 c0             	movzwl %ax,%eax
c0100ff0:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100ff4:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c0100ff8:	89 c2                	mov    %eax,%edx
c0100ffa:	ec                   	in     (%dx),%al
c0100ffb:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0100ffe:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101002:	0f b6 c0             	movzbl %al,%eax
c0101005:	c1 e0 08             	shl    $0x8,%eax
c0101008:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c010100b:	0f b7 05 26 02 1b c0 	movzwl 0xc01b0226,%eax
c0101012:	0f b7 c0             	movzwl %ax,%eax
c0101015:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101019:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010101d:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101021:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101025:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c0101026:	0f b7 05 26 02 1b c0 	movzwl 0xc01b0226,%eax
c010102d:	83 c0 01             	add    $0x1,%eax
c0101030:	0f b7 c0             	movzwl %ax,%eax
c0101033:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101037:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c010103b:	89 c2                	mov    %eax,%edx
c010103d:	ec                   	in     (%dx),%al
c010103e:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c0101041:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101045:	0f b6 c0             	movzbl %al,%eax
c0101048:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c010104b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010104e:	a3 20 02 1b c0       	mov    %eax,0xc01b0220
    crt_pos = pos;
c0101053:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101056:	66 a3 24 02 1b c0    	mov    %ax,0xc01b0224
}
c010105c:	c9                   	leave  
c010105d:	c3                   	ret    

c010105e <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c010105e:	55                   	push   %ebp
c010105f:	89 e5                	mov    %esp,%ebp
c0101061:	83 ec 48             	sub    $0x48,%esp
c0101064:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c010106a:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010106e:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101072:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101076:	ee                   	out    %al,(%dx)
c0101077:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c010107d:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c0101081:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101085:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101089:	ee                   	out    %al,(%dx)
c010108a:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c0101090:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c0101094:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101098:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010109c:	ee                   	out    %al,(%dx)
c010109d:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01010a3:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c01010a7:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01010ab:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01010af:	ee                   	out    %al,(%dx)
c01010b0:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c01010b6:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c01010ba:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01010be:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01010c2:	ee                   	out    %al,(%dx)
c01010c3:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c01010c9:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c01010cd:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01010d1:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01010d5:	ee                   	out    %al,(%dx)
c01010d6:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c01010dc:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c01010e0:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01010e4:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01010e8:	ee                   	out    %al,(%dx)
c01010e9:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01010ef:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01010f3:	89 c2                	mov    %eax,%edx
c01010f5:	ec                   	in     (%dx),%al
c01010f6:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c01010f9:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c01010fd:	3c ff                	cmp    $0xff,%al
c01010ff:	0f 95 c0             	setne  %al
c0101102:	0f b6 c0             	movzbl %al,%eax
c0101105:	a3 28 02 1b c0       	mov    %eax,0xc01b0228
c010110a:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101110:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c0101114:	89 c2                	mov    %eax,%edx
c0101116:	ec                   	in     (%dx),%al
c0101117:	88 45 d5             	mov    %al,-0x2b(%ebp)
c010111a:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c0101120:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c0101124:	89 c2                	mov    %eax,%edx
c0101126:	ec                   	in     (%dx),%al
c0101127:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c010112a:	a1 28 02 1b c0       	mov    0xc01b0228,%eax
c010112f:	85 c0                	test   %eax,%eax
c0101131:	74 0c                	je     c010113f <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c0101133:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010113a:	e8 4b 0f 00 00       	call   c010208a <pic_enable>
    }
}
c010113f:	c9                   	leave  
c0101140:	c3                   	ret    

c0101141 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101141:	55                   	push   %ebp
c0101142:	89 e5                	mov    %esp,%ebp
c0101144:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101147:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010114e:	eb 09                	jmp    c0101159 <lpt_putc_sub+0x18>
        delay();
c0101150:	e8 db fd ff ff       	call   c0100f30 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101155:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101159:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c010115f:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101163:	89 c2                	mov    %eax,%edx
c0101165:	ec                   	in     (%dx),%al
c0101166:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101169:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010116d:	84 c0                	test   %al,%al
c010116f:	78 09                	js     c010117a <lpt_putc_sub+0x39>
c0101171:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101178:	7e d6                	jle    c0101150 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c010117a:	8b 45 08             	mov    0x8(%ebp),%eax
c010117d:	0f b6 c0             	movzbl %al,%eax
c0101180:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c0101186:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101189:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010118d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101191:	ee                   	out    %al,(%dx)
c0101192:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c0101198:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c010119c:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01011a0:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01011a4:	ee                   	out    %al,(%dx)
c01011a5:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c01011ab:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c01011af:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01011b3:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01011b7:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01011b8:	c9                   	leave  
c01011b9:	c3                   	ret    

c01011ba <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01011ba:	55                   	push   %ebp
c01011bb:	89 e5                	mov    %esp,%ebp
c01011bd:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01011c0:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01011c4:	74 0d                	je     c01011d3 <lpt_putc+0x19>
        lpt_putc_sub(c);
c01011c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01011c9:	89 04 24             	mov    %eax,(%esp)
c01011cc:	e8 70 ff ff ff       	call   c0101141 <lpt_putc_sub>
c01011d1:	eb 24                	jmp    c01011f7 <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c01011d3:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01011da:	e8 62 ff ff ff       	call   c0101141 <lpt_putc_sub>
        lpt_putc_sub(' ');
c01011df:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01011e6:	e8 56 ff ff ff       	call   c0101141 <lpt_putc_sub>
        lpt_putc_sub('\b');
c01011eb:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01011f2:	e8 4a ff ff ff       	call   c0101141 <lpt_putc_sub>
    }
}
c01011f7:	c9                   	leave  
c01011f8:	c3                   	ret    

c01011f9 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c01011f9:	55                   	push   %ebp
c01011fa:	89 e5                	mov    %esp,%ebp
c01011fc:	53                   	push   %ebx
c01011fd:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101200:	8b 45 08             	mov    0x8(%ebp),%eax
c0101203:	b0 00                	mov    $0x0,%al
c0101205:	85 c0                	test   %eax,%eax
c0101207:	75 07                	jne    c0101210 <cga_putc+0x17>
        c |= 0x0700;
c0101209:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101210:	8b 45 08             	mov    0x8(%ebp),%eax
c0101213:	0f b6 c0             	movzbl %al,%eax
c0101216:	83 f8 0a             	cmp    $0xa,%eax
c0101219:	74 4c                	je     c0101267 <cga_putc+0x6e>
c010121b:	83 f8 0d             	cmp    $0xd,%eax
c010121e:	74 57                	je     c0101277 <cga_putc+0x7e>
c0101220:	83 f8 08             	cmp    $0x8,%eax
c0101223:	0f 85 88 00 00 00    	jne    c01012b1 <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c0101229:	0f b7 05 24 02 1b c0 	movzwl 0xc01b0224,%eax
c0101230:	66 85 c0             	test   %ax,%ax
c0101233:	74 30                	je     c0101265 <cga_putc+0x6c>
            crt_pos --;
c0101235:	0f b7 05 24 02 1b c0 	movzwl 0xc01b0224,%eax
c010123c:	83 e8 01             	sub    $0x1,%eax
c010123f:	66 a3 24 02 1b c0    	mov    %ax,0xc01b0224
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101245:	a1 20 02 1b c0       	mov    0xc01b0220,%eax
c010124a:	0f b7 15 24 02 1b c0 	movzwl 0xc01b0224,%edx
c0101251:	0f b7 d2             	movzwl %dx,%edx
c0101254:	01 d2                	add    %edx,%edx
c0101256:	01 c2                	add    %eax,%edx
c0101258:	8b 45 08             	mov    0x8(%ebp),%eax
c010125b:	b0 00                	mov    $0x0,%al
c010125d:	83 c8 20             	or     $0x20,%eax
c0101260:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c0101263:	eb 72                	jmp    c01012d7 <cga_putc+0xde>
c0101265:	eb 70                	jmp    c01012d7 <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c0101267:	0f b7 05 24 02 1b c0 	movzwl 0xc01b0224,%eax
c010126e:	83 c0 50             	add    $0x50,%eax
c0101271:	66 a3 24 02 1b c0    	mov    %ax,0xc01b0224
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101277:	0f b7 1d 24 02 1b c0 	movzwl 0xc01b0224,%ebx
c010127e:	0f b7 0d 24 02 1b c0 	movzwl 0xc01b0224,%ecx
c0101285:	0f b7 c1             	movzwl %cx,%eax
c0101288:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c010128e:	c1 e8 10             	shr    $0x10,%eax
c0101291:	89 c2                	mov    %eax,%edx
c0101293:	66 c1 ea 06          	shr    $0x6,%dx
c0101297:	89 d0                	mov    %edx,%eax
c0101299:	c1 e0 02             	shl    $0x2,%eax
c010129c:	01 d0                	add    %edx,%eax
c010129e:	c1 e0 04             	shl    $0x4,%eax
c01012a1:	29 c1                	sub    %eax,%ecx
c01012a3:	89 ca                	mov    %ecx,%edx
c01012a5:	89 d8                	mov    %ebx,%eax
c01012a7:	29 d0                	sub    %edx,%eax
c01012a9:	66 a3 24 02 1b c0    	mov    %ax,0xc01b0224
        break;
c01012af:	eb 26                	jmp    c01012d7 <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c01012b1:	8b 0d 20 02 1b c0    	mov    0xc01b0220,%ecx
c01012b7:	0f b7 05 24 02 1b c0 	movzwl 0xc01b0224,%eax
c01012be:	8d 50 01             	lea    0x1(%eax),%edx
c01012c1:	66 89 15 24 02 1b c0 	mov    %dx,0xc01b0224
c01012c8:	0f b7 c0             	movzwl %ax,%eax
c01012cb:	01 c0                	add    %eax,%eax
c01012cd:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01012d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01012d3:	66 89 02             	mov    %ax,(%edx)
        break;
c01012d6:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c01012d7:	0f b7 05 24 02 1b c0 	movzwl 0xc01b0224,%eax
c01012de:	66 3d cf 07          	cmp    $0x7cf,%ax
c01012e2:	76 5b                	jbe    c010133f <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c01012e4:	a1 20 02 1b c0       	mov    0xc01b0220,%eax
c01012e9:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c01012ef:	a1 20 02 1b c0       	mov    0xc01b0220,%eax
c01012f4:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c01012fb:	00 
c01012fc:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101300:	89 04 24             	mov    %eax,(%esp)
c0101303:	e8 27 b5 00 00       	call   c010c82f <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101308:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c010130f:	eb 15                	jmp    c0101326 <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c0101311:	a1 20 02 1b c0       	mov    0xc01b0220,%eax
c0101316:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101319:	01 d2                	add    %edx,%edx
c010131b:	01 d0                	add    %edx,%eax
c010131d:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101322:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101326:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c010132d:	7e e2                	jle    c0101311 <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c010132f:	0f b7 05 24 02 1b c0 	movzwl 0xc01b0224,%eax
c0101336:	83 e8 50             	sub    $0x50,%eax
c0101339:	66 a3 24 02 1b c0    	mov    %ax,0xc01b0224
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c010133f:	0f b7 05 26 02 1b c0 	movzwl 0xc01b0226,%eax
c0101346:	0f b7 c0             	movzwl %ax,%eax
c0101349:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010134d:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c0101351:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101355:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101359:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c010135a:	0f b7 05 24 02 1b c0 	movzwl 0xc01b0224,%eax
c0101361:	66 c1 e8 08          	shr    $0x8,%ax
c0101365:	0f b6 c0             	movzbl %al,%eax
c0101368:	0f b7 15 26 02 1b c0 	movzwl 0xc01b0226,%edx
c010136f:	83 c2 01             	add    $0x1,%edx
c0101372:	0f b7 d2             	movzwl %dx,%edx
c0101375:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c0101379:	88 45 ed             	mov    %al,-0x13(%ebp)
c010137c:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101380:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101384:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101385:	0f b7 05 26 02 1b c0 	movzwl 0xc01b0226,%eax
c010138c:	0f b7 c0             	movzwl %ax,%eax
c010138f:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101393:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c0101397:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010139b:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010139f:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c01013a0:	0f b7 05 24 02 1b c0 	movzwl 0xc01b0224,%eax
c01013a7:	0f b6 c0             	movzbl %al,%eax
c01013aa:	0f b7 15 26 02 1b c0 	movzwl 0xc01b0226,%edx
c01013b1:	83 c2 01             	add    $0x1,%edx
c01013b4:	0f b7 d2             	movzwl %dx,%edx
c01013b7:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01013bb:	88 45 e5             	mov    %al,-0x1b(%ebp)
c01013be:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01013c2:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01013c6:	ee                   	out    %al,(%dx)
}
c01013c7:	83 c4 34             	add    $0x34,%esp
c01013ca:	5b                   	pop    %ebx
c01013cb:	5d                   	pop    %ebp
c01013cc:	c3                   	ret    

c01013cd <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c01013cd:	55                   	push   %ebp
c01013ce:	89 e5                	mov    %esp,%ebp
c01013d0:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01013d3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01013da:	eb 09                	jmp    c01013e5 <serial_putc_sub+0x18>
        delay();
c01013dc:	e8 4f fb ff ff       	call   c0100f30 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01013e1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01013e5:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01013eb:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01013ef:	89 c2                	mov    %eax,%edx
c01013f1:	ec                   	in     (%dx),%al
c01013f2:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01013f5:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01013f9:	0f b6 c0             	movzbl %al,%eax
c01013fc:	83 e0 20             	and    $0x20,%eax
c01013ff:	85 c0                	test   %eax,%eax
c0101401:	75 09                	jne    c010140c <serial_putc_sub+0x3f>
c0101403:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c010140a:	7e d0                	jle    c01013dc <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c010140c:	8b 45 08             	mov    0x8(%ebp),%eax
c010140f:	0f b6 c0             	movzbl %al,%eax
c0101412:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c0101418:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010141b:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010141f:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101423:	ee                   	out    %al,(%dx)
}
c0101424:	c9                   	leave  
c0101425:	c3                   	ret    

c0101426 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101426:	55                   	push   %ebp
c0101427:	89 e5                	mov    %esp,%ebp
c0101429:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c010142c:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101430:	74 0d                	je     c010143f <serial_putc+0x19>
        serial_putc_sub(c);
c0101432:	8b 45 08             	mov    0x8(%ebp),%eax
c0101435:	89 04 24             	mov    %eax,(%esp)
c0101438:	e8 90 ff ff ff       	call   c01013cd <serial_putc_sub>
c010143d:	eb 24                	jmp    c0101463 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c010143f:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101446:	e8 82 ff ff ff       	call   c01013cd <serial_putc_sub>
        serial_putc_sub(' ');
c010144b:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101452:	e8 76 ff ff ff       	call   c01013cd <serial_putc_sub>
        serial_putc_sub('\b');
c0101457:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010145e:	e8 6a ff ff ff       	call   c01013cd <serial_putc_sub>
    }
}
c0101463:	c9                   	leave  
c0101464:	c3                   	ret    

c0101465 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101465:	55                   	push   %ebp
c0101466:	89 e5                	mov    %esp,%ebp
c0101468:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c010146b:	eb 33                	jmp    c01014a0 <cons_intr+0x3b>
        if (c != 0) {
c010146d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101471:	74 2d                	je     c01014a0 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101473:	a1 44 04 1b c0       	mov    0xc01b0444,%eax
c0101478:	8d 50 01             	lea    0x1(%eax),%edx
c010147b:	89 15 44 04 1b c0    	mov    %edx,0xc01b0444
c0101481:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101484:	88 90 40 02 1b c0    	mov    %dl,-0x3fe4fdc0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c010148a:	a1 44 04 1b c0       	mov    0xc01b0444,%eax
c010148f:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101494:	75 0a                	jne    c01014a0 <cons_intr+0x3b>
                cons.wpos = 0;
c0101496:	c7 05 44 04 1b c0 00 	movl   $0x0,0xc01b0444
c010149d:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c01014a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01014a3:	ff d0                	call   *%eax
c01014a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01014a8:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c01014ac:	75 bf                	jne    c010146d <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c01014ae:	c9                   	leave  
c01014af:	c3                   	ret    

c01014b0 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c01014b0:	55                   	push   %ebp
c01014b1:	89 e5                	mov    %esp,%ebp
c01014b3:	83 ec 10             	sub    $0x10,%esp
c01014b6:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014bc:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01014c0:	89 c2                	mov    %eax,%edx
c01014c2:	ec                   	in     (%dx),%al
c01014c3:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01014c6:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c01014ca:	0f b6 c0             	movzbl %al,%eax
c01014cd:	83 e0 01             	and    $0x1,%eax
c01014d0:	85 c0                	test   %eax,%eax
c01014d2:	75 07                	jne    c01014db <serial_proc_data+0x2b>
        return -1;
c01014d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01014d9:	eb 2a                	jmp    c0101505 <serial_proc_data+0x55>
c01014db:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014e1:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01014e5:	89 c2                	mov    %eax,%edx
c01014e7:	ec                   	in     (%dx),%al
c01014e8:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c01014eb:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c01014ef:	0f b6 c0             	movzbl %al,%eax
c01014f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c01014f5:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c01014f9:	75 07                	jne    c0101502 <serial_proc_data+0x52>
        c = '\b';
c01014fb:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101502:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101505:	c9                   	leave  
c0101506:	c3                   	ret    

c0101507 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101507:	55                   	push   %ebp
c0101508:	89 e5                	mov    %esp,%ebp
c010150a:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c010150d:	a1 28 02 1b c0       	mov    0xc01b0228,%eax
c0101512:	85 c0                	test   %eax,%eax
c0101514:	74 0c                	je     c0101522 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c0101516:	c7 04 24 b0 14 10 c0 	movl   $0xc01014b0,(%esp)
c010151d:	e8 43 ff ff ff       	call   c0101465 <cons_intr>
    }
}
c0101522:	c9                   	leave  
c0101523:	c3                   	ret    

c0101524 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101524:	55                   	push   %ebp
c0101525:	89 e5                	mov    %esp,%ebp
c0101527:	83 ec 38             	sub    $0x38,%esp
c010152a:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101530:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101534:	89 c2                	mov    %eax,%edx
c0101536:	ec                   	in     (%dx),%al
c0101537:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c010153a:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c010153e:	0f b6 c0             	movzbl %al,%eax
c0101541:	83 e0 01             	and    $0x1,%eax
c0101544:	85 c0                	test   %eax,%eax
c0101546:	75 0a                	jne    c0101552 <kbd_proc_data+0x2e>
        return -1;
c0101548:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010154d:	e9 59 01 00 00       	jmp    c01016ab <kbd_proc_data+0x187>
c0101552:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101558:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010155c:	89 c2                	mov    %eax,%edx
c010155e:	ec                   	in     (%dx),%al
c010155f:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101562:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101566:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101569:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c010156d:	75 17                	jne    c0101586 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c010156f:	a1 48 04 1b c0       	mov    0xc01b0448,%eax
c0101574:	83 c8 40             	or     $0x40,%eax
c0101577:	a3 48 04 1b c0       	mov    %eax,0xc01b0448
        return 0;
c010157c:	b8 00 00 00 00       	mov    $0x0,%eax
c0101581:	e9 25 01 00 00       	jmp    c01016ab <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c0101586:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010158a:	84 c0                	test   %al,%al
c010158c:	79 47                	jns    c01015d5 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c010158e:	a1 48 04 1b c0       	mov    0xc01b0448,%eax
c0101593:	83 e0 40             	and    $0x40,%eax
c0101596:	85 c0                	test   %eax,%eax
c0101598:	75 09                	jne    c01015a3 <kbd_proc_data+0x7f>
c010159a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010159e:	83 e0 7f             	and    $0x7f,%eax
c01015a1:	eb 04                	jmp    c01015a7 <kbd_proc_data+0x83>
c01015a3:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015a7:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c01015aa:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015ae:	0f b6 80 60 e0 12 c0 	movzbl -0x3fed1fa0(%eax),%eax
c01015b5:	83 c8 40             	or     $0x40,%eax
c01015b8:	0f b6 c0             	movzbl %al,%eax
c01015bb:	f7 d0                	not    %eax
c01015bd:	89 c2                	mov    %eax,%edx
c01015bf:	a1 48 04 1b c0       	mov    0xc01b0448,%eax
c01015c4:	21 d0                	and    %edx,%eax
c01015c6:	a3 48 04 1b c0       	mov    %eax,0xc01b0448
        return 0;
c01015cb:	b8 00 00 00 00       	mov    $0x0,%eax
c01015d0:	e9 d6 00 00 00       	jmp    c01016ab <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c01015d5:	a1 48 04 1b c0       	mov    0xc01b0448,%eax
c01015da:	83 e0 40             	and    $0x40,%eax
c01015dd:	85 c0                	test   %eax,%eax
c01015df:	74 11                	je     c01015f2 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c01015e1:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c01015e5:	a1 48 04 1b c0       	mov    0xc01b0448,%eax
c01015ea:	83 e0 bf             	and    $0xffffffbf,%eax
c01015ed:	a3 48 04 1b c0       	mov    %eax,0xc01b0448
    }

    shift |= shiftcode[data];
c01015f2:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015f6:	0f b6 80 60 e0 12 c0 	movzbl -0x3fed1fa0(%eax),%eax
c01015fd:	0f b6 d0             	movzbl %al,%edx
c0101600:	a1 48 04 1b c0       	mov    0xc01b0448,%eax
c0101605:	09 d0                	or     %edx,%eax
c0101607:	a3 48 04 1b c0       	mov    %eax,0xc01b0448
    shift ^= togglecode[data];
c010160c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101610:	0f b6 80 60 e1 12 c0 	movzbl -0x3fed1ea0(%eax),%eax
c0101617:	0f b6 d0             	movzbl %al,%edx
c010161a:	a1 48 04 1b c0       	mov    0xc01b0448,%eax
c010161f:	31 d0                	xor    %edx,%eax
c0101621:	a3 48 04 1b c0       	mov    %eax,0xc01b0448

    c = charcode[shift & (CTL | SHIFT)][data];
c0101626:	a1 48 04 1b c0       	mov    0xc01b0448,%eax
c010162b:	83 e0 03             	and    $0x3,%eax
c010162e:	8b 14 85 60 e5 12 c0 	mov    -0x3fed1aa0(,%eax,4),%edx
c0101635:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101639:	01 d0                	add    %edx,%eax
c010163b:	0f b6 00             	movzbl (%eax),%eax
c010163e:	0f b6 c0             	movzbl %al,%eax
c0101641:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101644:	a1 48 04 1b c0       	mov    0xc01b0448,%eax
c0101649:	83 e0 08             	and    $0x8,%eax
c010164c:	85 c0                	test   %eax,%eax
c010164e:	74 22                	je     c0101672 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101650:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101654:	7e 0c                	jle    c0101662 <kbd_proc_data+0x13e>
c0101656:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c010165a:	7f 06                	jg     c0101662 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c010165c:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101660:	eb 10                	jmp    c0101672 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101662:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101666:	7e 0a                	jle    c0101672 <kbd_proc_data+0x14e>
c0101668:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c010166c:	7f 04                	jg     c0101672 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c010166e:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101672:	a1 48 04 1b c0       	mov    0xc01b0448,%eax
c0101677:	f7 d0                	not    %eax
c0101679:	83 e0 06             	and    $0x6,%eax
c010167c:	85 c0                	test   %eax,%eax
c010167e:	75 28                	jne    c01016a8 <kbd_proc_data+0x184>
c0101680:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101687:	75 1f                	jne    c01016a8 <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c0101689:	c7 04 24 9d cc 10 c0 	movl   $0xc010cc9d,(%esp)
c0101690:	e8 c3 ec ff ff       	call   c0100358 <cprintf>
c0101695:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c010169b:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010169f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c01016a3:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01016a7:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c01016a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01016ab:	c9                   	leave  
c01016ac:	c3                   	ret    

c01016ad <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c01016ad:	55                   	push   %ebp
c01016ae:	89 e5                	mov    %esp,%ebp
c01016b0:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c01016b3:	c7 04 24 24 15 10 c0 	movl   $0xc0101524,(%esp)
c01016ba:	e8 a6 fd ff ff       	call   c0101465 <cons_intr>
}
c01016bf:	c9                   	leave  
c01016c0:	c3                   	ret    

c01016c1 <kbd_init>:

static void
kbd_init(void) {
c01016c1:	55                   	push   %ebp
c01016c2:	89 e5                	mov    %esp,%ebp
c01016c4:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c01016c7:	e8 e1 ff ff ff       	call   c01016ad <kbd_intr>
    pic_enable(IRQ_KBD);
c01016cc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01016d3:	e8 b2 09 00 00       	call   c010208a <pic_enable>
}
c01016d8:	c9                   	leave  
c01016d9:	c3                   	ret    

c01016da <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c01016da:	55                   	push   %ebp
c01016db:	89 e5                	mov    %esp,%ebp
c01016dd:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c01016e0:	e8 93 f8 ff ff       	call   c0100f78 <cga_init>
    serial_init();
c01016e5:	e8 74 f9 ff ff       	call   c010105e <serial_init>
    kbd_init();
c01016ea:	e8 d2 ff ff ff       	call   c01016c1 <kbd_init>
    if (!serial_exists) {
c01016ef:	a1 28 02 1b c0       	mov    0xc01b0228,%eax
c01016f4:	85 c0                	test   %eax,%eax
c01016f6:	75 0c                	jne    c0101704 <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c01016f8:	c7 04 24 a9 cc 10 c0 	movl   $0xc010cca9,(%esp)
c01016ff:	e8 54 ec ff ff       	call   c0100358 <cprintf>
    }
}
c0101704:	c9                   	leave  
c0101705:	c3                   	ret    

c0101706 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101706:	55                   	push   %ebp
c0101707:	89 e5                	mov    %esp,%ebp
c0101709:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010170c:	e8 e2 f7 ff ff       	call   c0100ef3 <__intr_save>
c0101711:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101714:	8b 45 08             	mov    0x8(%ebp),%eax
c0101717:	89 04 24             	mov    %eax,(%esp)
c010171a:	e8 9b fa ff ff       	call   c01011ba <lpt_putc>
        cga_putc(c);
c010171f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101722:	89 04 24             	mov    %eax,(%esp)
c0101725:	e8 cf fa ff ff       	call   c01011f9 <cga_putc>
        serial_putc(c);
c010172a:	8b 45 08             	mov    0x8(%ebp),%eax
c010172d:	89 04 24             	mov    %eax,(%esp)
c0101730:	e8 f1 fc ff ff       	call   c0101426 <serial_putc>
    }
    local_intr_restore(intr_flag);
c0101735:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101738:	89 04 24             	mov    %eax,(%esp)
c010173b:	e8 dd f7 ff ff       	call   c0100f1d <__intr_restore>
}
c0101740:	c9                   	leave  
c0101741:	c3                   	ret    

c0101742 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101742:	55                   	push   %ebp
c0101743:	89 e5                	mov    %esp,%ebp
c0101745:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c0101748:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c010174f:	e8 9f f7 ff ff       	call   c0100ef3 <__intr_save>
c0101754:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101757:	e8 ab fd ff ff       	call   c0101507 <serial_intr>
        kbd_intr();
c010175c:	e8 4c ff ff ff       	call   c01016ad <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0101761:	8b 15 40 04 1b c0    	mov    0xc01b0440,%edx
c0101767:	a1 44 04 1b c0       	mov    0xc01b0444,%eax
c010176c:	39 c2                	cmp    %eax,%edx
c010176e:	74 31                	je     c01017a1 <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0101770:	a1 40 04 1b c0       	mov    0xc01b0440,%eax
c0101775:	8d 50 01             	lea    0x1(%eax),%edx
c0101778:	89 15 40 04 1b c0    	mov    %edx,0xc01b0440
c010177e:	0f b6 80 40 02 1b c0 	movzbl -0x3fe4fdc0(%eax),%eax
c0101785:	0f b6 c0             	movzbl %al,%eax
c0101788:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c010178b:	a1 40 04 1b c0       	mov    0xc01b0440,%eax
c0101790:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101795:	75 0a                	jne    c01017a1 <cons_getc+0x5f>
                cons.rpos = 0;
c0101797:	c7 05 40 04 1b c0 00 	movl   $0x0,0xc01b0440
c010179e:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c01017a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01017a4:	89 04 24             	mov    %eax,(%esp)
c01017a7:	e8 71 f7 ff ff       	call   c0100f1d <__intr_restore>
    return c;
c01017ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017af:	c9                   	leave  
c01017b0:	c3                   	ret    

c01017b1 <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c01017b1:	55                   	push   %ebp
c01017b2:	89 e5                	mov    %esp,%ebp
c01017b4:	83 ec 14             	sub    $0x14,%esp
c01017b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01017ba:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c01017be:	90                   	nop
c01017bf:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01017c3:	83 c0 07             	add    $0x7,%eax
c01017c6:	0f b7 c0             	movzwl %ax,%eax
c01017c9:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01017cd:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01017d1:	89 c2                	mov    %eax,%edx
c01017d3:	ec                   	in     (%dx),%al
c01017d4:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01017d7:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01017db:	0f b6 c0             	movzbl %al,%eax
c01017de:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01017e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017e4:	25 80 00 00 00       	and    $0x80,%eax
c01017e9:	85 c0                	test   %eax,%eax
c01017eb:	75 d2                	jne    c01017bf <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c01017ed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01017f1:	74 11                	je     c0101804 <ide_wait_ready+0x53>
c01017f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017f6:	83 e0 21             	and    $0x21,%eax
c01017f9:	85 c0                	test   %eax,%eax
c01017fb:	74 07                	je     c0101804 <ide_wait_ready+0x53>
        return -1;
c01017fd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101802:	eb 05                	jmp    c0101809 <ide_wait_ready+0x58>
    }
    return 0;
c0101804:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101809:	c9                   	leave  
c010180a:	c3                   	ret    

c010180b <ide_init>:

void
ide_init(void) {
c010180b:	55                   	push   %ebp
c010180c:	89 e5                	mov    %esp,%ebp
c010180e:	57                   	push   %edi
c010180f:	53                   	push   %ebx
c0101810:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101816:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c010181c:	e9 d6 02 00 00       	jmp    c0101af7 <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0101821:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101825:	c1 e0 03             	shl    $0x3,%eax
c0101828:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010182f:	29 c2                	sub    %eax,%edx
c0101831:	8d 82 60 04 1b c0    	lea    -0x3fe4fba0(%edx),%eax
c0101837:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c010183a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010183e:	66 d1 e8             	shr    %ax
c0101841:	0f b7 c0             	movzwl %ax,%eax
c0101844:	0f b7 04 85 c8 cc 10 	movzwl -0x3fef3338(,%eax,4),%eax
c010184b:	c0 
c010184c:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0101850:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101854:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010185b:	00 
c010185c:	89 04 24             	mov    %eax,(%esp)
c010185f:	e8 4d ff ff ff       	call   c01017b1 <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0101864:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101868:	83 e0 01             	and    $0x1,%eax
c010186b:	c1 e0 04             	shl    $0x4,%eax
c010186e:	83 c8 e0             	or     $0xffffffe0,%eax
c0101871:	0f b6 c0             	movzbl %al,%eax
c0101874:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101878:	83 c2 06             	add    $0x6,%edx
c010187b:	0f b7 d2             	movzwl %dx,%edx
c010187e:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0101882:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101885:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0101889:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c010188d:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c010188e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101892:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101899:	00 
c010189a:	89 04 24             	mov    %eax,(%esp)
c010189d:	e8 0f ff ff ff       	call   c01017b1 <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c01018a2:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018a6:	83 c0 07             	add    $0x7,%eax
c01018a9:	0f b7 c0             	movzwl %ax,%eax
c01018ac:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c01018b0:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c01018b4:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01018b8:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01018bc:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01018bd:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018c1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01018c8:	00 
c01018c9:	89 04 24             	mov    %eax,(%esp)
c01018cc:	e8 e0 fe ff ff       	call   c01017b1 <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c01018d1:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018d5:	83 c0 07             	add    $0x7,%eax
c01018d8:	0f b7 c0             	movzwl %ax,%eax
c01018db:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01018df:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c01018e3:	89 c2                	mov    %eax,%edx
c01018e5:	ec                   	in     (%dx),%al
c01018e6:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c01018e9:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01018ed:	84 c0                	test   %al,%al
c01018ef:	0f 84 f7 01 00 00    	je     c0101aec <ide_init+0x2e1>
c01018f5:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018f9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101900:	00 
c0101901:	89 04 24             	mov    %eax,(%esp)
c0101904:	e8 a8 fe ff ff       	call   c01017b1 <ide_wait_ready>
c0101909:	85 c0                	test   %eax,%eax
c010190b:	0f 85 db 01 00 00    	jne    c0101aec <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0101911:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101915:	c1 e0 03             	shl    $0x3,%eax
c0101918:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010191f:	29 c2                	sub    %eax,%edx
c0101921:	8d 82 60 04 1b c0    	lea    -0x3fe4fba0(%edx),%eax
c0101927:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c010192a:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c010192e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0101931:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101937:	89 45 c0             	mov    %eax,-0x40(%ebp)
c010193a:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101941:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0101944:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0101947:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010194a:	89 cb                	mov    %ecx,%ebx
c010194c:	89 df                	mov    %ebx,%edi
c010194e:	89 c1                	mov    %eax,%ecx
c0101950:	fc                   	cld    
c0101951:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101953:	89 c8                	mov    %ecx,%eax
c0101955:	89 fb                	mov    %edi,%ebx
c0101957:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c010195a:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c010195d:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101963:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101966:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101969:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c010196f:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101972:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101975:	25 00 00 00 04       	and    $0x4000000,%eax
c010197a:	85 c0                	test   %eax,%eax
c010197c:	74 0e                	je     c010198c <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c010197e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101981:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101987:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010198a:	eb 09                	jmp    c0101995 <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c010198c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010198f:	8b 40 78             	mov    0x78(%eax),%eax
c0101992:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0101995:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101999:	c1 e0 03             	shl    $0x3,%eax
c010199c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01019a3:	29 c2                	sub    %eax,%edx
c01019a5:	81 c2 60 04 1b c0    	add    $0xc01b0460,%edx
c01019ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01019ae:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c01019b1:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01019b5:	c1 e0 03             	shl    $0x3,%eax
c01019b8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01019bf:	29 c2                	sub    %eax,%edx
c01019c1:	81 c2 60 04 1b c0    	add    $0xc01b0460,%edx
c01019c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01019ca:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c01019cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01019d0:	83 c0 62             	add    $0x62,%eax
c01019d3:	0f b7 00             	movzwl (%eax),%eax
c01019d6:	0f b7 c0             	movzwl %ax,%eax
c01019d9:	25 00 02 00 00       	and    $0x200,%eax
c01019de:	85 c0                	test   %eax,%eax
c01019e0:	75 24                	jne    c0101a06 <ide_init+0x1fb>
c01019e2:	c7 44 24 0c d0 cc 10 	movl   $0xc010ccd0,0xc(%esp)
c01019e9:	c0 
c01019ea:	c7 44 24 08 13 cd 10 	movl   $0xc010cd13,0x8(%esp)
c01019f1:	c0 
c01019f2:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c01019f9:	00 
c01019fa:	c7 04 24 28 cd 10 c0 	movl   $0xc010cd28,(%esp)
c0101a01:	e8 ce f3 ff ff       	call   c0100dd4 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101a06:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a0a:	c1 e0 03             	shl    $0x3,%eax
c0101a0d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a14:	29 c2                	sub    %eax,%edx
c0101a16:	8d 82 60 04 1b c0    	lea    -0x3fe4fba0(%edx),%eax
c0101a1c:	83 c0 0c             	add    $0xc,%eax
c0101a1f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0101a22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a25:	83 c0 36             	add    $0x36,%eax
c0101a28:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0101a2b:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101a32:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101a39:	eb 34                	jmp    c0101a6f <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101a3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a3e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a41:	01 c2                	add    %eax,%edx
c0101a43:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a46:	8d 48 01             	lea    0x1(%eax),%ecx
c0101a49:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101a4c:	01 c8                	add    %ecx,%eax
c0101a4e:	0f b6 00             	movzbl (%eax),%eax
c0101a51:	88 02                	mov    %al,(%edx)
c0101a53:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a56:	8d 50 01             	lea    0x1(%eax),%edx
c0101a59:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101a5c:	01 c2                	add    %eax,%edx
c0101a5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a61:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0101a64:	01 c8                	add    %ecx,%eax
c0101a66:	0f b6 00             	movzbl (%eax),%eax
c0101a69:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101a6b:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101a6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a72:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101a75:	72 c4                	jb     c0101a3b <ide_init+0x230>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101a77:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a7a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a7d:	01 d0                	add    %edx,%eax
c0101a7f:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101a82:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a85:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101a88:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101a8b:	85 c0                	test   %eax,%eax
c0101a8d:	74 0f                	je     c0101a9e <ide_init+0x293>
c0101a8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a92:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a95:	01 d0                	add    %edx,%eax
c0101a97:	0f b6 00             	movzbl (%eax),%eax
c0101a9a:	3c 20                	cmp    $0x20,%al
c0101a9c:	74 d9                	je     c0101a77 <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101a9e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101aa2:	c1 e0 03             	shl    $0x3,%eax
c0101aa5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101aac:	29 c2                	sub    %eax,%edx
c0101aae:	8d 82 60 04 1b c0    	lea    -0x3fe4fba0(%edx),%eax
c0101ab4:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101ab7:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101abb:	c1 e0 03             	shl    $0x3,%eax
c0101abe:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ac5:	29 c2                	sub    %eax,%edx
c0101ac7:	8d 82 60 04 1b c0    	lea    -0x3fe4fba0(%edx),%eax
c0101acd:	8b 50 08             	mov    0x8(%eax),%edx
c0101ad0:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ad4:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101ad8:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101adc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101ae0:	c7 04 24 3a cd 10 c0 	movl   $0xc010cd3a,(%esp)
c0101ae7:	e8 6c e8 ff ff       	call   c0100358 <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101aec:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101af0:	83 c0 01             	add    $0x1,%eax
c0101af3:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0101af7:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0101afc:	0f 86 1f fd ff ff    	jbe    c0101821 <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101b02:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101b09:	e8 7c 05 00 00       	call   c010208a <pic_enable>
    pic_enable(IRQ_IDE2);
c0101b0e:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101b15:	e8 70 05 00 00       	call   c010208a <pic_enable>
}
c0101b1a:	81 c4 50 02 00 00    	add    $0x250,%esp
c0101b20:	5b                   	pop    %ebx
c0101b21:	5f                   	pop    %edi
c0101b22:	5d                   	pop    %ebp
c0101b23:	c3                   	ret    

c0101b24 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101b24:	55                   	push   %ebp
c0101b25:	89 e5                	mov    %esp,%ebp
c0101b27:	83 ec 04             	sub    $0x4,%esp
c0101b2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b2d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101b31:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101b36:	77 24                	ja     c0101b5c <ide_device_valid+0x38>
c0101b38:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b3c:	c1 e0 03             	shl    $0x3,%eax
c0101b3f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b46:	29 c2                	sub    %eax,%edx
c0101b48:	8d 82 60 04 1b c0    	lea    -0x3fe4fba0(%edx),%eax
c0101b4e:	0f b6 00             	movzbl (%eax),%eax
c0101b51:	84 c0                	test   %al,%al
c0101b53:	74 07                	je     c0101b5c <ide_device_valid+0x38>
c0101b55:	b8 01 00 00 00       	mov    $0x1,%eax
c0101b5a:	eb 05                	jmp    c0101b61 <ide_device_valid+0x3d>
c0101b5c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101b61:	c9                   	leave  
c0101b62:	c3                   	ret    

c0101b63 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101b63:	55                   	push   %ebp
c0101b64:	89 e5                	mov    %esp,%ebp
c0101b66:	83 ec 08             	sub    $0x8,%esp
c0101b69:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b6c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101b70:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b74:	89 04 24             	mov    %eax,(%esp)
c0101b77:	e8 a8 ff ff ff       	call   c0101b24 <ide_device_valid>
c0101b7c:	85 c0                	test   %eax,%eax
c0101b7e:	74 1b                	je     c0101b9b <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101b80:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b84:	c1 e0 03             	shl    $0x3,%eax
c0101b87:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b8e:	29 c2                	sub    %eax,%edx
c0101b90:	8d 82 60 04 1b c0    	lea    -0x3fe4fba0(%edx),%eax
c0101b96:	8b 40 08             	mov    0x8(%eax),%eax
c0101b99:	eb 05                	jmp    c0101ba0 <ide_device_size+0x3d>
    }
    return 0;
c0101b9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101ba0:	c9                   	leave  
c0101ba1:	c3                   	ret    

c0101ba2 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101ba2:	55                   	push   %ebp
c0101ba3:	89 e5                	mov    %esp,%ebp
c0101ba5:	57                   	push   %edi
c0101ba6:	53                   	push   %ebx
c0101ba7:	83 ec 50             	sub    $0x50,%esp
c0101baa:	8b 45 08             	mov    0x8(%ebp),%eax
c0101bad:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101bb1:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101bb8:	77 24                	ja     c0101bde <ide_read_secs+0x3c>
c0101bba:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101bbf:	77 1d                	ja     c0101bde <ide_read_secs+0x3c>
c0101bc1:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101bc5:	c1 e0 03             	shl    $0x3,%eax
c0101bc8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bcf:	29 c2                	sub    %eax,%edx
c0101bd1:	8d 82 60 04 1b c0    	lea    -0x3fe4fba0(%edx),%eax
c0101bd7:	0f b6 00             	movzbl (%eax),%eax
c0101bda:	84 c0                	test   %al,%al
c0101bdc:	75 24                	jne    c0101c02 <ide_read_secs+0x60>
c0101bde:	c7 44 24 0c 58 cd 10 	movl   $0xc010cd58,0xc(%esp)
c0101be5:	c0 
c0101be6:	c7 44 24 08 13 cd 10 	movl   $0xc010cd13,0x8(%esp)
c0101bed:	c0 
c0101bee:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101bf5:	00 
c0101bf6:	c7 04 24 28 cd 10 c0 	movl   $0xc010cd28,(%esp)
c0101bfd:	e8 d2 f1 ff ff       	call   c0100dd4 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101c02:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101c09:	77 0f                	ja     c0101c1a <ide_read_secs+0x78>
c0101c0b:	8b 45 14             	mov    0x14(%ebp),%eax
c0101c0e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101c11:	01 d0                	add    %edx,%eax
c0101c13:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101c18:	76 24                	jbe    c0101c3e <ide_read_secs+0x9c>
c0101c1a:	c7 44 24 0c 80 cd 10 	movl   $0xc010cd80,0xc(%esp)
c0101c21:	c0 
c0101c22:	c7 44 24 08 13 cd 10 	movl   $0xc010cd13,0x8(%esp)
c0101c29:	c0 
c0101c2a:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101c31:	00 
c0101c32:	c7 04 24 28 cd 10 c0 	movl   $0xc010cd28,(%esp)
c0101c39:	e8 96 f1 ff ff       	call   c0100dd4 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101c3e:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101c42:	66 d1 e8             	shr    %ax
c0101c45:	0f b7 c0             	movzwl %ax,%eax
c0101c48:	0f b7 04 85 c8 cc 10 	movzwl -0x3fef3338(,%eax,4),%eax
c0101c4f:	c0 
c0101c50:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101c54:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101c58:	66 d1 e8             	shr    %ax
c0101c5b:	0f b7 c0             	movzwl %ax,%eax
c0101c5e:	0f b7 04 85 ca cc 10 	movzwl -0x3fef3336(,%eax,4),%eax
c0101c65:	c0 
c0101c66:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101c6a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101c6e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101c75:	00 
c0101c76:	89 04 24             	mov    %eax,(%esp)
c0101c79:	e8 33 fb ff ff       	call   c01017b1 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101c7e:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101c82:	83 c0 02             	add    $0x2,%eax
c0101c85:	0f b7 c0             	movzwl %ax,%eax
c0101c88:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101c8c:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101c90:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101c94:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101c98:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101c99:	8b 45 14             	mov    0x14(%ebp),%eax
c0101c9c:	0f b6 c0             	movzbl %al,%eax
c0101c9f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101ca3:	83 c2 02             	add    $0x2,%edx
c0101ca6:	0f b7 d2             	movzwl %dx,%edx
c0101ca9:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101cad:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101cb0:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101cb4:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101cb8:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101cb9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101cbc:	0f b6 c0             	movzbl %al,%eax
c0101cbf:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101cc3:	83 c2 03             	add    $0x3,%edx
c0101cc6:	0f b7 d2             	movzwl %dx,%edx
c0101cc9:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101ccd:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101cd0:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101cd4:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101cd8:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101cd9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101cdc:	c1 e8 08             	shr    $0x8,%eax
c0101cdf:	0f b6 c0             	movzbl %al,%eax
c0101ce2:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101ce6:	83 c2 04             	add    $0x4,%edx
c0101ce9:	0f b7 d2             	movzwl %dx,%edx
c0101cec:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101cf0:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101cf3:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101cf7:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101cfb:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101cfc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101cff:	c1 e8 10             	shr    $0x10,%eax
c0101d02:	0f b6 c0             	movzbl %al,%eax
c0101d05:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d09:	83 c2 05             	add    $0x5,%edx
c0101d0c:	0f b7 d2             	movzwl %dx,%edx
c0101d0f:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101d13:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101d16:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101d1a:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101d1e:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101d1f:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d23:	83 e0 01             	and    $0x1,%eax
c0101d26:	c1 e0 04             	shl    $0x4,%eax
c0101d29:	89 c2                	mov    %eax,%edx
c0101d2b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d2e:	c1 e8 18             	shr    $0x18,%eax
c0101d31:	83 e0 0f             	and    $0xf,%eax
c0101d34:	09 d0                	or     %edx,%eax
c0101d36:	83 c8 e0             	or     $0xffffffe0,%eax
c0101d39:	0f b6 c0             	movzbl %al,%eax
c0101d3c:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d40:	83 c2 06             	add    $0x6,%edx
c0101d43:	0f b7 d2             	movzwl %dx,%edx
c0101d46:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101d4a:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101d4d:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101d51:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101d55:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101d56:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d5a:	83 c0 07             	add    $0x7,%eax
c0101d5d:	0f b7 c0             	movzwl %ax,%eax
c0101d60:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101d64:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c0101d68:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101d6c:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101d70:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101d71:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101d78:	eb 5a                	jmp    c0101dd4 <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101d7a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d7e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101d85:	00 
c0101d86:	89 04 24             	mov    %eax,(%esp)
c0101d89:	e8 23 fa ff ff       	call   c01017b1 <ide_wait_ready>
c0101d8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101d91:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101d95:	74 02                	je     c0101d99 <ide_read_secs+0x1f7>
            goto out;
c0101d97:	eb 41                	jmp    c0101dda <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101d99:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d9d:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101da0:	8b 45 10             	mov    0x10(%ebp),%eax
c0101da3:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101da6:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101dad:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101db0:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101db3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101db6:	89 cb                	mov    %ecx,%ebx
c0101db8:	89 df                	mov    %ebx,%edi
c0101dba:	89 c1                	mov    %eax,%ecx
c0101dbc:	fc                   	cld    
c0101dbd:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101dbf:	89 c8                	mov    %ecx,%eax
c0101dc1:	89 fb                	mov    %edi,%ebx
c0101dc3:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0101dc6:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101dc9:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101dcd:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101dd4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101dd8:	75 a0                	jne    c0101d7a <ide_read_secs+0x1d8>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101dda:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101ddd:	83 c4 50             	add    $0x50,%esp
c0101de0:	5b                   	pop    %ebx
c0101de1:	5f                   	pop    %edi
c0101de2:	5d                   	pop    %ebp
c0101de3:	c3                   	ret    

c0101de4 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101de4:	55                   	push   %ebp
c0101de5:	89 e5                	mov    %esp,%ebp
c0101de7:	56                   	push   %esi
c0101de8:	53                   	push   %ebx
c0101de9:	83 ec 50             	sub    $0x50,%esp
c0101dec:	8b 45 08             	mov    0x8(%ebp),%eax
c0101def:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101df3:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101dfa:	77 24                	ja     c0101e20 <ide_write_secs+0x3c>
c0101dfc:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101e01:	77 1d                	ja     c0101e20 <ide_write_secs+0x3c>
c0101e03:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e07:	c1 e0 03             	shl    $0x3,%eax
c0101e0a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101e11:	29 c2                	sub    %eax,%edx
c0101e13:	8d 82 60 04 1b c0    	lea    -0x3fe4fba0(%edx),%eax
c0101e19:	0f b6 00             	movzbl (%eax),%eax
c0101e1c:	84 c0                	test   %al,%al
c0101e1e:	75 24                	jne    c0101e44 <ide_write_secs+0x60>
c0101e20:	c7 44 24 0c 58 cd 10 	movl   $0xc010cd58,0xc(%esp)
c0101e27:	c0 
c0101e28:	c7 44 24 08 13 cd 10 	movl   $0xc010cd13,0x8(%esp)
c0101e2f:	c0 
c0101e30:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101e37:	00 
c0101e38:	c7 04 24 28 cd 10 c0 	movl   $0xc010cd28,(%esp)
c0101e3f:	e8 90 ef ff ff       	call   c0100dd4 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101e44:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101e4b:	77 0f                	ja     c0101e5c <ide_write_secs+0x78>
c0101e4d:	8b 45 14             	mov    0x14(%ebp),%eax
c0101e50:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101e53:	01 d0                	add    %edx,%eax
c0101e55:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101e5a:	76 24                	jbe    c0101e80 <ide_write_secs+0x9c>
c0101e5c:	c7 44 24 0c 80 cd 10 	movl   $0xc010cd80,0xc(%esp)
c0101e63:	c0 
c0101e64:	c7 44 24 08 13 cd 10 	movl   $0xc010cd13,0x8(%esp)
c0101e6b:	c0 
c0101e6c:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0101e73:	00 
c0101e74:	c7 04 24 28 cd 10 c0 	movl   $0xc010cd28,(%esp)
c0101e7b:	e8 54 ef ff ff       	call   c0100dd4 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101e80:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e84:	66 d1 e8             	shr    %ax
c0101e87:	0f b7 c0             	movzwl %ax,%eax
c0101e8a:	0f b7 04 85 c8 cc 10 	movzwl -0x3fef3338(,%eax,4),%eax
c0101e91:	c0 
c0101e92:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101e96:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e9a:	66 d1 e8             	shr    %ax
c0101e9d:	0f b7 c0             	movzwl %ax,%eax
c0101ea0:	0f b7 04 85 ca cc 10 	movzwl -0x3fef3336(,%eax,4),%eax
c0101ea7:	c0 
c0101ea8:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101eac:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101eb0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101eb7:	00 
c0101eb8:	89 04 24             	mov    %eax,(%esp)
c0101ebb:	e8 f1 f8 ff ff       	call   c01017b1 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101ec0:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101ec4:	83 c0 02             	add    $0x2,%eax
c0101ec7:	0f b7 c0             	movzwl %ax,%eax
c0101eca:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101ece:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101ed2:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101ed6:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101eda:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101edb:	8b 45 14             	mov    0x14(%ebp),%eax
c0101ede:	0f b6 c0             	movzbl %al,%eax
c0101ee1:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101ee5:	83 c2 02             	add    $0x2,%edx
c0101ee8:	0f b7 d2             	movzwl %dx,%edx
c0101eeb:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101eef:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101ef2:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ef6:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101efa:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101efb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101efe:	0f b6 c0             	movzbl %al,%eax
c0101f01:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f05:	83 c2 03             	add    $0x3,%edx
c0101f08:	0f b7 d2             	movzwl %dx,%edx
c0101f0b:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101f0f:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101f12:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101f16:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101f1a:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101f1b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f1e:	c1 e8 08             	shr    $0x8,%eax
c0101f21:	0f b6 c0             	movzbl %al,%eax
c0101f24:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f28:	83 c2 04             	add    $0x4,%edx
c0101f2b:	0f b7 d2             	movzwl %dx,%edx
c0101f2e:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101f32:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101f35:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101f39:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101f3d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101f3e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f41:	c1 e8 10             	shr    $0x10,%eax
c0101f44:	0f b6 c0             	movzbl %al,%eax
c0101f47:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f4b:	83 c2 05             	add    $0x5,%edx
c0101f4e:	0f b7 d2             	movzwl %dx,%edx
c0101f51:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101f55:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101f58:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101f5c:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101f60:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101f61:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f65:	83 e0 01             	and    $0x1,%eax
c0101f68:	c1 e0 04             	shl    $0x4,%eax
c0101f6b:	89 c2                	mov    %eax,%edx
c0101f6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f70:	c1 e8 18             	shr    $0x18,%eax
c0101f73:	83 e0 0f             	and    $0xf,%eax
c0101f76:	09 d0                	or     %edx,%eax
c0101f78:	83 c8 e0             	or     $0xffffffe0,%eax
c0101f7b:	0f b6 c0             	movzbl %al,%eax
c0101f7e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f82:	83 c2 06             	add    $0x6,%edx
c0101f85:	0f b7 d2             	movzwl %dx,%edx
c0101f88:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101f8c:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101f8f:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101f93:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101f97:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0101f98:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101f9c:	83 c0 07             	add    $0x7,%eax
c0101f9f:	0f b7 c0             	movzwl %ax,%eax
c0101fa2:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101fa6:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c0101faa:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101fae:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101fb2:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101fb3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0101fba:	eb 5a                	jmp    c0102016 <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101fbc:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fc0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101fc7:	00 
c0101fc8:	89 04 24             	mov    %eax,(%esp)
c0101fcb:	e8 e1 f7 ff ff       	call   c01017b1 <ide_wait_ready>
c0101fd0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101fd3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101fd7:	74 02                	je     c0101fdb <ide_write_secs+0x1f7>
            goto out;
c0101fd9:	eb 41                	jmp    c010201c <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c0101fdb:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fdf:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101fe2:	8b 45 10             	mov    0x10(%ebp),%eax
c0101fe5:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101fe8:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0101fef:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101ff2:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101ff5:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101ff8:	89 cb                	mov    %ecx,%ebx
c0101ffa:	89 de                	mov    %ebx,%esi
c0101ffc:	89 c1                	mov    %eax,%ecx
c0101ffe:	fc                   	cld    
c0101fff:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0102001:	89 c8                	mov    %ecx,%eax
c0102003:	89 f3                	mov    %esi,%ebx
c0102005:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0102008:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c010200b:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c010200f:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0102016:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010201a:	75 a0                	jne    c0101fbc <ide_write_secs+0x1d8>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c010201c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010201f:	83 c4 50             	add    $0x50,%esp
c0102022:	5b                   	pop    %ebx
c0102023:	5e                   	pop    %esi
c0102024:	5d                   	pop    %ebp
c0102025:	c3                   	ret    

c0102026 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c0102026:	55                   	push   %ebp
c0102027:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c0102029:	fb                   	sti    
    sti();
}
c010202a:	5d                   	pop    %ebp
c010202b:	c3                   	ret    

c010202c <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c010202c:	55                   	push   %ebp
c010202d:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c010202f:	fa                   	cli    
    cli();
}
c0102030:	5d                   	pop    %ebp
c0102031:	c3                   	ret    

c0102032 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0102032:	55                   	push   %ebp
c0102033:	89 e5                	mov    %esp,%ebp
c0102035:	83 ec 14             	sub    $0x14,%esp
c0102038:	8b 45 08             	mov    0x8(%ebp),%eax
c010203b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c010203f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102043:	66 a3 70 e5 12 c0    	mov    %ax,0xc012e570
    if (did_init) {
c0102049:	a1 40 05 1b c0       	mov    0xc01b0540,%eax
c010204e:	85 c0                	test   %eax,%eax
c0102050:	74 36                	je     c0102088 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102052:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102056:	0f b6 c0             	movzbl %al,%eax
c0102059:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010205f:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102062:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102066:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010206a:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c010206b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010206f:	66 c1 e8 08          	shr    $0x8,%ax
c0102073:	0f b6 c0             	movzbl %al,%eax
c0102076:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c010207c:	88 45 f9             	mov    %al,-0x7(%ebp)
c010207f:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102083:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102087:	ee                   	out    %al,(%dx)
    }
}
c0102088:	c9                   	leave  
c0102089:	c3                   	ret    

c010208a <pic_enable>:

void
pic_enable(unsigned int irq) {
c010208a:	55                   	push   %ebp
c010208b:	89 e5                	mov    %esp,%ebp
c010208d:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c0102090:	8b 45 08             	mov    0x8(%ebp),%eax
c0102093:	ba 01 00 00 00       	mov    $0x1,%edx
c0102098:	89 c1                	mov    %eax,%ecx
c010209a:	d3 e2                	shl    %cl,%edx
c010209c:	89 d0                	mov    %edx,%eax
c010209e:	f7 d0                	not    %eax
c01020a0:	89 c2                	mov    %eax,%edx
c01020a2:	0f b7 05 70 e5 12 c0 	movzwl 0xc012e570,%eax
c01020a9:	21 d0                	and    %edx,%eax
c01020ab:	0f b7 c0             	movzwl %ax,%eax
c01020ae:	89 04 24             	mov    %eax,(%esp)
c01020b1:	e8 7c ff ff ff       	call   c0102032 <pic_setmask>
}
c01020b6:	c9                   	leave  
c01020b7:	c3                   	ret    

c01020b8 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01020b8:	55                   	push   %ebp
c01020b9:	89 e5                	mov    %esp,%ebp
c01020bb:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c01020be:	c7 05 40 05 1b c0 01 	movl   $0x1,0xc01b0540
c01020c5:	00 00 00 
c01020c8:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01020ce:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c01020d2:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01020d6:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01020da:	ee                   	out    %al,(%dx)
c01020db:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01020e1:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c01020e5:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01020e9:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01020ed:	ee                   	out    %al,(%dx)
c01020ee:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c01020f4:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c01020f8:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01020fc:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0102100:	ee                   	out    %al,(%dx)
c0102101:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c0102107:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c010210b:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010210f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102113:	ee                   	out    %al,(%dx)
c0102114:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c010211a:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c010211e:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102122:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102126:	ee                   	out    %al,(%dx)
c0102127:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c010212d:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c0102131:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102135:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102139:	ee                   	out    %al,(%dx)
c010213a:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c0102140:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c0102144:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102148:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010214c:	ee                   	out    %al,(%dx)
c010214d:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102153:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c0102157:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c010215b:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010215f:	ee                   	out    %al,(%dx)
c0102160:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c0102166:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c010216a:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010216e:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102172:	ee                   	out    %al,(%dx)
c0102173:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c0102179:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c010217d:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102181:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102185:	ee                   	out    %al,(%dx)
c0102186:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c010218c:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c0102190:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0102194:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0102198:	ee                   	out    %al,(%dx)
c0102199:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c010219f:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c01021a3:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01021a7:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01021ab:	ee                   	out    %al,(%dx)
c01021ac:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c01021b2:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c01021b6:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01021ba:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01021be:	ee                   	out    %al,(%dx)
c01021bf:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c01021c5:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c01021c9:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01021cd:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01021d1:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01021d2:	0f b7 05 70 e5 12 c0 	movzwl 0xc012e570,%eax
c01021d9:	66 83 f8 ff          	cmp    $0xffff,%ax
c01021dd:	74 12                	je     c01021f1 <pic_init+0x139>
        pic_setmask(irq_mask);
c01021df:	0f b7 05 70 e5 12 c0 	movzwl 0xc012e570,%eax
c01021e6:	0f b7 c0             	movzwl %ax,%eax
c01021e9:	89 04 24             	mov    %eax,(%esp)
c01021ec:	e8 41 fe ff ff       	call   c0102032 <pic_setmask>
    }
}
c01021f1:	c9                   	leave  
c01021f2:	c3                   	ret    

c01021f3 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01021f3:	55                   	push   %ebp
c01021f4:	89 e5                	mov    %esp,%ebp
c01021f6:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01021f9:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0102200:	00 
c0102201:	c7 04 24 c0 cd 10 c0 	movl   $0xc010cdc0,(%esp)
c0102208:	e8 4b e1 ff ff       	call   c0100358 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c010220d:	c7 04 24 ca cd 10 c0 	movl   $0xc010cdca,(%esp)
c0102214:	e8 3f e1 ff ff       	call   c0100358 <cprintf>
    panic("EOT: kernel seems ok.");
c0102219:	c7 44 24 08 d8 cd 10 	movl   $0xc010cdd8,0x8(%esp)
c0102220:	c0 
c0102221:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c0102228:	00 
c0102229:	c7 04 24 ee cd 10 c0 	movl   $0xc010cdee,(%esp)
c0102230:	e8 9f eb ff ff       	call   c0100dd4 <__panic>

c0102235 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c0102235:	55                   	push   %ebp
c0102236:	89 e5                	mov    %esp,%ebp
c0102238:	83 ec 10             	sub    $0x10,%esp
      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
      *     Notice: the argument of lidt is idt_pd. try to find it!
      */
    extern uintptr_t __vectors[];
	int i;
	for(i = 0;i<sizeof(idt) / sizeof(struct gatedesc);i++)
c010223b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102242:	e9 5c 02 00 00       	jmp    c01024a3 <idt_init+0x26e>
	{
		if(i == T_SYSCALL) //0x80
c0102247:	81 7d fc 80 00 00 00 	cmpl   $0x80,-0x4(%ebp)
c010224e:	0f 85 c1 00 00 00    	jne    c0102315 <idt_init+0xe0>
		{
			SETGATE(idt[i], 1, GD_KTEXT, __vectors[i], DPL_USER);
c0102254:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102257:	8b 04 85 00 e6 12 c0 	mov    -0x3fed1a00(,%eax,4),%eax
c010225e:	89 c2                	mov    %eax,%edx
c0102260:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102263:	66 89 14 c5 60 05 1b 	mov    %dx,-0x3fe4faa0(,%eax,8)
c010226a:	c0 
c010226b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010226e:	66 c7 04 c5 62 05 1b 	movw   $0x8,-0x3fe4fa9e(,%eax,8)
c0102275:	c0 08 00 
c0102278:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010227b:	0f b6 14 c5 64 05 1b 	movzbl -0x3fe4fa9c(,%eax,8),%edx
c0102282:	c0 
c0102283:	83 e2 e0             	and    $0xffffffe0,%edx
c0102286:	88 14 c5 64 05 1b c0 	mov    %dl,-0x3fe4fa9c(,%eax,8)
c010228d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102290:	0f b6 14 c5 64 05 1b 	movzbl -0x3fe4fa9c(,%eax,8),%edx
c0102297:	c0 
c0102298:	83 e2 1f             	and    $0x1f,%edx
c010229b:	88 14 c5 64 05 1b c0 	mov    %dl,-0x3fe4fa9c(,%eax,8)
c01022a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022a5:	0f b6 14 c5 65 05 1b 	movzbl -0x3fe4fa9b(,%eax,8),%edx
c01022ac:	c0 
c01022ad:	83 ca 0f             	or     $0xf,%edx
c01022b0:	88 14 c5 65 05 1b c0 	mov    %dl,-0x3fe4fa9b(,%eax,8)
c01022b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022ba:	0f b6 14 c5 65 05 1b 	movzbl -0x3fe4fa9b(,%eax,8),%edx
c01022c1:	c0 
c01022c2:	83 e2 ef             	and    $0xffffffef,%edx
c01022c5:	88 14 c5 65 05 1b c0 	mov    %dl,-0x3fe4fa9b(,%eax,8)
c01022cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022cf:	0f b6 14 c5 65 05 1b 	movzbl -0x3fe4fa9b(,%eax,8),%edx
c01022d6:	c0 
c01022d7:	83 ca 60             	or     $0x60,%edx
c01022da:	88 14 c5 65 05 1b c0 	mov    %dl,-0x3fe4fa9b(,%eax,8)
c01022e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022e4:	0f b6 14 c5 65 05 1b 	movzbl -0x3fe4fa9b(,%eax,8),%edx
c01022eb:	c0 
c01022ec:	83 ca 80             	or     $0xffffff80,%edx
c01022ef:	88 14 c5 65 05 1b c0 	mov    %dl,-0x3fe4fa9b(,%eax,8)
c01022f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022f9:	8b 04 85 00 e6 12 c0 	mov    -0x3fed1a00(,%eax,4),%eax
c0102300:	c1 e8 10             	shr    $0x10,%eax
c0102303:	89 c2                	mov    %eax,%edx
c0102305:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102308:	66 89 14 c5 66 05 1b 	mov    %dx,-0x3fe4fa9a(,%eax,8)
c010230f:	c0 
c0102310:	e9 8a 01 00 00       	jmp    c010249f <idt_init+0x26a>
		}
		else if(i < 32) //0~31,trap gate
c0102315:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%ebp)
c0102319:	0f 8f c1 00 00 00    	jg     c01023e0 <idt_init+0x1ab>
		{
			SETGATE(idt[i], 1, GD_KTEXT, __vectors[i], DPL_KERNEL);
c010231f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102322:	8b 04 85 00 e6 12 c0 	mov    -0x3fed1a00(,%eax,4),%eax
c0102329:	89 c2                	mov    %eax,%edx
c010232b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010232e:	66 89 14 c5 60 05 1b 	mov    %dx,-0x3fe4faa0(,%eax,8)
c0102335:	c0 
c0102336:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102339:	66 c7 04 c5 62 05 1b 	movw   $0x8,-0x3fe4fa9e(,%eax,8)
c0102340:	c0 08 00 
c0102343:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102346:	0f b6 14 c5 64 05 1b 	movzbl -0x3fe4fa9c(,%eax,8),%edx
c010234d:	c0 
c010234e:	83 e2 e0             	and    $0xffffffe0,%edx
c0102351:	88 14 c5 64 05 1b c0 	mov    %dl,-0x3fe4fa9c(,%eax,8)
c0102358:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010235b:	0f b6 14 c5 64 05 1b 	movzbl -0x3fe4fa9c(,%eax,8),%edx
c0102362:	c0 
c0102363:	83 e2 1f             	and    $0x1f,%edx
c0102366:	88 14 c5 64 05 1b c0 	mov    %dl,-0x3fe4fa9c(,%eax,8)
c010236d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102370:	0f b6 14 c5 65 05 1b 	movzbl -0x3fe4fa9b(,%eax,8),%edx
c0102377:	c0 
c0102378:	83 ca 0f             	or     $0xf,%edx
c010237b:	88 14 c5 65 05 1b c0 	mov    %dl,-0x3fe4fa9b(,%eax,8)
c0102382:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102385:	0f b6 14 c5 65 05 1b 	movzbl -0x3fe4fa9b(,%eax,8),%edx
c010238c:	c0 
c010238d:	83 e2 ef             	and    $0xffffffef,%edx
c0102390:	88 14 c5 65 05 1b c0 	mov    %dl,-0x3fe4fa9b(,%eax,8)
c0102397:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010239a:	0f b6 14 c5 65 05 1b 	movzbl -0x3fe4fa9b(,%eax,8),%edx
c01023a1:	c0 
c01023a2:	83 e2 9f             	and    $0xffffff9f,%edx
c01023a5:	88 14 c5 65 05 1b c0 	mov    %dl,-0x3fe4fa9b(,%eax,8)
c01023ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023af:	0f b6 14 c5 65 05 1b 	movzbl -0x3fe4fa9b(,%eax,8),%edx
c01023b6:	c0 
c01023b7:	83 ca 80             	or     $0xffffff80,%edx
c01023ba:	88 14 c5 65 05 1b c0 	mov    %dl,-0x3fe4fa9b(,%eax,8)
c01023c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023c4:	8b 04 85 00 e6 12 c0 	mov    -0x3fed1a00(,%eax,4),%eax
c01023cb:	c1 e8 10             	shr    $0x10,%eax
c01023ce:	89 c2                	mov    %eax,%edx
c01023d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023d3:	66 89 14 c5 66 05 1b 	mov    %dx,-0x3fe4fa9a(,%eax,8)
c01023da:	c0 
c01023db:	e9 bf 00 00 00       	jmp    c010249f <idt_init+0x26a>
		}
		else //others, interrupt gate
		{
			SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c01023e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023e3:	8b 04 85 00 e6 12 c0 	mov    -0x3fed1a00(,%eax,4),%eax
c01023ea:	89 c2                	mov    %eax,%edx
c01023ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023ef:	66 89 14 c5 60 05 1b 	mov    %dx,-0x3fe4faa0(,%eax,8)
c01023f6:	c0 
c01023f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023fa:	66 c7 04 c5 62 05 1b 	movw   $0x8,-0x3fe4fa9e(,%eax,8)
c0102401:	c0 08 00 
c0102404:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102407:	0f b6 14 c5 64 05 1b 	movzbl -0x3fe4fa9c(,%eax,8),%edx
c010240e:	c0 
c010240f:	83 e2 e0             	and    $0xffffffe0,%edx
c0102412:	88 14 c5 64 05 1b c0 	mov    %dl,-0x3fe4fa9c(,%eax,8)
c0102419:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010241c:	0f b6 14 c5 64 05 1b 	movzbl -0x3fe4fa9c(,%eax,8),%edx
c0102423:	c0 
c0102424:	83 e2 1f             	and    $0x1f,%edx
c0102427:	88 14 c5 64 05 1b c0 	mov    %dl,-0x3fe4fa9c(,%eax,8)
c010242e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102431:	0f b6 14 c5 65 05 1b 	movzbl -0x3fe4fa9b(,%eax,8),%edx
c0102438:	c0 
c0102439:	83 e2 f0             	and    $0xfffffff0,%edx
c010243c:	83 ca 0e             	or     $0xe,%edx
c010243f:	88 14 c5 65 05 1b c0 	mov    %dl,-0x3fe4fa9b(,%eax,8)
c0102446:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102449:	0f b6 14 c5 65 05 1b 	movzbl -0x3fe4fa9b(,%eax,8),%edx
c0102450:	c0 
c0102451:	83 e2 ef             	and    $0xffffffef,%edx
c0102454:	88 14 c5 65 05 1b c0 	mov    %dl,-0x3fe4fa9b(,%eax,8)
c010245b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010245e:	0f b6 14 c5 65 05 1b 	movzbl -0x3fe4fa9b(,%eax,8),%edx
c0102465:	c0 
c0102466:	83 e2 9f             	and    $0xffffff9f,%edx
c0102469:	88 14 c5 65 05 1b c0 	mov    %dl,-0x3fe4fa9b(,%eax,8)
c0102470:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102473:	0f b6 14 c5 65 05 1b 	movzbl -0x3fe4fa9b(,%eax,8),%edx
c010247a:	c0 
c010247b:	83 ca 80             	or     $0xffffff80,%edx
c010247e:	88 14 c5 65 05 1b c0 	mov    %dl,-0x3fe4fa9b(,%eax,8)
c0102485:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102488:	8b 04 85 00 e6 12 c0 	mov    -0x3fed1a00(,%eax,4),%eax
c010248f:	c1 e8 10             	shr    $0x10,%eax
c0102492:	89 c2                	mov    %eax,%edx
c0102494:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102497:	66 89 14 c5 66 05 1b 	mov    %dx,-0x3fe4fa9a(,%eax,8)
c010249e:	c0 
      *     You don't know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
      *     Notice: the argument of lidt is idt_pd. try to find it!
      */
    extern uintptr_t __vectors[];
	int i;
	for(i = 0;i<sizeof(idt) / sizeof(struct gatedesc);i++)
c010249f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01024a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01024a6:	3d ff 00 00 00       	cmp    $0xff,%eax
c01024ab:	0f 86 96 fd ff ff    	jbe    c0102247 <idt_init+0x12>
		{
			SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
		}
	}
	//user to kernel
	SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
c01024b1:	a1 e4 e7 12 c0       	mov    0xc012e7e4,%eax
c01024b6:	66 a3 28 09 1b c0    	mov    %ax,0xc01b0928
c01024bc:	66 c7 05 2a 09 1b c0 	movw   $0x8,0xc01b092a
c01024c3:	08 00 
c01024c5:	0f b6 05 2c 09 1b c0 	movzbl 0xc01b092c,%eax
c01024cc:	83 e0 e0             	and    $0xffffffe0,%eax
c01024cf:	a2 2c 09 1b c0       	mov    %al,0xc01b092c
c01024d4:	0f b6 05 2c 09 1b c0 	movzbl 0xc01b092c,%eax
c01024db:	83 e0 1f             	and    $0x1f,%eax
c01024de:	a2 2c 09 1b c0       	mov    %al,0xc01b092c
c01024e3:	0f b6 05 2d 09 1b c0 	movzbl 0xc01b092d,%eax
c01024ea:	83 e0 f0             	and    $0xfffffff0,%eax
c01024ed:	83 c8 0e             	or     $0xe,%eax
c01024f0:	a2 2d 09 1b c0       	mov    %al,0xc01b092d
c01024f5:	0f b6 05 2d 09 1b c0 	movzbl 0xc01b092d,%eax
c01024fc:	83 e0 ef             	and    $0xffffffef,%eax
c01024ff:	a2 2d 09 1b c0       	mov    %al,0xc01b092d
c0102504:	0f b6 05 2d 09 1b c0 	movzbl 0xc01b092d,%eax
c010250b:	83 c8 60             	or     $0x60,%eax
c010250e:	a2 2d 09 1b c0       	mov    %al,0xc01b092d
c0102513:	0f b6 05 2d 09 1b c0 	movzbl 0xc01b092d,%eax
c010251a:	83 c8 80             	or     $0xffffff80,%eax
c010251d:	a2 2d 09 1b c0       	mov    %al,0xc01b092d
c0102522:	a1 e4 e7 12 c0       	mov    0xc012e7e4,%eax
c0102527:	c1 e8 10             	shr    $0x10,%eax
c010252a:	66 a3 2e 09 1b c0    	mov    %ax,0xc01b092e
c0102530:	c7 45 f8 80 e5 12 c0 	movl   $0xc012e580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c0102537:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010253a:	0f 01 18             	lidtl  (%eax)
	lidt(&idt_pd);
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
}
c010253d:	c9                   	leave  
c010253e:	c3                   	ret    

c010253f <trapname>:

static const char *
trapname(int trapno) {
c010253f:	55                   	push   %ebp
c0102540:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c0102542:	8b 45 08             	mov    0x8(%ebp),%eax
c0102545:	83 f8 13             	cmp    $0x13,%eax
c0102548:	77 0c                	ja     c0102556 <trapname+0x17>
        return excnames[trapno];
c010254a:	8b 45 08             	mov    0x8(%ebp),%eax
c010254d:	8b 04 85 80 d2 10 c0 	mov    -0x3fef2d80(,%eax,4),%eax
c0102554:	eb 18                	jmp    c010256e <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c0102556:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c010255a:	7e 0d                	jle    c0102569 <trapname+0x2a>
c010255c:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0102560:	7f 07                	jg     c0102569 <trapname+0x2a>
        return "Hardware Interrupt";
c0102562:	b8 ff cd 10 c0       	mov    $0xc010cdff,%eax
c0102567:	eb 05                	jmp    c010256e <trapname+0x2f>
    }
    return "(unknown trap)";
c0102569:	b8 12 ce 10 c0       	mov    $0xc010ce12,%eax
}
c010256e:	5d                   	pop    %ebp
c010256f:	c3                   	ret    

c0102570 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c0102570:	55                   	push   %ebp
c0102571:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c0102573:	8b 45 08             	mov    0x8(%ebp),%eax
c0102576:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c010257a:	66 83 f8 08          	cmp    $0x8,%ax
c010257e:	0f 94 c0             	sete   %al
c0102581:	0f b6 c0             	movzbl %al,%eax
}
c0102584:	5d                   	pop    %ebp
c0102585:	c3                   	ret    

c0102586 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c0102586:	55                   	push   %ebp
c0102587:	89 e5                	mov    %esp,%ebp
c0102589:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c010258c:	8b 45 08             	mov    0x8(%ebp),%eax
c010258f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102593:	c7 04 24 53 ce 10 c0 	movl   $0xc010ce53,(%esp)
c010259a:	e8 b9 dd ff ff       	call   c0100358 <cprintf>
    print_regs(&tf->tf_regs);
c010259f:	8b 45 08             	mov    0x8(%ebp),%eax
c01025a2:	89 04 24             	mov    %eax,(%esp)
c01025a5:	e8 a1 01 00 00       	call   c010274b <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c01025aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ad:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c01025b1:	0f b7 c0             	movzwl %ax,%eax
c01025b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025b8:	c7 04 24 64 ce 10 c0 	movl   $0xc010ce64,(%esp)
c01025bf:	e8 94 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c01025c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01025c7:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c01025cb:	0f b7 c0             	movzwl %ax,%eax
c01025ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025d2:	c7 04 24 77 ce 10 c0 	movl   $0xc010ce77,(%esp)
c01025d9:	e8 7a dd ff ff       	call   c0100358 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c01025de:	8b 45 08             	mov    0x8(%ebp),%eax
c01025e1:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c01025e5:	0f b7 c0             	movzwl %ax,%eax
c01025e8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025ec:	c7 04 24 8a ce 10 c0 	movl   $0xc010ce8a,(%esp)
c01025f3:	e8 60 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c01025f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01025fb:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c01025ff:	0f b7 c0             	movzwl %ax,%eax
c0102602:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102606:	c7 04 24 9d ce 10 c0 	movl   $0xc010ce9d,(%esp)
c010260d:	e8 46 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c0102612:	8b 45 08             	mov    0x8(%ebp),%eax
c0102615:	8b 40 30             	mov    0x30(%eax),%eax
c0102618:	89 04 24             	mov    %eax,(%esp)
c010261b:	e8 1f ff ff ff       	call   c010253f <trapname>
c0102620:	8b 55 08             	mov    0x8(%ebp),%edx
c0102623:	8b 52 30             	mov    0x30(%edx),%edx
c0102626:	89 44 24 08          	mov    %eax,0x8(%esp)
c010262a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010262e:	c7 04 24 b0 ce 10 c0 	movl   $0xc010ceb0,(%esp)
c0102635:	e8 1e dd ff ff       	call   c0100358 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c010263a:	8b 45 08             	mov    0x8(%ebp),%eax
c010263d:	8b 40 34             	mov    0x34(%eax),%eax
c0102640:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102644:	c7 04 24 c2 ce 10 c0 	movl   $0xc010cec2,(%esp)
c010264b:	e8 08 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c0102650:	8b 45 08             	mov    0x8(%ebp),%eax
c0102653:	8b 40 38             	mov    0x38(%eax),%eax
c0102656:	89 44 24 04          	mov    %eax,0x4(%esp)
c010265a:	c7 04 24 d1 ce 10 c0 	movl   $0xc010ced1,(%esp)
c0102661:	e8 f2 dc ff ff       	call   c0100358 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c0102666:	8b 45 08             	mov    0x8(%ebp),%eax
c0102669:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c010266d:	0f b7 c0             	movzwl %ax,%eax
c0102670:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102674:	c7 04 24 e0 ce 10 c0 	movl   $0xc010cee0,(%esp)
c010267b:	e8 d8 dc ff ff       	call   c0100358 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c0102680:	8b 45 08             	mov    0x8(%ebp),%eax
c0102683:	8b 40 40             	mov    0x40(%eax),%eax
c0102686:	89 44 24 04          	mov    %eax,0x4(%esp)
c010268a:	c7 04 24 f3 ce 10 c0 	movl   $0xc010cef3,(%esp)
c0102691:	e8 c2 dc ff ff       	call   c0100358 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102696:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010269d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c01026a4:	eb 3e                	jmp    c01026e4 <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c01026a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01026a9:	8b 50 40             	mov    0x40(%eax),%edx
c01026ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01026af:	21 d0                	and    %edx,%eax
c01026b1:	85 c0                	test   %eax,%eax
c01026b3:	74 28                	je     c01026dd <print_trapframe+0x157>
c01026b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026b8:	8b 04 85 a0 e5 12 c0 	mov    -0x3fed1a60(,%eax,4),%eax
c01026bf:	85 c0                	test   %eax,%eax
c01026c1:	74 1a                	je     c01026dd <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c01026c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026c6:	8b 04 85 a0 e5 12 c0 	mov    -0x3fed1a60(,%eax,4),%eax
c01026cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026d1:	c7 04 24 02 cf 10 c0 	movl   $0xc010cf02,(%esp)
c01026d8:	e8 7b dc ff ff       	call   c0100358 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01026dd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01026e1:	d1 65 f0             	shll   -0x10(%ebp)
c01026e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026e7:	83 f8 17             	cmp    $0x17,%eax
c01026ea:	76 ba                	jbe    c01026a6 <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c01026ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01026ef:	8b 40 40             	mov    0x40(%eax),%eax
c01026f2:	25 00 30 00 00       	and    $0x3000,%eax
c01026f7:	c1 e8 0c             	shr    $0xc,%eax
c01026fa:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026fe:	c7 04 24 06 cf 10 c0 	movl   $0xc010cf06,(%esp)
c0102705:	e8 4e dc ff ff       	call   c0100358 <cprintf>

    if (!trap_in_kernel(tf)) {
c010270a:	8b 45 08             	mov    0x8(%ebp),%eax
c010270d:	89 04 24             	mov    %eax,(%esp)
c0102710:	e8 5b fe ff ff       	call   c0102570 <trap_in_kernel>
c0102715:	85 c0                	test   %eax,%eax
c0102717:	75 30                	jne    c0102749 <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0102719:	8b 45 08             	mov    0x8(%ebp),%eax
c010271c:	8b 40 44             	mov    0x44(%eax),%eax
c010271f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102723:	c7 04 24 0f cf 10 c0 	movl   $0xc010cf0f,(%esp)
c010272a:	e8 29 dc ff ff       	call   c0100358 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c010272f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102732:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c0102736:	0f b7 c0             	movzwl %ax,%eax
c0102739:	89 44 24 04          	mov    %eax,0x4(%esp)
c010273d:	c7 04 24 1e cf 10 c0 	movl   $0xc010cf1e,(%esp)
c0102744:	e8 0f dc ff ff       	call   c0100358 <cprintf>
    }
}
c0102749:	c9                   	leave  
c010274a:	c3                   	ret    

c010274b <print_regs>:

void
print_regs(struct pushregs *regs) {
c010274b:	55                   	push   %ebp
c010274c:	89 e5                	mov    %esp,%ebp
c010274e:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0102751:	8b 45 08             	mov    0x8(%ebp),%eax
c0102754:	8b 00                	mov    (%eax),%eax
c0102756:	89 44 24 04          	mov    %eax,0x4(%esp)
c010275a:	c7 04 24 31 cf 10 c0 	movl   $0xc010cf31,(%esp)
c0102761:	e8 f2 db ff ff       	call   c0100358 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c0102766:	8b 45 08             	mov    0x8(%ebp),%eax
c0102769:	8b 40 04             	mov    0x4(%eax),%eax
c010276c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102770:	c7 04 24 40 cf 10 c0 	movl   $0xc010cf40,(%esp)
c0102777:	e8 dc db ff ff       	call   c0100358 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c010277c:	8b 45 08             	mov    0x8(%ebp),%eax
c010277f:	8b 40 08             	mov    0x8(%eax),%eax
c0102782:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102786:	c7 04 24 4f cf 10 c0 	movl   $0xc010cf4f,(%esp)
c010278d:	e8 c6 db ff ff       	call   c0100358 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c0102792:	8b 45 08             	mov    0x8(%ebp),%eax
c0102795:	8b 40 0c             	mov    0xc(%eax),%eax
c0102798:	89 44 24 04          	mov    %eax,0x4(%esp)
c010279c:	c7 04 24 5e cf 10 c0 	movl   $0xc010cf5e,(%esp)
c01027a3:	e8 b0 db ff ff       	call   c0100358 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c01027a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01027ab:	8b 40 10             	mov    0x10(%eax),%eax
c01027ae:	89 44 24 04          	mov    %eax,0x4(%esp)
c01027b2:	c7 04 24 6d cf 10 c0 	movl   $0xc010cf6d,(%esp)
c01027b9:	e8 9a db ff ff       	call   c0100358 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c01027be:	8b 45 08             	mov    0x8(%ebp),%eax
c01027c1:	8b 40 14             	mov    0x14(%eax),%eax
c01027c4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01027c8:	c7 04 24 7c cf 10 c0 	movl   $0xc010cf7c,(%esp)
c01027cf:	e8 84 db ff ff       	call   c0100358 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c01027d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01027d7:	8b 40 18             	mov    0x18(%eax),%eax
c01027da:	89 44 24 04          	mov    %eax,0x4(%esp)
c01027de:	c7 04 24 8b cf 10 c0 	movl   $0xc010cf8b,(%esp)
c01027e5:	e8 6e db ff ff       	call   c0100358 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c01027ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01027ed:	8b 40 1c             	mov    0x1c(%eax),%eax
c01027f0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01027f4:	c7 04 24 9a cf 10 c0 	movl   $0xc010cf9a,(%esp)
c01027fb:	e8 58 db ff ff       	call   c0100358 <cprintf>
}
c0102800:	c9                   	leave  
c0102801:	c3                   	ret    

c0102802 <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c0102802:	55                   	push   %ebp
c0102803:	89 e5                	mov    %esp,%ebp
c0102805:	53                   	push   %ebx
c0102806:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0102809:	8b 45 08             	mov    0x8(%ebp),%eax
c010280c:	8b 40 34             	mov    0x34(%eax),%eax
c010280f:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102812:	85 c0                	test   %eax,%eax
c0102814:	74 07                	je     c010281d <print_pgfault+0x1b>
c0102816:	b9 a9 cf 10 c0       	mov    $0xc010cfa9,%ecx
c010281b:	eb 05                	jmp    c0102822 <print_pgfault+0x20>
c010281d:	b9 ba cf 10 c0       	mov    $0xc010cfba,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c0102822:	8b 45 08             	mov    0x8(%ebp),%eax
c0102825:	8b 40 34             	mov    0x34(%eax),%eax
c0102828:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010282b:	85 c0                	test   %eax,%eax
c010282d:	74 07                	je     c0102836 <print_pgfault+0x34>
c010282f:	ba 57 00 00 00       	mov    $0x57,%edx
c0102834:	eb 05                	jmp    c010283b <print_pgfault+0x39>
c0102836:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c010283b:	8b 45 08             	mov    0x8(%ebp),%eax
c010283e:	8b 40 34             	mov    0x34(%eax),%eax
c0102841:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102844:	85 c0                	test   %eax,%eax
c0102846:	74 07                	je     c010284f <print_pgfault+0x4d>
c0102848:	b8 55 00 00 00       	mov    $0x55,%eax
c010284d:	eb 05                	jmp    c0102854 <print_pgfault+0x52>
c010284f:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102854:	0f 20 d3             	mov    %cr2,%ebx
c0102857:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c010285a:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c010285d:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0102861:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0102865:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102869:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c010286d:	c7 04 24 c8 cf 10 c0 	movl   $0xc010cfc8,(%esp)
c0102874:	e8 df da ff ff       	call   c0100358 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c0102879:	83 c4 34             	add    $0x34,%esp
c010287c:	5b                   	pop    %ebx
c010287d:	5d                   	pop    %ebp
c010287e:	c3                   	ret    

c010287f <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c010287f:	55                   	push   %ebp
c0102880:	89 e5                	mov    %esp,%ebp
c0102882:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c0102885:	a1 6c 2f 1b c0       	mov    0xc01b2f6c,%eax
c010288a:	85 c0                	test   %eax,%eax
c010288c:	74 0b                	je     c0102899 <pgfault_handler+0x1a>
            print_pgfault(tf);
c010288e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102891:	89 04 24             	mov    %eax,(%esp)
c0102894:	e8 69 ff ff ff       	call   c0102802 <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c0102899:	a1 6c 2f 1b c0       	mov    0xc01b2f6c,%eax
c010289e:	85 c0                	test   %eax,%eax
c01028a0:	74 3d                	je     c01028df <pgfault_handler+0x60>
        assert(current == idleproc);
c01028a2:	8b 15 28 0e 1b c0    	mov    0xc01b0e28,%edx
c01028a8:	a1 20 0e 1b c0       	mov    0xc01b0e20,%eax
c01028ad:	39 c2                	cmp    %eax,%edx
c01028af:	74 24                	je     c01028d5 <pgfault_handler+0x56>
c01028b1:	c7 44 24 0c eb cf 10 	movl   $0xc010cfeb,0xc(%esp)
c01028b8:	c0 
c01028b9:	c7 44 24 08 ff cf 10 	movl   $0xc010cfff,0x8(%esp)
c01028c0:	c0 
c01028c1:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c01028c8:	00 
c01028c9:	c7 04 24 ee cd 10 c0 	movl   $0xc010cdee,(%esp)
c01028d0:	e8 ff e4 ff ff       	call   c0100dd4 <__panic>
        mm = check_mm_struct;
c01028d5:	a1 6c 2f 1b c0       	mov    0xc01b2f6c,%eax
c01028da:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01028dd:	eb 46                	jmp    c0102925 <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c01028df:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c01028e4:	85 c0                	test   %eax,%eax
c01028e6:	75 32                	jne    c010291a <pgfault_handler+0x9b>
            print_trapframe(tf);
c01028e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01028eb:	89 04 24             	mov    %eax,(%esp)
c01028ee:	e8 93 fc ff ff       	call   c0102586 <print_trapframe>
            print_pgfault(tf);
c01028f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01028f6:	89 04 24             	mov    %eax,(%esp)
c01028f9:	e8 04 ff ff ff       	call   c0102802 <print_pgfault>
            panic("unhandled page fault.\n");
c01028fe:	c7 44 24 08 14 d0 10 	movl   $0xc010d014,0x8(%esp)
c0102905:	c0 
c0102906:	c7 44 24 04 c4 00 00 	movl   $0xc4,0x4(%esp)
c010290d:	00 
c010290e:	c7 04 24 ee cd 10 c0 	movl   $0xc010cdee,(%esp)
c0102915:	e8 ba e4 ff ff       	call   c0100dd4 <__panic>
        }
        mm = current->mm;
c010291a:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010291f:	8b 40 18             	mov    0x18(%eax),%eax
c0102922:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102925:	0f 20 d0             	mov    %cr2,%eax
c0102928:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c010292b:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c010292e:	89 c2                	mov    %eax,%edx
c0102930:	8b 45 08             	mov    0x8(%ebp),%eax
c0102933:	8b 40 34             	mov    0x34(%eax),%eax
c0102936:	89 54 24 08          	mov    %edx,0x8(%esp)
c010293a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010293e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102941:	89 04 24             	mov    %eax,(%esp)
c0102944:	e8 2c 65 00 00       	call   c0108e75 <do_pgfault>
}
c0102949:	c9                   	leave  
c010294a:	c3                   	ret    

c010294b <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c010294b:	55                   	push   %ebp
c010294c:	89 e5                	mov    %esp,%ebp
c010294e:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c0102951:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c0102958:	8b 45 08             	mov    0x8(%ebp),%eax
c010295b:	8b 40 30             	mov    0x30(%eax),%eax
c010295e:	83 f8 2f             	cmp    $0x2f,%eax
c0102961:	77 38                	ja     c010299b <trap_dispatch+0x50>
c0102963:	83 f8 2e             	cmp    $0x2e,%eax
c0102966:	0f 83 07 02 00 00    	jae    c0102b73 <trap_dispatch+0x228>
c010296c:	83 f8 20             	cmp    $0x20,%eax
c010296f:	0f 84 07 01 00 00    	je     c0102a7c <trap_dispatch+0x131>
c0102975:	83 f8 20             	cmp    $0x20,%eax
c0102978:	77 0a                	ja     c0102984 <trap_dispatch+0x39>
c010297a:	83 f8 0e             	cmp    $0xe,%eax
c010297d:	74 3e                	je     c01029bd <trap_dispatch+0x72>
c010297f:	e9 a7 01 00 00       	jmp    c0102b2b <trap_dispatch+0x1e0>
c0102984:	83 f8 21             	cmp    $0x21,%eax
c0102987:	0f 84 5c 01 00 00    	je     c0102ae9 <trap_dispatch+0x19e>
c010298d:	83 f8 24             	cmp    $0x24,%eax
c0102990:	0f 84 2a 01 00 00    	je     c0102ac0 <trap_dispatch+0x175>
c0102996:	e9 90 01 00 00       	jmp    c0102b2b <trap_dispatch+0x1e0>
c010299b:	83 f8 78             	cmp    $0x78,%eax
c010299e:	0f 82 87 01 00 00    	jb     c0102b2b <trap_dispatch+0x1e0>
c01029a4:	83 f8 79             	cmp    $0x79,%eax
c01029a7:	0f 86 62 01 00 00    	jbe    c0102b0f <trap_dispatch+0x1c4>
c01029ad:	3d 80 00 00 00       	cmp    $0x80,%eax
c01029b2:	0f 84 ba 00 00 00    	je     c0102a72 <trap_dispatch+0x127>
c01029b8:	e9 6e 01 00 00       	jmp    c0102b2b <trap_dispatch+0x1e0>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c01029bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01029c0:	89 04 24             	mov    %eax,(%esp)
c01029c3:	e8 b7 fe ff ff       	call   c010287f <pgfault_handler>
c01029c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01029cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01029cf:	0f 84 98 00 00 00    	je     c0102a6d <trap_dispatch+0x122>
            print_trapframe(tf);
c01029d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01029d8:	89 04 24             	mov    %eax,(%esp)
c01029db:	e8 a6 fb ff ff       	call   c0102586 <print_trapframe>
            if (current == NULL) {
c01029e0:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c01029e5:	85 c0                	test   %eax,%eax
c01029e7:	75 23                	jne    c0102a0c <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c01029e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01029ec:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01029f0:	c7 44 24 08 2c d0 10 	movl   $0xc010d02c,0x8(%esp)
c01029f7:	c0 
c01029f8:	c7 44 24 04 d9 00 00 	movl   $0xd9,0x4(%esp)
c01029ff:	00 
c0102a00:	c7 04 24 ee cd 10 c0 	movl   $0xc010cdee,(%esp)
c0102a07:	e8 c8 e3 ff ff       	call   c0100dd4 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0102a0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a0f:	89 04 24             	mov    %eax,(%esp)
c0102a12:	e8 59 fb ff ff       	call   c0102570 <trap_in_kernel>
c0102a17:	85 c0                	test   %eax,%eax
c0102a19:	74 23                	je     c0102a3e <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0102a1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102a1e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102a22:	c7 44 24 08 4c d0 10 	movl   $0xc010d04c,0x8(%esp)
c0102a29:	c0 
c0102a2a:	c7 44 24 04 dd 00 00 	movl   $0xdd,0x4(%esp)
c0102a31:	00 
c0102a32:	c7 04 24 ee cd 10 c0 	movl   $0xc010cdee,(%esp)
c0102a39:	e8 96 e3 ff ff       	call   c0100dd4 <__panic>
                }
                cprintf("killed by kernel.\n");
c0102a3e:	c7 04 24 7a d0 10 c0 	movl   $0xc010d07a,(%esp)
c0102a45:	e8 0e d9 ff ff       	call   c0100358 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c0102a4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102a4d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102a51:	c7 44 24 08 90 d0 10 	movl   $0xc010d090,0x8(%esp)
c0102a58:	c0 
c0102a59:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0102a60:	00 
c0102a61:	c7 04 24 ee cd 10 c0 	movl   $0xc010cdee,(%esp)
c0102a68:	e8 67 e3 ff ff       	call   c0100dd4 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c0102a6d:	e9 02 01 00 00       	jmp    c0102b74 <trap_dispatch+0x229>
    case T_SYSCALL:
        syscall();
c0102a72:	e8 04 92 00 00       	call   c010bc7b <syscall>
        break;
c0102a77:	e9 f8 00 00 00       	jmp    c0102b74 <trap_dispatch+0x229>
        /* handle the timer interrupt */
        /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
         * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
         * (3) Too Simple? Yes, I think so!
         */
        ticks++;
c0102a7c:	a1 78 2e 1b c0       	mov    0xc01b2e78,%eax
c0102a81:	83 c0 01             	add    $0x1,%eax
c0102a84:	a3 78 2e 1b c0       	mov    %eax,0xc01b2e78
		assert(current != NULL);
c0102a89:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c0102a8e:	85 c0                	test   %eax,%eax
c0102a90:	75 24                	jne    c0102ab6 <trap_dispatch+0x16b>
c0102a92:	c7 44 24 0c b9 d0 10 	movl   $0xc010d0b9,0xc(%esp)
c0102a99:	c0 
c0102a9a:	c7 44 24 08 ff cf 10 	movl   $0xc010cfff,0x8(%esp)
c0102aa1:	c0 
c0102aa2:	c7 44 24 04 f4 00 00 	movl   $0xf4,0x4(%esp)
c0102aa9:	00 
c0102aaa:	c7 04 24 ee cd 10 c0 	movl   $0xc010cdee,(%esp)
c0102ab1:	e8 1e e3 ff ff       	call   c0100dd4 <__panic>
		run_timer_list();
c0102ab6:	e8 2a 8f 00 00       	call   c010b9e5 <run_timer_list>
	     *----------------------
	     * you should update your lab5 code (just add ONE or TWO lines of code):
         *    Every tick, you should update the system time, iterate the timers, and trigger the timers which are end to call scheduler.
         *    You can use one funcitons to finish all these things.
         */
        break;
c0102abb:	e9 b4 00 00 00       	jmp    c0102b74 <trap_dispatch+0x229>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c0102ac0:	e8 7d ec ff ff       	call   c0101742 <cons_getc>
c0102ac5:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c0102ac8:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0102acc:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102ad0:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102ad4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102ad8:	c7 04 24 c9 d0 10 c0 	movl   $0xc010d0c9,(%esp)
c0102adf:	e8 74 d8 ff ff       	call   c0100358 <cprintf>
        break;
c0102ae4:	e9 8b 00 00 00       	jmp    c0102b74 <trap_dispatch+0x229>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c0102ae9:	e8 54 ec ff ff       	call   c0101742 <cons_getc>
c0102aee:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c0102af1:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0102af5:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102af9:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102afd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102b01:	c7 04 24 db d0 10 c0 	movl   $0xc010d0db,(%esp)
c0102b08:	e8 4b d8 ff ff       	call   c0100358 <cprintf>
        break;
c0102b0d:	eb 65                	jmp    c0102b74 <trap_dispatch+0x229>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102b0f:	c7 44 24 08 ea d0 10 	movl   $0xc010d0ea,0x8(%esp)
c0102b16:	c0 
c0102b17:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c0102b1e:	00 
c0102b1f:	c7 04 24 ee cd 10 c0 	movl   $0xc010cdee,(%esp)
c0102b26:	e8 a9 e2 ff ff       	call   c0100dd4 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102b2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0102b2e:	89 04 24             	mov    %eax,(%esp)
c0102b31:	e8 50 fa ff ff       	call   c0102586 <print_trapframe>
        if (current != NULL) {
c0102b36:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c0102b3b:	85 c0                	test   %eax,%eax
c0102b3d:	74 18                	je     c0102b57 <trap_dispatch+0x20c>
            cprintf("unhandled trap.\n");
c0102b3f:	c7 04 24 fa d0 10 c0 	movl   $0xc010d0fa,(%esp)
c0102b46:	e8 0d d8 ff ff       	call   c0100358 <cprintf>
            do_exit(-E_KILLED);
c0102b4b:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102b52:	e8 04 75 00 00       	call   c010a05b <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102b57:	c7 44 24 08 0b d1 10 	movl   $0xc010d10b,0x8(%esp)
c0102b5e:	c0 
c0102b5f:	c7 44 24 04 1b 01 00 	movl   $0x11b,0x4(%esp)
c0102b66:	00 
c0102b67:	c7 04 24 ee cd 10 c0 	movl   $0xc010cdee,(%esp)
c0102b6e:	e8 61 e2 ff ff       	call   c0100dd4 <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102b73:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102b74:	c9                   	leave  
c0102b75:	c3                   	ret    

c0102b76 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102b76:	55                   	push   %ebp
c0102b77:	89 e5                	mov    %esp,%ebp
c0102b79:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102b7c:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c0102b81:	85 c0                	test   %eax,%eax
c0102b83:	75 0d                	jne    c0102b92 <trap+0x1c>
        trap_dispatch(tf);
c0102b85:	8b 45 08             	mov    0x8(%ebp),%eax
c0102b88:	89 04 24             	mov    %eax,(%esp)
c0102b8b:	e8 bb fd ff ff       	call   c010294b <trap_dispatch>
c0102b90:	eb 6c                	jmp    c0102bfe <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102b92:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c0102b97:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102b9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102b9d:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c0102ba2:	8b 55 08             	mov    0x8(%ebp),%edx
c0102ba5:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102ba8:	8b 45 08             	mov    0x8(%ebp),%eax
c0102bab:	89 04 24             	mov    %eax,(%esp)
c0102bae:	e8 bd f9 ff ff       	call   c0102570 <trap_in_kernel>
c0102bb3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102bb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0102bb9:	89 04 24             	mov    %eax,(%esp)
c0102bbc:	e8 8a fd ff ff       	call   c010294b <trap_dispatch>
    
        current->tf = otf;
c0102bc1:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c0102bc6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102bc9:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102bcc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102bd0:	75 2c                	jne    c0102bfe <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102bd2:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c0102bd7:	8b 40 44             	mov    0x44(%eax),%eax
c0102bda:	83 e0 01             	and    $0x1,%eax
c0102bdd:	85 c0                	test   %eax,%eax
c0102bdf:	74 0c                	je     c0102bed <trap+0x77>
                do_exit(-E_KILLED);
c0102be1:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102be8:	e8 6e 74 00 00       	call   c010a05b <do_exit>
            }
            if (current->need_resched) {
c0102bed:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c0102bf2:	8b 40 10             	mov    0x10(%eax),%eax
c0102bf5:	85 c0                	test   %eax,%eax
c0102bf7:	74 05                	je     c0102bfe <trap+0x88>
                schedule();
c0102bf9:	e8 5a 8b 00 00       	call   c010b758 <schedule>
            }
        }
    }
}
c0102bfe:	c9                   	leave  
c0102bff:	c3                   	ret    

c0102c00 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102c00:	1e                   	push   %ds
    pushl %es
c0102c01:	06                   	push   %es
    pushl %fs
c0102c02:	0f a0                	push   %fs
    pushl %gs
c0102c04:	0f a8                	push   %gs
    pushal
c0102c06:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102c07:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102c0c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102c0e:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102c10:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102c11:	e8 60 ff ff ff       	call   c0102b76 <trap>

    # pop the pushed stack pointer
    popl %esp
c0102c16:	5c                   	pop    %esp

c0102c17 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102c17:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102c18:	0f a9                	pop    %gs
    popl %fs
c0102c1a:	0f a1                	pop    %fs
    popl %es
c0102c1c:	07                   	pop    %es
    popl %ds
c0102c1d:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102c1e:	83 c4 08             	add    $0x8,%esp
    iret
c0102c21:	cf                   	iret   

c0102c22 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102c22:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102c26:	e9 ec ff ff ff       	jmp    c0102c17 <__trapret>

c0102c2b <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102c2b:	6a 00                	push   $0x0
  pushl $0
c0102c2d:	6a 00                	push   $0x0
  jmp __alltraps
c0102c2f:	e9 cc ff ff ff       	jmp    c0102c00 <__alltraps>

c0102c34 <vector1>:
.globl vector1
vector1:
  pushl $0
c0102c34:	6a 00                	push   $0x0
  pushl $1
c0102c36:	6a 01                	push   $0x1
  jmp __alltraps
c0102c38:	e9 c3 ff ff ff       	jmp    c0102c00 <__alltraps>

c0102c3d <vector2>:
.globl vector2
vector2:
  pushl $0
c0102c3d:	6a 00                	push   $0x0
  pushl $2
c0102c3f:	6a 02                	push   $0x2
  jmp __alltraps
c0102c41:	e9 ba ff ff ff       	jmp    c0102c00 <__alltraps>

c0102c46 <vector3>:
.globl vector3
vector3:
  pushl $0
c0102c46:	6a 00                	push   $0x0
  pushl $3
c0102c48:	6a 03                	push   $0x3
  jmp __alltraps
c0102c4a:	e9 b1 ff ff ff       	jmp    c0102c00 <__alltraps>

c0102c4f <vector4>:
.globl vector4
vector4:
  pushl $0
c0102c4f:	6a 00                	push   $0x0
  pushl $4
c0102c51:	6a 04                	push   $0x4
  jmp __alltraps
c0102c53:	e9 a8 ff ff ff       	jmp    c0102c00 <__alltraps>

c0102c58 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102c58:	6a 00                	push   $0x0
  pushl $5
c0102c5a:	6a 05                	push   $0x5
  jmp __alltraps
c0102c5c:	e9 9f ff ff ff       	jmp    c0102c00 <__alltraps>

c0102c61 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102c61:	6a 00                	push   $0x0
  pushl $6
c0102c63:	6a 06                	push   $0x6
  jmp __alltraps
c0102c65:	e9 96 ff ff ff       	jmp    c0102c00 <__alltraps>

c0102c6a <vector7>:
.globl vector7
vector7:
  pushl $0
c0102c6a:	6a 00                	push   $0x0
  pushl $7
c0102c6c:	6a 07                	push   $0x7
  jmp __alltraps
c0102c6e:	e9 8d ff ff ff       	jmp    c0102c00 <__alltraps>

c0102c73 <vector8>:
.globl vector8
vector8:
  pushl $8
c0102c73:	6a 08                	push   $0x8
  jmp __alltraps
c0102c75:	e9 86 ff ff ff       	jmp    c0102c00 <__alltraps>

c0102c7a <vector9>:
.globl vector9
vector9:
  pushl $9
c0102c7a:	6a 09                	push   $0x9
  jmp __alltraps
c0102c7c:	e9 7f ff ff ff       	jmp    c0102c00 <__alltraps>

c0102c81 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102c81:	6a 0a                	push   $0xa
  jmp __alltraps
c0102c83:	e9 78 ff ff ff       	jmp    c0102c00 <__alltraps>

c0102c88 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102c88:	6a 0b                	push   $0xb
  jmp __alltraps
c0102c8a:	e9 71 ff ff ff       	jmp    c0102c00 <__alltraps>

c0102c8f <vector12>:
.globl vector12
vector12:
  pushl $12
c0102c8f:	6a 0c                	push   $0xc
  jmp __alltraps
c0102c91:	e9 6a ff ff ff       	jmp    c0102c00 <__alltraps>

c0102c96 <vector13>:
.globl vector13
vector13:
  pushl $13
c0102c96:	6a 0d                	push   $0xd
  jmp __alltraps
c0102c98:	e9 63 ff ff ff       	jmp    c0102c00 <__alltraps>

c0102c9d <vector14>:
.globl vector14
vector14:
  pushl $14
c0102c9d:	6a 0e                	push   $0xe
  jmp __alltraps
c0102c9f:	e9 5c ff ff ff       	jmp    c0102c00 <__alltraps>

c0102ca4 <vector15>:
.globl vector15
vector15:
  pushl $0
c0102ca4:	6a 00                	push   $0x0
  pushl $15
c0102ca6:	6a 0f                	push   $0xf
  jmp __alltraps
c0102ca8:	e9 53 ff ff ff       	jmp    c0102c00 <__alltraps>

c0102cad <vector16>:
.globl vector16
vector16:
  pushl $0
c0102cad:	6a 00                	push   $0x0
  pushl $16
c0102caf:	6a 10                	push   $0x10
  jmp __alltraps
c0102cb1:	e9 4a ff ff ff       	jmp    c0102c00 <__alltraps>

c0102cb6 <vector17>:
.globl vector17
vector17:
  pushl $17
c0102cb6:	6a 11                	push   $0x11
  jmp __alltraps
c0102cb8:	e9 43 ff ff ff       	jmp    c0102c00 <__alltraps>

c0102cbd <vector18>:
.globl vector18
vector18:
  pushl $0
c0102cbd:	6a 00                	push   $0x0
  pushl $18
c0102cbf:	6a 12                	push   $0x12
  jmp __alltraps
c0102cc1:	e9 3a ff ff ff       	jmp    c0102c00 <__alltraps>

c0102cc6 <vector19>:
.globl vector19
vector19:
  pushl $0
c0102cc6:	6a 00                	push   $0x0
  pushl $19
c0102cc8:	6a 13                	push   $0x13
  jmp __alltraps
c0102cca:	e9 31 ff ff ff       	jmp    c0102c00 <__alltraps>

c0102ccf <vector20>:
.globl vector20
vector20:
  pushl $0
c0102ccf:	6a 00                	push   $0x0
  pushl $20
c0102cd1:	6a 14                	push   $0x14
  jmp __alltraps
c0102cd3:	e9 28 ff ff ff       	jmp    c0102c00 <__alltraps>

c0102cd8 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102cd8:	6a 00                	push   $0x0
  pushl $21
c0102cda:	6a 15                	push   $0x15
  jmp __alltraps
c0102cdc:	e9 1f ff ff ff       	jmp    c0102c00 <__alltraps>

c0102ce1 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102ce1:	6a 00                	push   $0x0
  pushl $22
c0102ce3:	6a 16                	push   $0x16
  jmp __alltraps
c0102ce5:	e9 16 ff ff ff       	jmp    c0102c00 <__alltraps>

c0102cea <vector23>:
.globl vector23
vector23:
  pushl $0
c0102cea:	6a 00                	push   $0x0
  pushl $23
c0102cec:	6a 17                	push   $0x17
  jmp __alltraps
c0102cee:	e9 0d ff ff ff       	jmp    c0102c00 <__alltraps>

c0102cf3 <vector24>:
.globl vector24
vector24:
  pushl $0
c0102cf3:	6a 00                	push   $0x0
  pushl $24
c0102cf5:	6a 18                	push   $0x18
  jmp __alltraps
c0102cf7:	e9 04 ff ff ff       	jmp    c0102c00 <__alltraps>

c0102cfc <vector25>:
.globl vector25
vector25:
  pushl $0
c0102cfc:	6a 00                	push   $0x0
  pushl $25
c0102cfe:	6a 19                	push   $0x19
  jmp __alltraps
c0102d00:	e9 fb fe ff ff       	jmp    c0102c00 <__alltraps>

c0102d05 <vector26>:
.globl vector26
vector26:
  pushl $0
c0102d05:	6a 00                	push   $0x0
  pushl $26
c0102d07:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102d09:	e9 f2 fe ff ff       	jmp    c0102c00 <__alltraps>

c0102d0e <vector27>:
.globl vector27
vector27:
  pushl $0
c0102d0e:	6a 00                	push   $0x0
  pushl $27
c0102d10:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102d12:	e9 e9 fe ff ff       	jmp    c0102c00 <__alltraps>

c0102d17 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102d17:	6a 00                	push   $0x0
  pushl $28
c0102d19:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102d1b:	e9 e0 fe ff ff       	jmp    c0102c00 <__alltraps>

c0102d20 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102d20:	6a 00                	push   $0x0
  pushl $29
c0102d22:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102d24:	e9 d7 fe ff ff       	jmp    c0102c00 <__alltraps>

c0102d29 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102d29:	6a 00                	push   $0x0
  pushl $30
c0102d2b:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102d2d:	e9 ce fe ff ff       	jmp    c0102c00 <__alltraps>

c0102d32 <vector31>:
.globl vector31
vector31:
  pushl $0
c0102d32:	6a 00                	push   $0x0
  pushl $31
c0102d34:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102d36:	e9 c5 fe ff ff       	jmp    c0102c00 <__alltraps>

c0102d3b <vector32>:
.globl vector32
vector32:
  pushl $0
c0102d3b:	6a 00                	push   $0x0
  pushl $32
c0102d3d:	6a 20                	push   $0x20
  jmp __alltraps
c0102d3f:	e9 bc fe ff ff       	jmp    c0102c00 <__alltraps>

c0102d44 <vector33>:
.globl vector33
vector33:
  pushl $0
c0102d44:	6a 00                	push   $0x0
  pushl $33
c0102d46:	6a 21                	push   $0x21
  jmp __alltraps
c0102d48:	e9 b3 fe ff ff       	jmp    c0102c00 <__alltraps>

c0102d4d <vector34>:
.globl vector34
vector34:
  pushl $0
c0102d4d:	6a 00                	push   $0x0
  pushl $34
c0102d4f:	6a 22                	push   $0x22
  jmp __alltraps
c0102d51:	e9 aa fe ff ff       	jmp    c0102c00 <__alltraps>

c0102d56 <vector35>:
.globl vector35
vector35:
  pushl $0
c0102d56:	6a 00                	push   $0x0
  pushl $35
c0102d58:	6a 23                	push   $0x23
  jmp __alltraps
c0102d5a:	e9 a1 fe ff ff       	jmp    c0102c00 <__alltraps>

c0102d5f <vector36>:
.globl vector36
vector36:
  pushl $0
c0102d5f:	6a 00                	push   $0x0
  pushl $36
c0102d61:	6a 24                	push   $0x24
  jmp __alltraps
c0102d63:	e9 98 fe ff ff       	jmp    c0102c00 <__alltraps>

c0102d68 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102d68:	6a 00                	push   $0x0
  pushl $37
c0102d6a:	6a 25                	push   $0x25
  jmp __alltraps
c0102d6c:	e9 8f fe ff ff       	jmp    c0102c00 <__alltraps>

c0102d71 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102d71:	6a 00                	push   $0x0
  pushl $38
c0102d73:	6a 26                	push   $0x26
  jmp __alltraps
c0102d75:	e9 86 fe ff ff       	jmp    c0102c00 <__alltraps>

c0102d7a <vector39>:
.globl vector39
vector39:
  pushl $0
c0102d7a:	6a 00                	push   $0x0
  pushl $39
c0102d7c:	6a 27                	push   $0x27
  jmp __alltraps
c0102d7e:	e9 7d fe ff ff       	jmp    c0102c00 <__alltraps>

c0102d83 <vector40>:
.globl vector40
vector40:
  pushl $0
c0102d83:	6a 00                	push   $0x0
  pushl $40
c0102d85:	6a 28                	push   $0x28
  jmp __alltraps
c0102d87:	e9 74 fe ff ff       	jmp    c0102c00 <__alltraps>

c0102d8c <vector41>:
.globl vector41
vector41:
  pushl $0
c0102d8c:	6a 00                	push   $0x0
  pushl $41
c0102d8e:	6a 29                	push   $0x29
  jmp __alltraps
c0102d90:	e9 6b fe ff ff       	jmp    c0102c00 <__alltraps>

c0102d95 <vector42>:
.globl vector42
vector42:
  pushl $0
c0102d95:	6a 00                	push   $0x0
  pushl $42
c0102d97:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102d99:	e9 62 fe ff ff       	jmp    c0102c00 <__alltraps>

c0102d9e <vector43>:
.globl vector43
vector43:
  pushl $0
c0102d9e:	6a 00                	push   $0x0
  pushl $43
c0102da0:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102da2:	e9 59 fe ff ff       	jmp    c0102c00 <__alltraps>

c0102da7 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102da7:	6a 00                	push   $0x0
  pushl $44
c0102da9:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102dab:	e9 50 fe ff ff       	jmp    c0102c00 <__alltraps>

c0102db0 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102db0:	6a 00                	push   $0x0
  pushl $45
c0102db2:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102db4:	e9 47 fe ff ff       	jmp    c0102c00 <__alltraps>

c0102db9 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102db9:	6a 00                	push   $0x0
  pushl $46
c0102dbb:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102dbd:	e9 3e fe ff ff       	jmp    c0102c00 <__alltraps>

c0102dc2 <vector47>:
.globl vector47
vector47:
  pushl $0
c0102dc2:	6a 00                	push   $0x0
  pushl $47
c0102dc4:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102dc6:	e9 35 fe ff ff       	jmp    c0102c00 <__alltraps>

c0102dcb <vector48>:
.globl vector48
vector48:
  pushl $0
c0102dcb:	6a 00                	push   $0x0
  pushl $48
c0102dcd:	6a 30                	push   $0x30
  jmp __alltraps
c0102dcf:	e9 2c fe ff ff       	jmp    c0102c00 <__alltraps>

c0102dd4 <vector49>:
.globl vector49
vector49:
  pushl $0
c0102dd4:	6a 00                	push   $0x0
  pushl $49
c0102dd6:	6a 31                	push   $0x31
  jmp __alltraps
c0102dd8:	e9 23 fe ff ff       	jmp    c0102c00 <__alltraps>

c0102ddd <vector50>:
.globl vector50
vector50:
  pushl $0
c0102ddd:	6a 00                	push   $0x0
  pushl $50
c0102ddf:	6a 32                	push   $0x32
  jmp __alltraps
c0102de1:	e9 1a fe ff ff       	jmp    c0102c00 <__alltraps>

c0102de6 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102de6:	6a 00                	push   $0x0
  pushl $51
c0102de8:	6a 33                	push   $0x33
  jmp __alltraps
c0102dea:	e9 11 fe ff ff       	jmp    c0102c00 <__alltraps>

c0102def <vector52>:
.globl vector52
vector52:
  pushl $0
c0102def:	6a 00                	push   $0x0
  pushl $52
c0102df1:	6a 34                	push   $0x34
  jmp __alltraps
c0102df3:	e9 08 fe ff ff       	jmp    c0102c00 <__alltraps>

c0102df8 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102df8:	6a 00                	push   $0x0
  pushl $53
c0102dfa:	6a 35                	push   $0x35
  jmp __alltraps
c0102dfc:	e9 ff fd ff ff       	jmp    c0102c00 <__alltraps>

c0102e01 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102e01:	6a 00                	push   $0x0
  pushl $54
c0102e03:	6a 36                	push   $0x36
  jmp __alltraps
c0102e05:	e9 f6 fd ff ff       	jmp    c0102c00 <__alltraps>

c0102e0a <vector55>:
.globl vector55
vector55:
  pushl $0
c0102e0a:	6a 00                	push   $0x0
  pushl $55
c0102e0c:	6a 37                	push   $0x37
  jmp __alltraps
c0102e0e:	e9 ed fd ff ff       	jmp    c0102c00 <__alltraps>

c0102e13 <vector56>:
.globl vector56
vector56:
  pushl $0
c0102e13:	6a 00                	push   $0x0
  pushl $56
c0102e15:	6a 38                	push   $0x38
  jmp __alltraps
c0102e17:	e9 e4 fd ff ff       	jmp    c0102c00 <__alltraps>

c0102e1c <vector57>:
.globl vector57
vector57:
  pushl $0
c0102e1c:	6a 00                	push   $0x0
  pushl $57
c0102e1e:	6a 39                	push   $0x39
  jmp __alltraps
c0102e20:	e9 db fd ff ff       	jmp    c0102c00 <__alltraps>

c0102e25 <vector58>:
.globl vector58
vector58:
  pushl $0
c0102e25:	6a 00                	push   $0x0
  pushl $58
c0102e27:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102e29:	e9 d2 fd ff ff       	jmp    c0102c00 <__alltraps>

c0102e2e <vector59>:
.globl vector59
vector59:
  pushl $0
c0102e2e:	6a 00                	push   $0x0
  pushl $59
c0102e30:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102e32:	e9 c9 fd ff ff       	jmp    c0102c00 <__alltraps>

c0102e37 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102e37:	6a 00                	push   $0x0
  pushl $60
c0102e39:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102e3b:	e9 c0 fd ff ff       	jmp    c0102c00 <__alltraps>

c0102e40 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102e40:	6a 00                	push   $0x0
  pushl $61
c0102e42:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102e44:	e9 b7 fd ff ff       	jmp    c0102c00 <__alltraps>

c0102e49 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102e49:	6a 00                	push   $0x0
  pushl $62
c0102e4b:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102e4d:	e9 ae fd ff ff       	jmp    c0102c00 <__alltraps>

c0102e52 <vector63>:
.globl vector63
vector63:
  pushl $0
c0102e52:	6a 00                	push   $0x0
  pushl $63
c0102e54:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102e56:	e9 a5 fd ff ff       	jmp    c0102c00 <__alltraps>

c0102e5b <vector64>:
.globl vector64
vector64:
  pushl $0
c0102e5b:	6a 00                	push   $0x0
  pushl $64
c0102e5d:	6a 40                	push   $0x40
  jmp __alltraps
c0102e5f:	e9 9c fd ff ff       	jmp    c0102c00 <__alltraps>

c0102e64 <vector65>:
.globl vector65
vector65:
  pushl $0
c0102e64:	6a 00                	push   $0x0
  pushl $65
c0102e66:	6a 41                	push   $0x41
  jmp __alltraps
c0102e68:	e9 93 fd ff ff       	jmp    c0102c00 <__alltraps>

c0102e6d <vector66>:
.globl vector66
vector66:
  pushl $0
c0102e6d:	6a 00                	push   $0x0
  pushl $66
c0102e6f:	6a 42                	push   $0x42
  jmp __alltraps
c0102e71:	e9 8a fd ff ff       	jmp    c0102c00 <__alltraps>

c0102e76 <vector67>:
.globl vector67
vector67:
  pushl $0
c0102e76:	6a 00                	push   $0x0
  pushl $67
c0102e78:	6a 43                	push   $0x43
  jmp __alltraps
c0102e7a:	e9 81 fd ff ff       	jmp    c0102c00 <__alltraps>

c0102e7f <vector68>:
.globl vector68
vector68:
  pushl $0
c0102e7f:	6a 00                	push   $0x0
  pushl $68
c0102e81:	6a 44                	push   $0x44
  jmp __alltraps
c0102e83:	e9 78 fd ff ff       	jmp    c0102c00 <__alltraps>

c0102e88 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102e88:	6a 00                	push   $0x0
  pushl $69
c0102e8a:	6a 45                	push   $0x45
  jmp __alltraps
c0102e8c:	e9 6f fd ff ff       	jmp    c0102c00 <__alltraps>

c0102e91 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102e91:	6a 00                	push   $0x0
  pushl $70
c0102e93:	6a 46                	push   $0x46
  jmp __alltraps
c0102e95:	e9 66 fd ff ff       	jmp    c0102c00 <__alltraps>

c0102e9a <vector71>:
.globl vector71
vector71:
  pushl $0
c0102e9a:	6a 00                	push   $0x0
  pushl $71
c0102e9c:	6a 47                	push   $0x47
  jmp __alltraps
c0102e9e:	e9 5d fd ff ff       	jmp    c0102c00 <__alltraps>

c0102ea3 <vector72>:
.globl vector72
vector72:
  pushl $0
c0102ea3:	6a 00                	push   $0x0
  pushl $72
c0102ea5:	6a 48                	push   $0x48
  jmp __alltraps
c0102ea7:	e9 54 fd ff ff       	jmp    c0102c00 <__alltraps>

c0102eac <vector73>:
.globl vector73
vector73:
  pushl $0
c0102eac:	6a 00                	push   $0x0
  pushl $73
c0102eae:	6a 49                	push   $0x49
  jmp __alltraps
c0102eb0:	e9 4b fd ff ff       	jmp    c0102c00 <__alltraps>

c0102eb5 <vector74>:
.globl vector74
vector74:
  pushl $0
c0102eb5:	6a 00                	push   $0x0
  pushl $74
c0102eb7:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102eb9:	e9 42 fd ff ff       	jmp    c0102c00 <__alltraps>

c0102ebe <vector75>:
.globl vector75
vector75:
  pushl $0
c0102ebe:	6a 00                	push   $0x0
  pushl $75
c0102ec0:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102ec2:	e9 39 fd ff ff       	jmp    c0102c00 <__alltraps>

c0102ec7 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102ec7:	6a 00                	push   $0x0
  pushl $76
c0102ec9:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102ecb:	e9 30 fd ff ff       	jmp    c0102c00 <__alltraps>

c0102ed0 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102ed0:	6a 00                	push   $0x0
  pushl $77
c0102ed2:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102ed4:	e9 27 fd ff ff       	jmp    c0102c00 <__alltraps>

c0102ed9 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102ed9:	6a 00                	push   $0x0
  pushl $78
c0102edb:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102edd:	e9 1e fd ff ff       	jmp    c0102c00 <__alltraps>

c0102ee2 <vector79>:
.globl vector79
vector79:
  pushl $0
c0102ee2:	6a 00                	push   $0x0
  pushl $79
c0102ee4:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102ee6:	e9 15 fd ff ff       	jmp    c0102c00 <__alltraps>

c0102eeb <vector80>:
.globl vector80
vector80:
  pushl $0
c0102eeb:	6a 00                	push   $0x0
  pushl $80
c0102eed:	6a 50                	push   $0x50
  jmp __alltraps
c0102eef:	e9 0c fd ff ff       	jmp    c0102c00 <__alltraps>

c0102ef4 <vector81>:
.globl vector81
vector81:
  pushl $0
c0102ef4:	6a 00                	push   $0x0
  pushl $81
c0102ef6:	6a 51                	push   $0x51
  jmp __alltraps
c0102ef8:	e9 03 fd ff ff       	jmp    c0102c00 <__alltraps>

c0102efd <vector82>:
.globl vector82
vector82:
  pushl $0
c0102efd:	6a 00                	push   $0x0
  pushl $82
c0102eff:	6a 52                	push   $0x52
  jmp __alltraps
c0102f01:	e9 fa fc ff ff       	jmp    c0102c00 <__alltraps>

c0102f06 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102f06:	6a 00                	push   $0x0
  pushl $83
c0102f08:	6a 53                	push   $0x53
  jmp __alltraps
c0102f0a:	e9 f1 fc ff ff       	jmp    c0102c00 <__alltraps>

c0102f0f <vector84>:
.globl vector84
vector84:
  pushl $0
c0102f0f:	6a 00                	push   $0x0
  pushl $84
c0102f11:	6a 54                	push   $0x54
  jmp __alltraps
c0102f13:	e9 e8 fc ff ff       	jmp    c0102c00 <__alltraps>

c0102f18 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102f18:	6a 00                	push   $0x0
  pushl $85
c0102f1a:	6a 55                	push   $0x55
  jmp __alltraps
c0102f1c:	e9 df fc ff ff       	jmp    c0102c00 <__alltraps>

c0102f21 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102f21:	6a 00                	push   $0x0
  pushl $86
c0102f23:	6a 56                	push   $0x56
  jmp __alltraps
c0102f25:	e9 d6 fc ff ff       	jmp    c0102c00 <__alltraps>

c0102f2a <vector87>:
.globl vector87
vector87:
  pushl $0
c0102f2a:	6a 00                	push   $0x0
  pushl $87
c0102f2c:	6a 57                	push   $0x57
  jmp __alltraps
c0102f2e:	e9 cd fc ff ff       	jmp    c0102c00 <__alltraps>

c0102f33 <vector88>:
.globl vector88
vector88:
  pushl $0
c0102f33:	6a 00                	push   $0x0
  pushl $88
c0102f35:	6a 58                	push   $0x58
  jmp __alltraps
c0102f37:	e9 c4 fc ff ff       	jmp    c0102c00 <__alltraps>

c0102f3c <vector89>:
.globl vector89
vector89:
  pushl $0
c0102f3c:	6a 00                	push   $0x0
  pushl $89
c0102f3e:	6a 59                	push   $0x59
  jmp __alltraps
c0102f40:	e9 bb fc ff ff       	jmp    c0102c00 <__alltraps>

c0102f45 <vector90>:
.globl vector90
vector90:
  pushl $0
c0102f45:	6a 00                	push   $0x0
  pushl $90
c0102f47:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102f49:	e9 b2 fc ff ff       	jmp    c0102c00 <__alltraps>

c0102f4e <vector91>:
.globl vector91
vector91:
  pushl $0
c0102f4e:	6a 00                	push   $0x0
  pushl $91
c0102f50:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102f52:	e9 a9 fc ff ff       	jmp    c0102c00 <__alltraps>

c0102f57 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102f57:	6a 00                	push   $0x0
  pushl $92
c0102f59:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102f5b:	e9 a0 fc ff ff       	jmp    c0102c00 <__alltraps>

c0102f60 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102f60:	6a 00                	push   $0x0
  pushl $93
c0102f62:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102f64:	e9 97 fc ff ff       	jmp    c0102c00 <__alltraps>

c0102f69 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102f69:	6a 00                	push   $0x0
  pushl $94
c0102f6b:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102f6d:	e9 8e fc ff ff       	jmp    c0102c00 <__alltraps>

c0102f72 <vector95>:
.globl vector95
vector95:
  pushl $0
c0102f72:	6a 00                	push   $0x0
  pushl $95
c0102f74:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102f76:	e9 85 fc ff ff       	jmp    c0102c00 <__alltraps>

c0102f7b <vector96>:
.globl vector96
vector96:
  pushl $0
c0102f7b:	6a 00                	push   $0x0
  pushl $96
c0102f7d:	6a 60                	push   $0x60
  jmp __alltraps
c0102f7f:	e9 7c fc ff ff       	jmp    c0102c00 <__alltraps>

c0102f84 <vector97>:
.globl vector97
vector97:
  pushl $0
c0102f84:	6a 00                	push   $0x0
  pushl $97
c0102f86:	6a 61                	push   $0x61
  jmp __alltraps
c0102f88:	e9 73 fc ff ff       	jmp    c0102c00 <__alltraps>

c0102f8d <vector98>:
.globl vector98
vector98:
  pushl $0
c0102f8d:	6a 00                	push   $0x0
  pushl $98
c0102f8f:	6a 62                	push   $0x62
  jmp __alltraps
c0102f91:	e9 6a fc ff ff       	jmp    c0102c00 <__alltraps>

c0102f96 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102f96:	6a 00                	push   $0x0
  pushl $99
c0102f98:	6a 63                	push   $0x63
  jmp __alltraps
c0102f9a:	e9 61 fc ff ff       	jmp    c0102c00 <__alltraps>

c0102f9f <vector100>:
.globl vector100
vector100:
  pushl $0
c0102f9f:	6a 00                	push   $0x0
  pushl $100
c0102fa1:	6a 64                	push   $0x64
  jmp __alltraps
c0102fa3:	e9 58 fc ff ff       	jmp    c0102c00 <__alltraps>

c0102fa8 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102fa8:	6a 00                	push   $0x0
  pushl $101
c0102faa:	6a 65                	push   $0x65
  jmp __alltraps
c0102fac:	e9 4f fc ff ff       	jmp    c0102c00 <__alltraps>

c0102fb1 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102fb1:	6a 00                	push   $0x0
  pushl $102
c0102fb3:	6a 66                	push   $0x66
  jmp __alltraps
c0102fb5:	e9 46 fc ff ff       	jmp    c0102c00 <__alltraps>

c0102fba <vector103>:
.globl vector103
vector103:
  pushl $0
c0102fba:	6a 00                	push   $0x0
  pushl $103
c0102fbc:	6a 67                	push   $0x67
  jmp __alltraps
c0102fbe:	e9 3d fc ff ff       	jmp    c0102c00 <__alltraps>

c0102fc3 <vector104>:
.globl vector104
vector104:
  pushl $0
c0102fc3:	6a 00                	push   $0x0
  pushl $104
c0102fc5:	6a 68                	push   $0x68
  jmp __alltraps
c0102fc7:	e9 34 fc ff ff       	jmp    c0102c00 <__alltraps>

c0102fcc <vector105>:
.globl vector105
vector105:
  pushl $0
c0102fcc:	6a 00                	push   $0x0
  pushl $105
c0102fce:	6a 69                	push   $0x69
  jmp __alltraps
c0102fd0:	e9 2b fc ff ff       	jmp    c0102c00 <__alltraps>

c0102fd5 <vector106>:
.globl vector106
vector106:
  pushl $0
c0102fd5:	6a 00                	push   $0x0
  pushl $106
c0102fd7:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102fd9:	e9 22 fc ff ff       	jmp    c0102c00 <__alltraps>

c0102fde <vector107>:
.globl vector107
vector107:
  pushl $0
c0102fde:	6a 00                	push   $0x0
  pushl $107
c0102fe0:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102fe2:	e9 19 fc ff ff       	jmp    c0102c00 <__alltraps>

c0102fe7 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102fe7:	6a 00                	push   $0x0
  pushl $108
c0102fe9:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102feb:	e9 10 fc ff ff       	jmp    c0102c00 <__alltraps>

c0102ff0 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102ff0:	6a 00                	push   $0x0
  pushl $109
c0102ff2:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102ff4:	e9 07 fc ff ff       	jmp    c0102c00 <__alltraps>

c0102ff9 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102ff9:	6a 00                	push   $0x0
  pushl $110
c0102ffb:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102ffd:	e9 fe fb ff ff       	jmp    c0102c00 <__alltraps>

c0103002 <vector111>:
.globl vector111
vector111:
  pushl $0
c0103002:	6a 00                	push   $0x0
  pushl $111
c0103004:	6a 6f                	push   $0x6f
  jmp __alltraps
c0103006:	e9 f5 fb ff ff       	jmp    c0102c00 <__alltraps>

c010300b <vector112>:
.globl vector112
vector112:
  pushl $0
c010300b:	6a 00                	push   $0x0
  pushl $112
c010300d:	6a 70                	push   $0x70
  jmp __alltraps
c010300f:	e9 ec fb ff ff       	jmp    c0102c00 <__alltraps>

c0103014 <vector113>:
.globl vector113
vector113:
  pushl $0
c0103014:	6a 00                	push   $0x0
  pushl $113
c0103016:	6a 71                	push   $0x71
  jmp __alltraps
c0103018:	e9 e3 fb ff ff       	jmp    c0102c00 <__alltraps>

c010301d <vector114>:
.globl vector114
vector114:
  pushl $0
c010301d:	6a 00                	push   $0x0
  pushl $114
c010301f:	6a 72                	push   $0x72
  jmp __alltraps
c0103021:	e9 da fb ff ff       	jmp    c0102c00 <__alltraps>

c0103026 <vector115>:
.globl vector115
vector115:
  pushl $0
c0103026:	6a 00                	push   $0x0
  pushl $115
c0103028:	6a 73                	push   $0x73
  jmp __alltraps
c010302a:	e9 d1 fb ff ff       	jmp    c0102c00 <__alltraps>

c010302f <vector116>:
.globl vector116
vector116:
  pushl $0
c010302f:	6a 00                	push   $0x0
  pushl $116
c0103031:	6a 74                	push   $0x74
  jmp __alltraps
c0103033:	e9 c8 fb ff ff       	jmp    c0102c00 <__alltraps>

c0103038 <vector117>:
.globl vector117
vector117:
  pushl $0
c0103038:	6a 00                	push   $0x0
  pushl $117
c010303a:	6a 75                	push   $0x75
  jmp __alltraps
c010303c:	e9 bf fb ff ff       	jmp    c0102c00 <__alltraps>

c0103041 <vector118>:
.globl vector118
vector118:
  pushl $0
c0103041:	6a 00                	push   $0x0
  pushl $118
c0103043:	6a 76                	push   $0x76
  jmp __alltraps
c0103045:	e9 b6 fb ff ff       	jmp    c0102c00 <__alltraps>

c010304a <vector119>:
.globl vector119
vector119:
  pushl $0
c010304a:	6a 00                	push   $0x0
  pushl $119
c010304c:	6a 77                	push   $0x77
  jmp __alltraps
c010304e:	e9 ad fb ff ff       	jmp    c0102c00 <__alltraps>

c0103053 <vector120>:
.globl vector120
vector120:
  pushl $0
c0103053:	6a 00                	push   $0x0
  pushl $120
c0103055:	6a 78                	push   $0x78
  jmp __alltraps
c0103057:	e9 a4 fb ff ff       	jmp    c0102c00 <__alltraps>

c010305c <vector121>:
.globl vector121
vector121:
  pushl $0
c010305c:	6a 00                	push   $0x0
  pushl $121
c010305e:	6a 79                	push   $0x79
  jmp __alltraps
c0103060:	e9 9b fb ff ff       	jmp    c0102c00 <__alltraps>

c0103065 <vector122>:
.globl vector122
vector122:
  pushl $0
c0103065:	6a 00                	push   $0x0
  pushl $122
c0103067:	6a 7a                	push   $0x7a
  jmp __alltraps
c0103069:	e9 92 fb ff ff       	jmp    c0102c00 <__alltraps>

c010306e <vector123>:
.globl vector123
vector123:
  pushl $0
c010306e:	6a 00                	push   $0x0
  pushl $123
c0103070:	6a 7b                	push   $0x7b
  jmp __alltraps
c0103072:	e9 89 fb ff ff       	jmp    c0102c00 <__alltraps>

c0103077 <vector124>:
.globl vector124
vector124:
  pushl $0
c0103077:	6a 00                	push   $0x0
  pushl $124
c0103079:	6a 7c                	push   $0x7c
  jmp __alltraps
c010307b:	e9 80 fb ff ff       	jmp    c0102c00 <__alltraps>

c0103080 <vector125>:
.globl vector125
vector125:
  pushl $0
c0103080:	6a 00                	push   $0x0
  pushl $125
c0103082:	6a 7d                	push   $0x7d
  jmp __alltraps
c0103084:	e9 77 fb ff ff       	jmp    c0102c00 <__alltraps>

c0103089 <vector126>:
.globl vector126
vector126:
  pushl $0
c0103089:	6a 00                	push   $0x0
  pushl $126
c010308b:	6a 7e                	push   $0x7e
  jmp __alltraps
c010308d:	e9 6e fb ff ff       	jmp    c0102c00 <__alltraps>

c0103092 <vector127>:
.globl vector127
vector127:
  pushl $0
c0103092:	6a 00                	push   $0x0
  pushl $127
c0103094:	6a 7f                	push   $0x7f
  jmp __alltraps
c0103096:	e9 65 fb ff ff       	jmp    c0102c00 <__alltraps>

c010309b <vector128>:
.globl vector128
vector128:
  pushl $0
c010309b:	6a 00                	push   $0x0
  pushl $128
c010309d:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c01030a2:	e9 59 fb ff ff       	jmp    c0102c00 <__alltraps>

c01030a7 <vector129>:
.globl vector129
vector129:
  pushl $0
c01030a7:	6a 00                	push   $0x0
  pushl $129
c01030a9:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c01030ae:	e9 4d fb ff ff       	jmp    c0102c00 <__alltraps>

c01030b3 <vector130>:
.globl vector130
vector130:
  pushl $0
c01030b3:	6a 00                	push   $0x0
  pushl $130
c01030b5:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c01030ba:	e9 41 fb ff ff       	jmp    c0102c00 <__alltraps>

c01030bf <vector131>:
.globl vector131
vector131:
  pushl $0
c01030bf:	6a 00                	push   $0x0
  pushl $131
c01030c1:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c01030c6:	e9 35 fb ff ff       	jmp    c0102c00 <__alltraps>

c01030cb <vector132>:
.globl vector132
vector132:
  pushl $0
c01030cb:	6a 00                	push   $0x0
  pushl $132
c01030cd:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c01030d2:	e9 29 fb ff ff       	jmp    c0102c00 <__alltraps>

c01030d7 <vector133>:
.globl vector133
vector133:
  pushl $0
c01030d7:	6a 00                	push   $0x0
  pushl $133
c01030d9:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c01030de:	e9 1d fb ff ff       	jmp    c0102c00 <__alltraps>

c01030e3 <vector134>:
.globl vector134
vector134:
  pushl $0
c01030e3:	6a 00                	push   $0x0
  pushl $134
c01030e5:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c01030ea:	e9 11 fb ff ff       	jmp    c0102c00 <__alltraps>

c01030ef <vector135>:
.globl vector135
vector135:
  pushl $0
c01030ef:	6a 00                	push   $0x0
  pushl $135
c01030f1:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c01030f6:	e9 05 fb ff ff       	jmp    c0102c00 <__alltraps>

c01030fb <vector136>:
.globl vector136
vector136:
  pushl $0
c01030fb:	6a 00                	push   $0x0
  pushl $136
c01030fd:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0103102:	e9 f9 fa ff ff       	jmp    c0102c00 <__alltraps>

c0103107 <vector137>:
.globl vector137
vector137:
  pushl $0
c0103107:	6a 00                	push   $0x0
  pushl $137
c0103109:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c010310e:	e9 ed fa ff ff       	jmp    c0102c00 <__alltraps>

c0103113 <vector138>:
.globl vector138
vector138:
  pushl $0
c0103113:	6a 00                	push   $0x0
  pushl $138
c0103115:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c010311a:	e9 e1 fa ff ff       	jmp    c0102c00 <__alltraps>

c010311f <vector139>:
.globl vector139
vector139:
  pushl $0
c010311f:	6a 00                	push   $0x0
  pushl $139
c0103121:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0103126:	e9 d5 fa ff ff       	jmp    c0102c00 <__alltraps>

c010312b <vector140>:
.globl vector140
vector140:
  pushl $0
c010312b:	6a 00                	push   $0x0
  pushl $140
c010312d:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0103132:	e9 c9 fa ff ff       	jmp    c0102c00 <__alltraps>

c0103137 <vector141>:
.globl vector141
vector141:
  pushl $0
c0103137:	6a 00                	push   $0x0
  pushl $141
c0103139:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c010313e:	e9 bd fa ff ff       	jmp    c0102c00 <__alltraps>

c0103143 <vector142>:
.globl vector142
vector142:
  pushl $0
c0103143:	6a 00                	push   $0x0
  pushl $142
c0103145:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c010314a:	e9 b1 fa ff ff       	jmp    c0102c00 <__alltraps>

c010314f <vector143>:
.globl vector143
vector143:
  pushl $0
c010314f:	6a 00                	push   $0x0
  pushl $143
c0103151:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0103156:	e9 a5 fa ff ff       	jmp    c0102c00 <__alltraps>

c010315b <vector144>:
.globl vector144
vector144:
  pushl $0
c010315b:	6a 00                	push   $0x0
  pushl $144
c010315d:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0103162:	e9 99 fa ff ff       	jmp    c0102c00 <__alltraps>

c0103167 <vector145>:
.globl vector145
vector145:
  pushl $0
c0103167:	6a 00                	push   $0x0
  pushl $145
c0103169:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c010316e:	e9 8d fa ff ff       	jmp    c0102c00 <__alltraps>

c0103173 <vector146>:
.globl vector146
vector146:
  pushl $0
c0103173:	6a 00                	push   $0x0
  pushl $146
c0103175:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c010317a:	e9 81 fa ff ff       	jmp    c0102c00 <__alltraps>

c010317f <vector147>:
.globl vector147
vector147:
  pushl $0
c010317f:	6a 00                	push   $0x0
  pushl $147
c0103181:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0103186:	e9 75 fa ff ff       	jmp    c0102c00 <__alltraps>

c010318b <vector148>:
.globl vector148
vector148:
  pushl $0
c010318b:	6a 00                	push   $0x0
  pushl $148
c010318d:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c0103192:	e9 69 fa ff ff       	jmp    c0102c00 <__alltraps>

c0103197 <vector149>:
.globl vector149
vector149:
  pushl $0
c0103197:	6a 00                	push   $0x0
  pushl $149
c0103199:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c010319e:	e9 5d fa ff ff       	jmp    c0102c00 <__alltraps>

c01031a3 <vector150>:
.globl vector150
vector150:
  pushl $0
c01031a3:	6a 00                	push   $0x0
  pushl $150
c01031a5:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01031aa:	e9 51 fa ff ff       	jmp    c0102c00 <__alltraps>

c01031af <vector151>:
.globl vector151
vector151:
  pushl $0
c01031af:	6a 00                	push   $0x0
  pushl $151
c01031b1:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01031b6:	e9 45 fa ff ff       	jmp    c0102c00 <__alltraps>

c01031bb <vector152>:
.globl vector152
vector152:
  pushl $0
c01031bb:	6a 00                	push   $0x0
  pushl $152
c01031bd:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01031c2:	e9 39 fa ff ff       	jmp    c0102c00 <__alltraps>

c01031c7 <vector153>:
.globl vector153
vector153:
  pushl $0
c01031c7:	6a 00                	push   $0x0
  pushl $153
c01031c9:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01031ce:	e9 2d fa ff ff       	jmp    c0102c00 <__alltraps>

c01031d3 <vector154>:
.globl vector154
vector154:
  pushl $0
c01031d3:	6a 00                	push   $0x0
  pushl $154
c01031d5:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01031da:	e9 21 fa ff ff       	jmp    c0102c00 <__alltraps>

c01031df <vector155>:
.globl vector155
vector155:
  pushl $0
c01031df:	6a 00                	push   $0x0
  pushl $155
c01031e1:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01031e6:	e9 15 fa ff ff       	jmp    c0102c00 <__alltraps>

c01031eb <vector156>:
.globl vector156
vector156:
  pushl $0
c01031eb:	6a 00                	push   $0x0
  pushl $156
c01031ed:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c01031f2:	e9 09 fa ff ff       	jmp    c0102c00 <__alltraps>

c01031f7 <vector157>:
.globl vector157
vector157:
  pushl $0
c01031f7:	6a 00                	push   $0x0
  pushl $157
c01031f9:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c01031fe:	e9 fd f9 ff ff       	jmp    c0102c00 <__alltraps>

c0103203 <vector158>:
.globl vector158
vector158:
  pushl $0
c0103203:	6a 00                	push   $0x0
  pushl $158
c0103205:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c010320a:	e9 f1 f9 ff ff       	jmp    c0102c00 <__alltraps>

c010320f <vector159>:
.globl vector159
vector159:
  pushl $0
c010320f:	6a 00                	push   $0x0
  pushl $159
c0103211:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c0103216:	e9 e5 f9 ff ff       	jmp    c0102c00 <__alltraps>

c010321b <vector160>:
.globl vector160
vector160:
  pushl $0
c010321b:	6a 00                	push   $0x0
  pushl $160
c010321d:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0103222:	e9 d9 f9 ff ff       	jmp    c0102c00 <__alltraps>

c0103227 <vector161>:
.globl vector161
vector161:
  pushl $0
c0103227:	6a 00                	push   $0x0
  pushl $161
c0103229:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c010322e:	e9 cd f9 ff ff       	jmp    c0102c00 <__alltraps>

c0103233 <vector162>:
.globl vector162
vector162:
  pushl $0
c0103233:	6a 00                	push   $0x0
  pushl $162
c0103235:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c010323a:	e9 c1 f9 ff ff       	jmp    c0102c00 <__alltraps>

c010323f <vector163>:
.globl vector163
vector163:
  pushl $0
c010323f:	6a 00                	push   $0x0
  pushl $163
c0103241:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c0103246:	e9 b5 f9 ff ff       	jmp    c0102c00 <__alltraps>

c010324b <vector164>:
.globl vector164
vector164:
  pushl $0
c010324b:	6a 00                	push   $0x0
  pushl $164
c010324d:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c0103252:	e9 a9 f9 ff ff       	jmp    c0102c00 <__alltraps>

c0103257 <vector165>:
.globl vector165
vector165:
  pushl $0
c0103257:	6a 00                	push   $0x0
  pushl $165
c0103259:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c010325e:	e9 9d f9 ff ff       	jmp    c0102c00 <__alltraps>

c0103263 <vector166>:
.globl vector166
vector166:
  pushl $0
c0103263:	6a 00                	push   $0x0
  pushl $166
c0103265:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c010326a:	e9 91 f9 ff ff       	jmp    c0102c00 <__alltraps>

c010326f <vector167>:
.globl vector167
vector167:
  pushl $0
c010326f:	6a 00                	push   $0x0
  pushl $167
c0103271:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c0103276:	e9 85 f9 ff ff       	jmp    c0102c00 <__alltraps>

c010327b <vector168>:
.globl vector168
vector168:
  pushl $0
c010327b:	6a 00                	push   $0x0
  pushl $168
c010327d:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c0103282:	e9 79 f9 ff ff       	jmp    c0102c00 <__alltraps>

c0103287 <vector169>:
.globl vector169
vector169:
  pushl $0
c0103287:	6a 00                	push   $0x0
  pushl $169
c0103289:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c010328e:	e9 6d f9 ff ff       	jmp    c0102c00 <__alltraps>

c0103293 <vector170>:
.globl vector170
vector170:
  pushl $0
c0103293:	6a 00                	push   $0x0
  pushl $170
c0103295:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c010329a:	e9 61 f9 ff ff       	jmp    c0102c00 <__alltraps>

c010329f <vector171>:
.globl vector171
vector171:
  pushl $0
c010329f:	6a 00                	push   $0x0
  pushl $171
c01032a1:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01032a6:	e9 55 f9 ff ff       	jmp    c0102c00 <__alltraps>

c01032ab <vector172>:
.globl vector172
vector172:
  pushl $0
c01032ab:	6a 00                	push   $0x0
  pushl $172
c01032ad:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01032b2:	e9 49 f9 ff ff       	jmp    c0102c00 <__alltraps>

c01032b7 <vector173>:
.globl vector173
vector173:
  pushl $0
c01032b7:	6a 00                	push   $0x0
  pushl $173
c01032b9:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01032be:	e9 3d f9 ff ff       	jmp    c0102c00 <__alltraps>

c01032c3 <vector174>:
.globl vector174
vector174:
  pushl $0
c01032c3:	6a 00                	push   $0x0
  pushl $174
c01032c5:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01032ca:	e9 31 f9 ff ff       	jmp    c0102c00 <__alltraps>

c01032cf <vector175>:
.globl vector175
vector175:
  pushl $0
c01032cf:	6a 00                	push   $0x0
  pushl $175
c01032d1:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01032d6:	e9 25 f9 ff ff       	jmp    c0102c00 <__alltraps>

c01032db <vector176>:
.globl vector176
vector176:
  pushl $0
c01032db:	6a 00                	push   $0x0
  pushl $176
c01032dd:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01032e2:	e9 19 f9 ff ff       	jmp    c0102c00 <__alltraps>

c01032e7 <vector177>:
.globl vector177
vector177:
  pushl $0
c01032e7:	6a 00                	push   $0x0
  pushl $177
c01032e9:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c01032ee:	e9 0d f9 ff ff       	jmp    c0102c00 <__alltraps>

c01032f3 <vector178>:
.globl vector178
vector178:
  pushl $0
c01032f3:	6a 00                	push   $0x0
  pushl $178
c01032f5:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c01032fa:	e9 01 f9 ff ff       	jmp    c0102c00 <__alltraps>

c01032ff <vector179>:
.globl vector179
vector179:
  pushl $0
c01032ff:	6a 00                	push   $0x0
  pushl $179
c0103301:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c0103306:	e9 f5 f8 ff ff       	jmp    c0102c00 <__alltraps>

c010330b <vector180>:
.globl vector180
vector180:
  pushl $0
c010330b:	6a 00                	push   $0x0
  pushl $180
c010330d:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c0103312:	e9 e9 f8 ff ff       	jmp    c0102c00 <__alltraps>

c0103317 <vector181>:
.globl vector181
vector181:
  pushl $0
c0103317:	6a 00                	push   $0x0
  pushl $181
c0103319:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c010331e:	e9 dd f8 ff ff       	jmp    c0102c00 <__alltraps>

c0103323 <vector182>:
.globl vector182
vector182:
  pushl $0
c0103323:	6a 00                	push   $0x0
  pushl $182
c0103325:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c010332a:	e9 d1 f8 ff ff       	jmp    c0102c00 <__alltraps>

c010332f <vector183>:
.globl vector183
vector183:
  pushl $0
c010332f:	6a 00                	push   $0x0
  pushl $183
c0103331:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c0103336:	e9 c5 f8 ff ff       	jmp    c0102c00 <__alltraps>

c010333b <vector184>:
.globl vector184
vector184:
  pushl $0
c010333b:	6a 00                	push   $0x0
  pushl $184
c010333d:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c0103342:	e9 b9 f8 ff ff       	jmp    c0102c00 <__alltraps>

c0103347 <vector185>:
.globl vector185
vector185:
  pushl $0
c0103347:	6a 00                	push   $0x0
  pushl $185
c0103349:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c010334e:	e9 ad f8 ff ff       	jmp    c0102c00 <__alltraps>

c0103353 <vector186>:
.globl vector186
vector186:
  pushl $0
c0103353:	6a 00                	push   $0x0
  pushl $186
c0103355:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c010335a:	e9 a1 f8 ff ff       	jmp    c0102c00 <__alltraps>

c010335f <vector187>:
.globl vector187
vector187:
  pushl $0
c010335f:	6a 00                	push   $0x0
  pushl $187
c0103361:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c0103366:	e9 95 f8 ff ff       	jmp    c0102c00 <__alltraps>

c010336b <vector188>:
.globl vector188
vector188:
  pushl $0
c010336b:	6a 00                	push   $0x0
  pushl $188
c010336d:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c0103372:	e9 89 f8 ff ff       	jmp    c0102c00 <__alltraps>

c0103377 <vector189>:
.globl vector189
vector189:
  pushl $0
c0103377:	6a 00                	push   $0x0
  pushl $189
c0103379:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c010337e:	e9 7d f8 ff ff       	jmp    c0102c00 <__alltraps>

c0103383 <vector190>:
.globl vector190
vector190:
  pushl $0
c0103383:	6a 00                	push   $0x0
  pushl $190
c0103385:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c010338a:	e9 71 f8 ff ff       	jmp    c0102c00 <__alltraps>

c010338f <vector191>:
.globl vector191
vector191:
  pushl $0
c010338f:	6a 00                	push   $0x0
  pushl $191
c0103391:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c0103396:	e9 65 f8 ff ff       	jmp    c0102c00 <__alltraps>

c010339b <vector192>:
.globl vector192
vector192:
  pushl $0
c010339b:	6a 00                	push   $0x0
  pushl $192
c010339d:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01033a2:	e9 59 f8 ff ff       	jmp    c0102c00 <__alltraps>

c01033a7 <vector193>:
.globl vector193
vector193:
  pushl $0
c01033a7:	6a 00                	push   $0x0
  pushl $193
c01033a9:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01033ae:	e9 4d f8 ff ff       	jmp    c0102c00 <__alltraps>

c01033b3 <vector194>:
.globl vector194
vector194:
  pushl $0
c01033b3:	6a 00                	push   $0x0
  pushl $194
c01033b5:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01033ba:	e9 41 f8 ff ff       	jmp    c0102c00 <__alltraps>

c01033bf <vector195>:
.globl vector195
vector195:
  pushl $0
c01033bf:	6a 00                	push   $0x0
  pushl $195
c01033c1:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01033c6:	e9 35 f8 ff ff       	jmp    c0102c00 <__alltraps>

c01033cb <vector196>:
.globl vector196
vector196:
  pushl $0
c01033cb:	6a 00                	push   $0x0
  pushl $196
c01033cd:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01033d2:	e9 29 f8 ff ff       	jmp    c0102c00 <__alltraps>

c01033d7 <vector197>:
.globl vector197
vector197:
  pushl $0
c01033d7:	6a 00                	push   $0x0
  pushl $197
c01033d9:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01033de:	e9 1d f8 ff ff       	jmp    c0102c00 <__alltraps>

c01033e3 <vector198>:
.globl vector198
vector198:
  pushl $0
c01033e3:	6a 00                	push   $0x0
  pushl $198
c01033e5:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c01033ea:	e9 11 f8 ff ff       	jmp    c0102c00 <__alltraps>

c01033ef <vector199>:
.globl vector199
vector199:
  pushl $0
c01033ef:	6a 00                	push   $0x0
  pushl $199
c01033f1:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c01033f6:	e9 05 f8 ff ff       	jmp    c0102c00 <__alltraps>

c01033fb <vector200>:
.globl vector200
vector200:
  pushl $0
c01033fb:	6a 00                	push   $0x0
  pushl $200
c01033fd:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c0103402:	e9 f9 f7 ff ff       	jmp    c0102c00 <__alltraps>

c0103407 <vector201>:
.globl vector201
vector201:
  pushl $0
c0103407:	6a 00                	push   $0x0
  pushl $201
c0103409:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c010340e:	e9 ed f7 ff ff       	jmp    c0102c00 <__alltraps>

c0103413 <vector202>:
.globl vector202
vector202:
  pushl $0
c0103413:	6a 00                	push   $0x0
  pushl $202
c0103415:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c010341a:	e9 e1 f7 ff ff       	jmp    c0102c00 <__alltraps>

c010341f <vector203>:
.globl vector203
vector203:
  pushl $0
c010341f:	6a 00                	push   $0x0
  pushl $203
c0103421:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c0103426:	e9 d5 f7 ff ff       	jmp    c0102c00 <__alltraps>

c010342b <vector204>:
.globl vector204
vector204:
  pushl $0
c010342b:	6a 00                	push   $0x0
  pushl $204
c010342d:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c0103432:	e9 c9 f7 ff ff       	jmp    c0102c00 <__alltraps>

c0103437 <vector205>:
.globl vector205
vector205:
  pushl $0
c0103437:	6a 00                	push   $0x0
  pushl $205
c0103439:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c010343e:	e9 bd f7 ff ff       	jmp    c0102c00 <__alltraps>

c0103443 <vector206>:
.globl vector206
vector206:
  pushl $0
c0103443:	6a 00                	push   $0x0
  pushl $206
c0103445:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c010344a:	e9 b1 f7 ff ff       	jmp    c0102c00 <__alltraps>

c010344f <vector207>:
.globl vector207
vector207:
  pushl $0
c010344f:	6a 00                	push   $0x0
  pushl $207
c0103451:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c0103456:	e9 a5 f7 ff ff       	jmp    c0102c00 <__alltraps>

c010345b <vector208>:
.globl vector208
vector208:
  pushl $0
c010345b:	6a 00                	push   $0x0
  pushl $208
c010345d:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c0103462:	e9 99 f7 ff ff       	jmp    c0102c00 <__alltraps>

c0103467 <vector209>:
.globl vector209
vector209:
  pushl $0
c0103467:	6a 00                	push   $0x0
  pushl $209
c0103469:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c010346e:	e9 8d f7 ff ff       	jmp    c0102c00 <__alltraps>

c0103473 <vector210>:
.globl vector210
vector210:
  pushl $0
c0103473:	6a 00                	push   $0x0
  pushl $210
c0103475:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c010347a:	e9 81 f7 ff ff       	jmp    c0102c00 <__alltraps>

c010347f <vector211>:
.globl vector211
vector211:
  pushl $0
c010347f:	6a 00                	push   $0x0
  pushl $211
c0103481:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c0103486:	e9 75 f7 ff ff       	jmp    c0102c00 <__alltraps>

c010348b <vector212>:
.globl vector212
vector212:
  pushl $0
c010348b:	6a 00                	push   $0x0
  pushl $212
c010348d:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c0103492:	e9 69 f7 ff ff       	jmp    c0102c00 <__alltraps>

c0103497 <vector213>:
.globl vector213
vector213:
  pushl $0
c0103497:	6a 00                	push   $0x0
  pushl $213
c0103499:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c010349e:	e9 5d f7 ff ff       	jmp    c0102c00 <__alltraps>

c01034a3 <vector214>:
.globl vector214
vector214:
  pushl $0
c01034a3:	6a 00                	push   $0x0
  pushl $214
c01034a5:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01034aa:	e9 51 f7 ff ff       	jmp    c0102c00 <__alltraps>

c01034af <vector215>:
.globl vector215
vector215:
  pushl $0
c01034af:	6a 00                	push   $0x0
  pushl $215
c01034b1:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01034b6:	e9 45 f7 ff ff       	jmp    c0102c00 <__alltraps>

c01034bb <vector216>:
.globl vector216
vector216:
  pushl $0
c01034bb:	6a 00                	push   $0x0
  pushl $216
c01034bd:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01034c2:	e9 39 f7 ff ff       	jmp    c0102c00 <__alltraps>

c01034c7 <vector217>:
.globl vector217
vector217:
  pushl $0
c01034c7:	6a 00                	push   $0x0
  pushl $217
c01034c9:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01034ce:	e9 2d f7 ff ff       	jmp    c0102c00 <__alltraps>

c01034d3 <vector218>:
.globl vector218
vector218:
  pushl $0
c01034d3:	6a 00                	push   $0x0
  pushl $218
c01034d5:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01034da:	e9 21 f7 ff ff       	jmp    c0102c00 <__alltraps>

c01034df <vector219>:
.globl vector219
vector219:
  pushl $0
c01034df:	6a 00                	push   $0x0
  pushl $219
c01034e1:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01034e6:	e9 15 f7 ff ff       	jmp    c0102c00 <__alltraps>

c01034eb <vector220>:
.globl vector220
vector220:
  pushl $0
c01034eb:	6a 00                	push   $0x0
  pushl $220
c01034ed:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c01034f2:	e9 09 f7 ff ff       	jmp    c0102c00 <__alltraps>

c01034f7 <vector221>:
.globl vector221
vector221:
  pushl $0
c01034f7:	6a 00                	push   $0x0
  pushl $221
c01034f9:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c01034fe:	e9 fd f6 ff ff       	jmp    c0102c00 <__alltraps>

c0103503 <vector222>:
.globl vector222
vector222:
  pushl $0
c0103503:	6a 00                	push   $0x0
  pushl $222
c0103505:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c010350a:	e9 f1 f6 ff ff       	jmp    c0102c00 <__alltraps>

c010350f <vector223>:
.globl vector223
vector223:
  pushl $0
c010350f:	6a 00                	push   $0x0
  pushl $223
c0103511:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c0103516:	e9 e5 f6 ff ff       	jmp    c0102c00 <__alltraps>

c010351b <vector224>:
.globl vector224
vector224:
  pushl $0
c010351b:	6a 00                	push   $0x0
  pushl $224
c010351d:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0103522:	e9 d9 f6 ff ff       	jmp    c0102c00 <__alltraps>

c0103527 <vector225>:
.globl vector225
vector225:
  pushl $0
c0103527:	6a 00                	push   $0x0
  pushl $225
c0103529:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c010352e:	e9 cd f6 ff ff       	jmp    c0102c00 <__alltraps>

c0103533 <vector226>:
.globl vector226
vector226:
  pushl $0
c0103533:	6a 00                	push   $0x0
  pushl $226
c0103535:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c010353a:	e9 c1 f6 ff ff       	jmp    c0102c00 <__alltraps>

c010353f <vector227>:
.globl vector227
vector227:
  pushl $0
c010353f:	6a 00                	push   $0x0
  pushl $227
c0103541:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c0103546:	e9 b5 f6 ff ff       	jmp    c0102c00 <__alltraps>

c010354b <vector228>:
.globl vector228
vector228:
  pushl $0
c010354b:	6a 00                	push   $0x0
  pushl $228
c010354d:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c0103552:	e9 a9 f6 ff ff       	jmp    c0102c00 <__alltraps>

c0103557 <vector229>:
.globl vector229
vector229:
  pushl $0
c0103557:	6a 00                	push   $0x0
  pushl $229
c0103559:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c010355e:	e9 9d f6 ff ff       	jmp    c0102c00 <__alltraps>

c0103563 <vector230>:
.globl vector230
vector230:
  pushl $0
c0103563:	6a 00                	push   $0x0
  pushl $230
c0103565:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c010356a:	e9 91 f6 ff ff       	jmp    c0102c00 <__alltraps>

c010356f <vector231>:
.globl vector231
vector231:
  pushl $0
c010356f:	6a 00                	push   $0x0
  pushl $231
c0103571:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c0103576:	e9 85 f6 ff ff       	jmp    c0102c00 <__alltraps>

c010357b <vector232>:
.globl vector232
vector232:
  pushl $0
c010357b:	6a 00                	push   $0x0
  pushl $232
c010357d:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c0103582:	e9 79 f6 ff ff       	jmp    c0102c00 <__alltraps>

c0103587 <vector233>:
.globl vector233
vector233:
  pushl $0
c0103587:	6a 00                	push   $0x0
  pushl $233
c0103589:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c010358e:	e9 6d f6 ff ff       	jmp    c0102c00 <__alltraps>

c0103593 <vector234>:
.globl vector234
vector234:
  pushl $0
c0103593:	6a 00                	push   $0x0
  pushl $234
c0103595:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c010359a:	e9 61 f6 ff ff       	jmp    c0102c00 <__alltraps>

c010359f <vector235>:
.globl vector235
vector235:
  pushl $0
c010359f:	6a 00                	push   $0x0
  pushl $235
c01035a1:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01035a6:	e9 55 f6 ff ff       	jmp    c0102c00 <__alltraps>

c01035ab <vector236>:
.globl vector236
vector236:
  pushl $0
c01035ab:	6a 00                	push   $0x0
  pushl $236
c01035ad:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01035b2:	e9 49 f6 ff ff       	jmp    c0102c00 <__alltraps>

c01035b7 <vector237>:
.globl vector237
vector237:
  pushl $0
c01035b7:	6a 00                	push   $0x0
  pushl $237
c01035b9:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01035be:	e9 3d f6 ff ff       	jmp    c0102c00 <__alltraps>

c01035c3 <vector238>:
.globl vector238
vector238:
  pushl $0
c01035c3:	6a 00                	push   $0x0
  pushl $238
c01035c5:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01035ca:	e9 31 f6 ff ff       	jmp    c0102c00 <__alltraps>

c01035cf <vector239>:
.globl vector239
vector239:
  pushl $0
c01035cf:	6a 00                	push   $0x0
  pushl $239
c01035d1:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01035d6:	e9 25 f6 ff ff       	jmp    c0102c00 <__alltraps>

c01035db <vector240>:
.globl vector240
vector240:
  pushl $0
c01035db:	6a 00                	push   $0x0
  pushl $240
c01035dd:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01035e2:	e9 19 f6 ff ff       	jmp    c0102c00 <__alltraps>

c01035e7 <vector241>:
.globl vector241
vector241:
  pushl $0
c01035e7:	6a 00                	push   $0x0
  pushl $241
c01035e9:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c01035ee:	e9 0d f6 ff ff       	jmp    c0102c00 <__alltraps>

c01035f3 <vector242>:
.globl vector242
vector242:
  pushl $0
c01035f3:	6a 00                	push   $0x0
  pushl $242
c01035f5:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c01035fa:	e9 01 f6 ff ff       	jmp    c0102c00 <__alltraps>

c01035ff <vector243>:
.globl vector243
vector243:
  pushl $0
c01035ff:	6a 00                	push   $0x0
  pushl $243
c0103601:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c0103606:	e9 f5 f5 ff ff       	jmp    c0102c00 <__alltraps>

c010360b <vector244>:
.globl vector244
vector244:
  pushl $0
c010360b:	6a 00                	push   $0x0
  pushl $244
c010360d:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c0103612:	e9 e9 f5 ff ff       	jmp    c0102c00 <__alltraps>

c0103617 <vector245>:
.globl vector245
vector245:
  pushl $0
c0103617:	6a 00                	push   $0x0
  pushl $245
c0103619:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c010361e:	e9 dd f5 ff ff       	jmp    c0102c00 <__alltraps>

c0103623 <vector246>:
.globl vector246
vector246:
  pushl $0
c0103623:	6a 00                	push   $0x0
  pushl $246
c0103625:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c010362a:	e9 d1 f5 ff ff       	jmp    c0102c00 <__alltraps>

c010362f <vector247>:
.globl vector247
vector247:
  pushl $0
c010362f:	6a 00                	push   $0x0
  pushl $247
c0103631:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c0103636:	e9 c5 f5 ff ff       	jmp    c0102c00 <__alltraps>

c010363b <vector248>:
.globl vector248
vector248:
  pushl $0
c010363b:	6a 00                	push   $0x0
  pushl $248
c010363d:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c0103642:	e9 b9 f5 ff ff       	jmp    c0102c00 <__alltraps>

c0103647 <vector249>:
.globl vector249
vector249:
  pushl $0
c0103647:	6a 00                	push   $0x0
  pushl $249
c0103649:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c010364e:	e9 ad f5 ff ff       	jmp    c0102c00 <__alltraps>

c0103653 <vector250>:
.globl vector250
vector250:
  pushl $0
c0103653:	6a 00                	push   $0x0
  pushl $250
c0103655:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c010365a:	e9 a1 f5 ff ff       	jmp    c0102c00 <__alltraps>

c010365f <vector251>:
.globl vector251
vector251:
  pushl $0
c010365f:	6a 00                	push   $0x0
  pushl $251
c0103661:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c0103666:	e9 95 f5 ff ff       	jmp    c0102c00 <__alltraps>

c010366b <vector252>:
.globl vector252
vector252:
  pushl $0
c010366b:	6a 00                	push   $0x0
  pushl $252
c010366d:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c0103672:	e9 89 f5 ff ff       	jmp    c0102c00 <__alltraps>

c0103677 <vector253>:
.globl vector253
vector253:
  pushl $0
c0103677:	6a 00                	push   $0x0
  pushl $253
c0103679:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c010367e:	e9 7d f5 ff ff       	jmp    c0102c00 <__alltraps>

c0103683 <vector254>:
.globl vector254
vector254:
  pushl $0
c0103683:	6a 00                	push   $0x0
  pushl $254
c0103685:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c010368a:	e9 71 f5 ff ff       	jmp    c0102c00 <__alltraps>

c010368f <vector255>:
.globl vector255
vector255:
  pushl $0
c010368f:	6a 00                	push   $0x0
  pushl $255
c0103691:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c0103696:	e9 65 f5 ff ff       	jmp    c0102c00 <__alltraps>

c010369b <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010369b:	55                   	push   %ebp
c010369c:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010369e:	8b 55 08             	mov    0x8(%ebp),%edx
c01036a1:	a1 90 2e 1b c0       	mov    0xc01b2e90,%eax
c01036a6:	29 c2                	sub    %eax,%edx
c01036a8:	89 d0                	mov    %edx,%eax
c01036aa:	c1 f8 05             	sar    $0x5,%eax
}
c01036ad:	5d                   	pop    %ebp
c01036ae:	c3                   	ret    

c01036af <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01036af:	55                   	push   %ebp
c01036b0:	89 e5                	mov    %esp,%ebp
c01036b2:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01036b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01036b8:	89 04 24             	mov    %eax,(%esp)
c01036bb:	e8 db ff ff ff       	call   c010369b <page2ppn>
c01036c0:	c1 e0 0c             	shl    $0xc,%eax
}
c01036c3:	c9                   	leave  
c01036c4:	c3                   	ret    

c01036c5 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c01036c5:	55                   	push   %ebp
c01036c6:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01036c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01036cb:	8b 00                	mov    (%eax),%eax
}
c01036cd:	5d                   	pop    %ebp
c01036ce:	c3                   	ret    

c01036cf <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01036cf:	55                   	push   %ebp
c01036d0:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01036d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01036d5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01036d8:	89 10                	mov    %edx,(%eax)
}
c01036da:	5d                   	pop    %ebp
c01036db:	c3                   	ret    

c01036dc <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c01036dc:	55                   	push   %ebp
c01036dd:	89 e5                	mov    %esp,%ebp
c01036df:	83 ec 10             	sub    $0x10,%esp
c01036e2:	c7 45 fc 7c 2e 1b c0 	movl   $0xc01b2e7c,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01036e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036ec:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01036ef:	89 50 04             	mov    %edx,0x4(%eax)
c01036f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036f5:	8b 50 04             	mov    0x4(%eax),%edx
c01036f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01036fb:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c01036fd:	c7 05 84 2e 1b c0 00 	movl   $0x0,0xc01b2e84
c0103704:	00 00 00 
}
c0103707:	c9                   	leave  
c0103708:	c3                   	ret    

c0103709 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0103709:	55                   	push   %ebp
c010370a:	89 e5                	mov    %esp,%ebp
c010370c:	83 ec 48             	sub    $0x48,%esp
	assert(n > 0);
c010370f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103713:	75 24                	jne    c0103739 <default_init_memmap+0x30>
c0103715:	c7 44 24 0c d0 d2 10 	movl   $0xc010d2d0,0xc(%esp)
c010371c:	c0 
c010371d:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0103724:	c0 
c0103725:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c010372c:	00 
c010372d:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0103734:	e8 9b d6 ff ff       	call   c0100dd4 <__panic>
	struct Page *p = base;
c0103739:	8b 45 08             	mov    0x8(%ebp),%eax
c010373c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (; p != base + n; p ++) {
c010373f:	e9 ef 00 00 00       	jmp    c0103833 <default_init_memmap+0x12a>
		assert(PageReserved(p));
c0103744:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103747:	83 c0 04             	add    $0x4,%eax
c010374a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0103751:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103754:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103757:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010375a:	0f a3 10             	bt     %edx,(%eax)
c010375d:	19 c0                	sbb    %eax,%eax
c010375f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c0103762:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103766:	0f 95 c0             	setne  %al
c0103769:	0f b6 c0             	movzbl %al,%eax
c010376c:	85 c0                	test   %eax,%eax
c010376e:	75 24                	jne    c0103794 <default_init_memmap+0x8b>
c0103770:	c7 44 24 0c 01 d3 10 	movl   $0xc010d301,0xc(%esp)
c0103777:	c0 
c0103778:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c010377f:	c0 
c0103780:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0103787:	00 
c0103788:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c010378f:	e8 40 d6 ff ff       	call   c0100dd4 <__panic>
		p->flags = 0;
c0103794:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103797:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
		SetPageProperty(p);
c010379e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037a1:	83 c0 04             	add    $0x4,%eax
c01037a4:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c01037ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01037ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01037b1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01037b4:	0f ab 10             	bts    %edx,(%eax)
		if(p == base)
c01037b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037ba:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037bd:	75 0b                	jne    c01037ca <default_init_memmap+0xc1>
		{
			p->property = n;
c01037bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037c2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01037c5:	89 50 08             	mov    %edx,0x8(%eax)
c01037c8:	eb 0a                	jmp    c01037d4 <default_init_memmap+0xcb>
		}
		else
		{
			p->property = 0;
c01037ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037cd:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
		}
		set_page_ref(p, 0);
c01037d4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01037db:	00 
c01037dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037df:	89 04 24             	mov    %eax,(%esp)
c01037e2:	e8 e8 fe ff ff       	call   c01036cf <set_page_ref>
		list_add_before(&free_list, &(p->page_link));
c01037e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037ea:	83 c0 0c             	add    $0xc,%eax
c01037ed:	c7 45 dc 7c 2e 1b c0 	movl   $0xc01b2e7c,-0x24(%ebp)
c01037f4:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01037f7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01037fa:	8b 00                	mov    (%eax),%eax
c01037fc:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01037ff:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103802:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103805:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103808:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010380b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010380e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103811:	89 10                	mov    %edx,(%eax)
c0103813:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103816:	8b 10                	mov    (%eax),%edx
c0103818:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010381b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010381e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103821:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103824:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103827:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010382a:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010382d:	89 10                	mov    %edx,(%eax)

static void
default_init_memmap(struct Page *base, size_t n) {
	assert(n > 0);
	struct Page *p = base;
	for (; p != base + n; p ++) {
c010382f:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0103833:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103836:	c1 e0 05             	shl    $0x5,%eax
c0103839:	89 c2                	mov    %eax,%edx
c010383b:	8b 45 08             	mov    0x8(%ebp),%eax
c010383e:	01 d0                	add    %edx,%eax
c0103840:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103843:	0f 85 fb fe ff ff    	jne    c0103744 <default_init_memmap+0x3b>
			p->property = 0;
		}
		set_page_ref(p, 0);
		list_add_before(&free_list, &(p->page_link));
	}
	nr_free += n;
c0103849:	8b 15 84 2e 1b c0    	mov    0xc01b2e84,%edx
c010384f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103852:	01 d0                	add    %edx,%eax
c0103854:	a3 84 2e 1b c0       	mov    %eax,0xc01b2e84
}
c0103859:	c9                   	leave  
c010385a:	c3                   	ret    

c010385b <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c010385b:	55                   	push   %ebp
c010385c:	89 e5                	mov    %esp,%ebp
c010385e:	83 ec 68             	sub    $0x68,%esp
	assert(n > 0);
c0103861:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103865:	75 24                	jne    c010388b <default_alloc_pages+0x30>
c0103867:	c7 44 24 0c d0 d2 10 	movl   $0xc010d2d0,0xc(%esp)
c010386e:	c0 
c010386f:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0103876:	c0 
c0103877:	c7 44 24 04 5c 00 00 	movl   $0x5c,0x4(%esp)
c010387e:	00 
c010387f:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0103886:	e8 49 d5 ff ff       	call   c0100dd4 <__panic>
	if (n > nr_free) {
c010388b:	a1 84 2e 1b c0       	mov    0xc01b2e84,%eax
c0103890:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103893:	73 0a                	jae    c010389f <default_alloc_pages+0x44>
		return NULL;
c0103895:	b8 00 00 00 00       	mov    $0x0,%eax
c010389a:	e9 45 01 00 00       	jmp    c01039e4 <default_alloc_pages+0x189>
	}
	struct Page *page = NULL;
c010389f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	list_entry_t *tmp = NULL;
c01038a6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	list_entry_t *le = &free_list;
c01038ad:	c7 45 f4 7c 2e 1b c0 	movl   $0xc01b2e7c,-0xc(%ebp)
	while ((le = list_next(le)) != &free_list)
c01038b4:	e9 0a 01 00 00       	jmp    c01039c3 <default_alloc_pages+0x168>
	{
		struct Page *p = le2page(le, page_link);
c01038b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038bc:	83 e8 0c             	sub    $0xc,%eax
c01038bf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (p->property >= n)
c01038c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01038c5:	8b 40 08             	mov    0x8(%eax),%eax
c01038c8:	3b 45 08             	cmp    0x8(%ebp),%eax
c01038cb:	0f 82 f2 00 00 00    	jb     c01039c3 <default_alloc_pages+0x168>
		{
			int i;
			for(i = 0;i<n;i++)
c01038d1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01038d8:	eb 7c                	jmp    c0103956 <default_alloc_pages+0xfb>
c01038da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038dd:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01038e0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01038e3:	8b 40 04             	mov    0x4(%eax),%eax
			{
				tmp = list_next(le);
c01038e6:	89 45 e8             	mov    %eax,-0x18(%ebp)
				struct Page *pagetmp = le2page(le, page_link);
c01038e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038ec:	83 e8 0c             	sub    $0xc,%eax
c01038ef:	89 45 e0             	mov    %eax,-0x20(%ebp)
				SetPageReserved(pagetmp);
c01038f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01038f5:	83 c0 04             	add    $0x4,%eax
c01038f8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
c01038ff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0103902:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103905:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0103908:	0f ab 10             	bts    %edx,(%eax)
				ClearPageProperty(pagetmp);
c010390b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010390e:	83 c0 04             	add    $0x4,%eax
c0103911:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0103918:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010391b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010391e:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103921:	0f b3 10             	btr    %edx,(%eax)
c0103924:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103927:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010392a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010392d:	8b 40 04             	mov    0x4(%eax),%eax
c0103930:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103933:	8b 12                	mov    (%edx),%edx
c0103935:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c0103938:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010393b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010393e:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103941:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103944:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0103947:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010394a:	89 10                	mov    %edx,(%eax)
				list_del(le);
				le = tmp;
c010394c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010394f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		struct Page *p = le2page(le, page_link);
		if (p->property >= n)
		{
			int i;
			for(i = 0;i<n;i++)
c0103952:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0103956:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103959:	3b 45 08             	cmp    0x8(%ebp),%eax
c010395c:	0f 82 78 ff ff ff    	jb     c01038da <default_alloc_pages+0x7f>
				SetPageReserved(pagetmp);
				ClearPageProperty(pagetmp);
				list_del(le);
				le = tmp;
			}
			if(p->property > n)
c0103962:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103965:	8b 40 08             	mov    0x8(%eax),%eax
c0103968:	3b 45 08             	cmp    0x8(%ebp),%eax
c010396b:	76 12                	jbe    c010397f <default_alloc_pages+0x124>
			{
				(le2page(le, page_link)->property) = p->property - n;
c010396d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103970:	8d 50 f4             	lea    -0xc(%eax),%edx
c0103973:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103976:	8b 40 08             	mov    0x8(%eax),%eax
c0103979:	2b 45 08             	sub    0x8(%ebp),%eax
c010397c:	89 42 08             	mov    %eax,0x8(%edx)
			}
			SetPageReserved(p);
c010397f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103982:	83 c0 04             	add    $0x4,%eax
c0103985:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
c010398c:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010398f:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103992:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0103995:	0f ab 10             	bts    %edx,(%eax)
			ClearPageProperty(p);
c0103998:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010399b:	83 c0 04             	add    $0x4,%eax
c010399e:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c01039a5:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01039a8:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01039ab:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01039ae:	0f b3 10             	btr    %edx,(%eax)
			nr_free -= n;
c01039b1:	a1 84 2e 1b c0       	mov    0xc01b2e84,%eax
c01039b6:	2b 45 08             	sub    0x8(%ebp),%eax
c01039b9:	a3 84 2e 1b c0       	mov    %eax,0xc01b2e84
			return p;
c01039be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01039c1:	eb 21                	jmp    c01039e4 <default_alloc_pages+0x189>
c01039c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039c6:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01039c9:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01039cc:	8b 40 04             	mov    0x4(%eax),%eax
		return NULL;
	}
	struct Page *page = NULL;
	list_entry_t *tmp = NULL;
	list_entry_t *le = &free_list;
	while ((le = list_next(le)) != &free_list)
c01039cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01039d2:	81 7d f4 7c 2e 1b c0 	cmpl   $0xc01b2e7c,-0xc(%ebp)
c01039d9:	0f 85 da fe ff ff    	jne    c01038b9 <default_alloc_pages+0x5e>
			ClearPageProperty(p);
			nr_free -= n;
			return p;
		}
	}
	return NULL;
c01039df:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01039e4:	c9                   	leave  
c01039e5:	c3                   	ret    

c01039e6 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c01039e6:	55                   	push   %ebp
c01039e7:	89 e5                	mov    %esp,%ebp
c01039e9:	83 ec 68             	sub    $0x68,%esp
	assert(n > 0);
c01039ec:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01039f0:	75 24                	jne    c0103a16 <default_free_pages+0x30>
c01039f2:	c7 44 24 0c d0 d2 10 	movl   $0xc010d2d0,0xc(%esp)
c01039f9:	c0 
c01039fa:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0103a01:	c0 
c0103a02:	c7 44 24 04 81 00 00 	movl   $0x81,0x4(%esp)
c0103a09:	00 
c0103a0a:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0103a11:	e8 be d3 ff ff       	call   c0100dd4 <__panic>
	assert(PageReserved(base));
c0103a16:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a19:	83 c0 04             	add    $0x4,%eax
c0103a1c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0103a23:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103a26:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103a29:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103a2c:	0f a3 10             	bt     %edx,(%eax)
c0103a2f:	19 c0                	sbb    %eax,%eax
c0103a31:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return oldbit != 0;
c0103a34:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0103a38:	0f 95 c0             	setne  %al
c0103a3b:	0f b6 c0             	movzbl %al,%eax
c0103a3e:	85 c0                	test   %eax,%eax
c0103a40:	75 24                	jne    c0103a66 <default_free_pages+0x80>
c0103a42:	c7 44 24 0c 11 d3 10 	movl   $0xc010d311,0xc(%esp)
c0103a49:	c0 
c0103a4a:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0103a51:	c0 
c0103a52:	c7 44 24 04 82 00 00 	movl   $0x82,0x4(%esp)
c0103a59:	00 
c0103a5a:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0103a61:	e8 6e d3 ff ff       	call   c0100dd4 <__panic>
	list_entry_t *le = &free_list;
c0103a66:	c7 45 f4 7c 2e 1b c0 	movl   $0xc01b2e7c,-0xc(%ebp)
	struct Page* p = NULL;
c0103a6d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	while ((le = list_next(le)) != &free_list)
c0103a74:	eb 13                	jmp    c0103a89 <default_free_pages+0xa3>
	{
		p = le2page(le, page_link);
c0103a76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a79:	83 e8 0c             	sub    $0xc,%eax
c0103a7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if(p > base)
c0103a7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a82:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103a85:	76 02                	jbe    c0103a89 <default_free_pages+0xa3>
			break;
c0103a87:	eb 18                	jmp    c0103aa1 <default_free_pages+0xbb>
c0103a89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a8c:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103a8f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103a92:	8b 40 04             	mov    0x4(%eax),%eax
default_free_pages(struct Page *base, size_t n) {
	assert(n > 0);
	assert(PageReserved(base));
	list_entry_t *le = &free_list;
	struct Page* p = NULL;
	while ((le = list_next(le)) != &free_list)
c0103a95:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103a98:	81 7d f4 7c 2e 1b c0 	cmpl   $0xc01b2e7c,-0xc(%ebp)
c0103a9f:	75 d5                	jne    c0103a76 <default_free_pages+0x90>
		p = le2page(le, page_link);
		if(p > base)
			break;
	}
	int i;
	for(i = 0;i<n;i++)
c0103aa1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0103aa8:	eb 55                	jmp    c0103aff <default_free_pages+0x119>
	{
		list_add_before(le, &((base + i)->page_link));
c0103aaa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103aad:	c1 e0 05             	shl    $0x5,%eax
c0103ab0:	89 c2                	mov    %eax,%edx
c0103ab2:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ab5:	01 d0                	add    %edx,%eax
c0103ab7:	8d 50 0c             	lea    0xc(%eax),%edx
c0103aba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103abd:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0103ac0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0103ac3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103ac6:	8b 00                	mov    (%eax),%eax
c0103ac8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103acb:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0103ace:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0103ad1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103ad4:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103ad7:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103ada:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103add:	89 10                	mov    %edx,(%eax)
c0103adf:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103ae2:	8b 10                	mov    (%eax),%edx
c0103ae4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103ae7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103aea:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103aed:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103af0:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103af3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103af6:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103af9:	89 10                	mov    %edx,(%eax)
		p = le2page(le, page_link);
		if(p > base)
			break;
	}
	int i;
	for(i = 0;i<n;i++)
c0103afb:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0103aff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b02:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103b05:	72 a3                	jb     c0103aaa <default_free_pages+0xc4>
	{
		list_add_before(le, &((base + i)->page_link));
	}
	base->flags = 0;
c0103b07:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b0a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	ClearPageProperty(base);
c0103b11:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b14:	83 c0 04             	add    $0x4,%eax
c0103b17:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c0103b1e:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103b21:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0103b24:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0103b27:	0f b3 10             	btr    %edx,(%eax)
	SetPageProperty(base);
c0103b2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b2d:	83 c0 04             	add    $0x4,%eax
c0103b30:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
c0103b37:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103b3a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103b3d:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0103b40:	0f ab 10             	bts    %edx,(%eax)
	set_page_ref(base, 0);
c0103b43:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103b4a:	00 
c0103b4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b4e:	89 04 24             	mov    %eax,(%esp)
c0103b51:	e8 79 fb ff ff       	call   c01036cf <set_page_ref>
	base->property = n;
c0103b56:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b59:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103b5c:	89 50 08             	mov    %edx,0x8(%eax)

	p = le2page(le, page_link);
c0103b5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b62:	83 e8 0c             	sub    $0xc,%eax
c0103b65:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(base + n == p)
c0103b68:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103b6b:	c1 e0 05             	shl    $0x5,%eax
c0103b6e:	89 c2                	mov    %eax,%edx
c0103b70:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b73:	01 d0                	add    %edx,%eax
c0103b75:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103b78:	75 1b                	jne    c0103b95 <default_free_pages+0x1af>
	{
		base->property = n + p->property;
c0103b7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b7d:	8b 50 08             	mov    0x8(%eax),%edx
c0103b80:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103b83:	01 c2                	add    %eax,%edx
c0103b85:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b88:	89 50 08             	mov    %edx,0x8(%eax)
		p->property = 0;
c0103b8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b8e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	}
	le = list_prev(&(base->page_link));
c0103b95:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b98:	83 c0 0c             	add    $0xc,%eax
c0103b9b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0103b9e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103ba1:	8b 00                	mov    (%eax),%eax
c0103ba3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	p = le2page(le, page_link);
c0103ba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ba9:	83 e8 0c             	sub    $0xc,%eax
c0103bac:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//below need to change
	if(le != &free_list && base - 1 == p)
c0103baf:	81 7d f4 7c 2e 1b c0 	cmpl   $0xc01b2e7c,-0xc(%ebp)
c0103bb6:	74 57                	je     c0103c0f <default_free_pages+0x229>
c0103bb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bbb:	83 e8 20             	sub    $0x20,%eax
c0103bbe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103bc1:	75 4c                	jne    c0103c0f <default_free_pages+0x229>
	{
	  while(le!=&free_list){
c0103bc3:	eb 41                	jmp    c0103c06 <default_free_pages+0x220>
		if(p->property){
c0103bc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103bc8:	8b 40 08             	mov    0x8(%eax),%eax
c0103bcb:	85 c0                	test   %eax,%eax
c0103bcd:	74 20                	je     c0103bef <default_free_pages+0x209>
		  p->property += base->property;
c0103bcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103bd2:	8b 50 08             	mov    0x8(%eax),%edx
c0103bd5:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bd8:	8b 40 08             	mov    0x8(%eax),%eax
c0103bdb:	01 c2                	add    %eax,%edx
c0103bdd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103be0:	89 50 08             	mov    %edx,0x8(%eax)
		  base->property = 0;
c0103be3:	8b 45 08             	mov    0x8(%ebp),%eax
c0103be6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
		  break;
c0103bed:	eb 20                	jmp    c0103c0f <default_free_pages+0x229>
c0103bef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bf2:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0103bf5:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0103bf8:	8b 00                	mov    (%eax),%eax
		}
		le = list_prev(le);
c0103bfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
		p = le2page(le,page_link);
c0103bfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c00:	83 e8 0c             	sub    $0xc,%eax
c0103c03:	89 45 f0             	mov    %eax,-0x10(%ebp)
	le = list_prev(&(base->page_link));
	p = le2page(le, page_link);
	//below need to change
	if(le != &free_list && base - 1 == p)
	{
	  while(le!=&free_list){
c0103c06:	81 7d f4 7c 2e 1b c0 	cmpl   $0xc01b2e7c,-0xc(%ebp)
c0103c0d:	75 b6                	jne    c0103bc5 <default_free_pages+0x1df>
		}
		le = list_prev(le);
		p = le2page(le,page_link);
	  }
	}
	nr_free += n;
c0103c0f:	8b 15 84 2e 1b c0    	mov    0xc01b2e84,%edx
c0103c15:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103c18:	01 d0                	add    %edx,%eax
c0103c1a:	a3 84 2e 1b c0       	mov    %eax,0xc01b2e84
}
c0103c1f:	c9                   	leave  
c0103c20:	c3                   	ret    

c0103c21 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0103c21:	55                   	push   %ebp
c0103c22:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103c24:	a1 84 2e 1b c0       	mov    0xc01b2e84,%eax
}
c0103c29:	5d                   	pop    %ebp
c0103c2a:	c3                   	ret    

c0103c2b <basic_check>:

static void
basic_check(void) {
c0103c2b:	55                   	push   %ebp
c0103c2c:	89 e5                	mov    %esp,%ebp
c0103c2e:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103c31:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103c38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c41:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103c44:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103c4b:	e8 dc 15 00 00       	call   c010522c <alloc_pages>
c0103c50:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103c53:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103c57:	75 24                	jne    c0103c7d <basic_check+0x52>
c0103c59:	c7 44 24 0c 24 d3 10 	movl   $0xc010d324,0xc(%esp)
c0103c60:	c0 
c0103c61:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0103c68:	c0 
c0103c69:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c0103c70:	00 
c0103c71:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0103c78:	e8 57 d1 ff ff       	call   c0100dd4 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103c7d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103c84:	e8 a3 15 00 00       	call   c010522c <alloc_pages>
c0103c89:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103c8c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103c90:	75 24                	jne    c0103cb6 <basic_check+0x8b>
c0103c92:	c7 44 24 0c 40 d3 10 	movl   $0xc010d340,0xc(%esp)
c0103c99:	c0 
c0103c9a:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0103ca1:	c0 
c0103ca2:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c0103ca9:	00 
c0103caa:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0103cb1:	e8 1e d1 ff ff       	call   c0100dd4 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103cb6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103cbd:	e8 6a 15 00 00       	call   c010522c <alloc_pages>
c0103cc2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103cc5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103cc9:	75 24                	jne    c0103cef <basic_check+0xc4>
c0103ccb:	c7 44 24 0c 5c d3 10 	movl   $0xc010d35c,0xc(%esp)
c0103cd2:	c0 
c0103cd3:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0103cda:	c0 
c0103cdb:	c7 44 24 04 b9 00 00 	movl   $0xb9,0x4(%esp)
c0103ce2:	00 
c0103ce3:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0103cea:	e8 e5 d0 ff ff       	call   c0100dd4 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103cef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103cf2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103cf5:	74 10                	je     c0103d07 <basic_check+0xdc>
c0103cf7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103cfa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103cfd:	74 08                	je     c0103d07 <basic_check+0xdc>
c0103cff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103d02:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103d05:	75 24                	jne    c0103d2b <basic_check+0x100>
c0103d07:	c7 44 24 0c 78 d3 10 	movl   $0xc010d378,0xc(%esp)
c0103d0e:	c0 
c0103d0f:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0103d16:	c0 
c0103d17:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c0103d1e:	00 
c0103d1f:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0103d26:	e8 a9 d0 ff ff       	call   c0100dd4 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103d2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103d2e:	89 04 24             	mov    %eax,(%esp)
c0103d31:	e8 8f f9 ff ff       	call   c01036c5 <page_ref>
c0103d36:	85 c0                	test   %eax,%eax
c0103d38:	75 1e                	jne    c0103d58 <basic_check+0x12d>
c0103d3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103d3d:	89 04 24             	mov    %eax,(%esp)
c0103d40:	e8 80 f9 ff ff       	call   c01036c5 <page_ref>
c0103d45:	85 c0                	test   %eax,%eax
c0103d47:	75 0f                	jne    c0103d58 <basic_check+0x12d>
c0103d49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d4c:	89 04 24             	mov    %eax,(%esp)
c0103d4f:	e8 71 f9 ff ff       	call   c01036c5 <page_ref>
c0103d54:	85 c0                	test   %eax,%eax
c0103d56:	74 24                	je     c0103d7c <basic_check+0x151>
c0103d58:	c7 44 24 0c 9c d3 10 	movl   $0xc010d39c,0xc(%esp)
c0103d5f:	c0 
c0103d60:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0103d67:	c0 
c0103d68:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0103d6f:	00 
c0103d70:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0103d77:	e8 58 d0 ff ff       	call   c0100dd4 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103d7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103d7f:	89 04 24             	mov    %eax,(%esp)
c0103d82:	e8 28 f9 ff ff       	call   c01036af <page2pa>
c0103d87:	8b 15 80 0d 1b c0    	mov    0xc01b0d80,%edx
c0103d8d:	c1 e2 0c             	shl    $0xc,%edx
c0103d90:	39 d0                	cmp    %edx,%eax
c0103d92:	72 24                	jb     c0103db8 <basic_check+0x18d>
c0103d94:	c7 44 24 0c d8 d3 10 	movl   $0xc010d3d8,0xc(%esp)
c0103d9b:	c0 
c0103d9c:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0103da3:	c0 
c0103da4:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c0103dab:	00 
c0103dac:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0103db3:	e8 1c d0 ff ff       	call   c0100dd4 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103db8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103dbb:	89 04 24             	mov    %eax,(%esp)
c0103dbe:	e8 ec f8 ff ff       	call   c01036af <page2pa>
c0103dc3:	8b 15 80 0d 1b c0    	mov    0xc01b0d80,%edx
c0103dc9:	c1 e2 0c             	shl    $0xc,%edx
c0103dcc:	39 d0                	cmp    %edx,%eax
c0103dce:	72 24                	jb     c0103df4 <basic_check+0x1c9>
c0103dd0:	c7 44 24 0c f5 d3 10 	movl   $0xc010d3f5,0xc(%esp)
c0103dd7:	c0 
c0103dd8:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0103ddf:	c0 
c0103de0:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
c0103de7:	00 
c0103de8:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0103def:	e8 e0 cf ff ff       	call   c0100dd4 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103df4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103df7:	89 04 24             	mov    %eax,(%esp)
c0103dfa:	e8 b0 f8 ff ff       	call   c01036af <page2pa>
c0103dff:	8b 15 80 0d 1b c0    	mov    0xc01b0d80,%edx
c0103e05:	c1 e2 0c             	shl    $0xc,%edx
c0103e08:	39 d0                	cmp    %edx,%eax
c0103e0a:	72 24                	jb     c0103e30 <basic_check+0x205>
c0103e0c:	c7 44 24 0c 12 d4 10 	movl   $0xc010d412,0xc(%esp)
c0103e13:	c0 
c0103e14:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0103e1b:	c0 
c0103e1c:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c0103e23:	00 
c0103e24:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0103e2b:	e8 a4 cf ff ff       	call   c0100dd4 <__panic>

    list_entry_t free_list_store = free_list;
c0103e30:	a1 7c 2e 1b c0       	mov    0xc01b2e7c,%eax
c0103e35:	8b 15 80 2e 1b c0    	mov    0xc01b2e80,%edx
c0103e3b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103e3e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103e41:	c7 45 e0 7c 2e 1b c0 	movl   $0xc01b2e7c,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103e48:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103e4b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103e4e:	89 50 04             	mov    %edx,0x4(%eax)
c0103e51:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103e54:	8b 50 04             	mov    0x4(%eax),%edx
c0103e57:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103e5a:	89 10                	mov    %edx,(%eax)
c0103e5c:	c7 45 dc 7c 2e 1b c0 	movl   $0xc01b2e7c,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103e63:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103e66:	8b 40 04             	mov    0x4(%eax),%eax
c0103e69:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0103e6c:	0f 94 c0             	sete   %al
c0103e6f:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103e72:	85 c0                	test   %eax,%eax
c0103e74:	75 24                	jne    c0103e9a <basic_check+0x26f>
c0103e76:	c7 44 24 0c 2f d4 10 	movl   $0xc010d42f,0xc(%esp)
c0103e7d:	c0 
c0103e7e:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0103e85:	c0 
c0103e86:	c7 44 24 04 c4 00 00 	movl   $0xc4,0x4(%esp)
c0103e8d:	00 
c0103e8e:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0103e95:	e8 3a cf ff ff       	call   c0100dd4 <__panic>

    unsigned int nr_free_store = nr_free;
c0103e9a:	a1 84 2e 1b c0       	mov    0xc01b2e84,%eax
c0103e9f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103ea2:	c7 05 84 2e 1b c0 00 	movl   $0x0,0xc01b2e84
c0103ea9:	00 00 00 

    assert(alloc_page() == NULL);
c0103eac:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103eb3:	e8 74 13 00 00       	call   c010522c <alloc_pages>
c0103eb8:	85 c0                	test   %eax,%eax
c0103eba:	74 24                	je     c0103ee0 <basic_check+0x2b5>
c0103ebc:	c7 44 24 0c 46 d4 10 	movl   $0xc010d446,0xc(%esp)
c0103ec3:	c0 
c0103ec4:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0103ecb:	c0 
c0103ecc:	c7 44 24 04 c9 00 00 	movl   $0xc9,0x4(%esp)
c0103ed3:	00 
c0103ed4:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0103edb:	e8 f4 ce ff ff       	call   c0100dd4 <__panic>

    free_page(p0);
c0103ee0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103ee7:	00 
c0103ee8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103eeb:	89 04 24             	mov    %eax,(%esp)
c0103eee:	e8 a4 13 00 00       	call   c0105297 <free_pages>
    free_page(p1);
c0103ef3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103efa:	00 
c0103efb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103efe:	89 04 24             	mov    %eax,(%esp)
c0103f01:	e8 91 13 00 00       	call   c0105297 <free_pages>
    free_page(p2);
c0103f06:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f0d:	00 
c0103f0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f11:	89 04 24             	mov    %eax,(%esp)
c0103f14:	e8 7e 13 00 00       	call   c0105297 <free_pages>
    assert(nr_free == 3);
c0103f19:	a1 84 2e 1b c0       	mov    0xc01b2e84,%eax
c0103f1e:	83 f8 03             	cmp    $0x3,%eax
c0103f21:	74 24                	je     c0103f47 <basic_check+0x31c>
c0103f23:	c7 44 24 0c 5b d4 10 	movl   $0xc010d45b,0xc(%esp)
c0103f2a:	c0 
c0103f2b:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0103f32:	c0 
c0103f33:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0103f3a:	00 
c0103f3b:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0103f42:	e8 8d ce ff ff       	call   c0100dd4 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103f47:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f4e:	e8 d9 12 00 00       	call   c010522c <alloc_pages>
c0103f53:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103f56:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103f5a:	75 24                	jne    c0103f80 <basic_check+0x355>
c0103f5c:	c7 44 24 0c 24 d3 10 	movl   $0xc010d324,0xc(%esp)
c0103f63:	c0 
c0103f64:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0103f6b:	c0 
c0103f6c:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0103f73:	00 
c0103f74:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0103f7b:	e8 54 ce ff ff       	call   c0100dd4 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103f80:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f87:	e8 a0 12 00 00       	call   c010522c <alloc_pages>
c0103f8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103f8f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103f93:	75 24                	jne    c0103fb9 <basic_check+0x38e>
c0103f95:	c7 44 24 0c 40 d3 10 	movl   $0xc010d340,0xc(%esp)
c0103f9c:	c0 
c0103f9d:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0103fa4:	c0 
c0103fa5:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c0103fac:	00 
c0103fad:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0103fb4:	e8 1b ce ff ff       	call   c0100dd4 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103fb9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103fc0:	e8 67 12 00 00       	call   c010522c <alloc_pages>
c0103fc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103fc8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103fcc:	75 24                	jne    c0103ff2 <basic_check+0x3c7>
c0103fce:	c7 44 24 0c 5c d3 10 	movl   $0xc010d35c,0xc(%esp)
c0103fd5:	c0 
c0103fd6:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0103fdd:	c0 
c0103fde:	c7 44 24 04 d2 00 00 	movl   $0xd2,0x4(%esp)
c0103fe5:	00 
c0103fe6:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0103fed:	e8 e2 cd ff ff       	call   c0100dd4 <__panic>

    assert(alloc_page() == NULL);
c0103ff2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ff9:	e8 2e 12 00 00       	call   c010522c <alloc_pages>
c0103ffe:	85 c0                	test   %eax,%eax
c0104000:	74 24                	je     c0104026 <basic_check+0x3fb>
c0104002:	c7 44 24 0c 46 d4 10 	movl   $0xc010d446,0xc(%esp)
c0104009:	c0 
c010400a:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0104011:	c0 
c0104012:	c7 44 24 04 d4 00 00 	movl   $0xd4,0x4(%esp)
c0104019:	00 
c010401a:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0104021:	e8 ae cd ff ff       	call   c0100dd4 <__panic>

    free_page(p0);
c0104026:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010402d:	00 
c010402e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104031:	89 04 24             	mov    %eax,(%esp)
c0104034:	e8 5e 12 00 00       	call   c0105297 <free_pages>
c0104039:	c7 45 d8 7c 2e 1b c0 	movl   $0xc01b2e7c,-0x28(%ebp)
c0104040:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104043:	8b 40 04             	mov    0x4(%eax),%eax
c0104046:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0104049:	0f 94 c0             	sete   %al
c010404c:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c010404f:	85 c0                	test   %eax,%eax
c0104051:	74 24                	je     c0104077 <basic_check+0x44c>
c0104053:	c7 44 24 0c 68 d4 10 	movl   $0xc010d468,0xc(%esp)
c010405a:	c0 
c010405b:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0104062:	c0 
c0104063:	c7 44 24 04 d7 00 00 	movl   $0xd7,0x4(%esp)
c010406a:	00 
c010406b:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0104072:	e8 5d cd ff ff       	call   c0100dd4 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0104077:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010407e:	e8 a9 11 00 00       	call   c010522c <alloc_pages>
c0104083:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104086:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104089:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010408c:	74 24                	je     c01040b2 <basic_check+0x487>
c010408e:	c7 44 24 0c 80 d4 10 	movl   $0xc010d480,0xc(%esp)
c0104095:	c0 
c0104096:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c010409d:	c0 
c010409e:	c7 44 24 04 da 00 00 	movl   $0xda,0x4(%esp)
c01040a5:	00 
c01040a6:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c01040ad:	e8 22 cd ff ff       	call   c0100dd4 <__panic>
    assert(alloc_page() == NULL);
c01040b2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01040b9:	e8 6e 11 00 00       	call   c010522c <alloc_pages>
c01040be:	85 c0                	test   %eax,%eax
c01040c0:	74 24                	je     c01040e6 <basic_check+0x4bb>
c01040c2:	c7 44 24 0c 46 d4 10 	movl   $0xc010d446,0xc(%esp)
c01040c9:	c0 
c01040ca:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c01040d1:	c0 
c01040d2:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c01040d9:	00 
c01040da:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c01040e1:	e8 ee cc ff ff       	call   c0100dd4 <__panic>

    assert(nr_free == 0);
c01040e6:	a1 84 2e 1b c0       	mov    0xc01b2e84,%eax
c01040eb:	85 c0                	test   %eax,%eax
c01040ed:	74 24                	je     c0104113 <basic_check+0x4e8>
c01040ef:	c7 44 24 0c 99 d4 10 	movl   $0xc010d499,0xc(%esp)
c01040f6:	c0 
c01040f7:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c01040fe:	c0 
c01040ff:	c7 44 24 04 dd 00 00 	movl   $0xdd,0x4(%esp)
c0104106:	00 
c0104107:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c010410e:	e8 c1 cc ff ff       	call   c0100dd4 <__panic>
    free_list = free_list_store;
c0104113:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104116:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104119:	a3 7c 2e 1b c0       	mov    %eax,0xc01b2e7c
c010411e:	89 15 80 2e 1b c0    	mov    %edx,0xc01b2e80
    nr_free = nr_free_store;
c0104124:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104127:	a3 84 2e 1b c0       	mov    %eax,0xc01b2e84

    free_page(p);
c010412c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104133:	00 
c0104134:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104137:	89 04 24             	mov    %eax,(%esp)
c010413a:	e8 58 11 00 00       	call   c0105297 <free_pages>
    free_page(p1);
c010413f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104146:	00 
c0104147:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010414a:	89 04 24             	mov    %eax,(%esp)
c010414d:	e8 45 11 00 00       	call   c0105297 <free_pages>
    free_page(p2);
c0104152:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104159:	00 
c010415a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010415d:	89 04 24             	mov    %eax,(%esp)
c0104160:	e8 32 11 00 00       	call   c0105297 <free_pages>
}
c0104165:	c9                   	leave  
c0104166:	c3                   	ret    

c0104167 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0104167:	55                   	push   %ebp
c0104168:	89 e5                	mov    %esp,%ebp
c010416a:	53                   	push   %ebx
c010416b:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0104171:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104178:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c010417f:	c7 45 ec 7c 2e 1b c0 	movl   $0xc01b2e7c,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104186:	eb 6b                	jmp    c01041f3 <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c0104188:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010418b:	83 e8 0c             	sub    $0xc,%eax
c010418e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0104191:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104194:	83 c0 04             	add    $0x4,%eax
c0104197:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c010419e:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01041a1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01041a4:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01041a7:	0f a3 10             	bt     %edx,(%eax)
c01041aa:	19 c0                	sbb    %eax,%eax
c01041ac:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c01041af:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01041b3:	0f 95 c0             	setne  %al
c01041b6:	0f b6 c0             	movzbl %al,%eax
c01041b9:	85 c0                	test   %eax,%eax
c01041bb:	75 24                	jne    c01041e1 <default_check+0x7a>
c01041bd:	c7 44 24 0c a6 d4 10 	movl   $0xc010d4a6,0xc(%esp)
c01041c4:	c0 
c01041c5:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c01041cc:	c0 
c01041cd:	c7 44 24 04 ee 00 00 	movl   $0xee,0x4(%esp)
c01041d4:	00 
c01041d5:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c01041dc:	e8 f3 cb ff ff       	call   c0100dd4 <__panic>
        count ++, total += p->property;
c01041e1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01041e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01041e8:	8b 50 08             	mov    0x8(%eax),%edx
c01041eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01041ee:	01 d0                	add    %edx,%eax
c01041f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01041f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01041f6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01041f9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01041fc:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01041ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104202:	81 7d ec 7c 2e 1b c0 	cmpl   $0xc01b2e7c,-0x14(%ebp)
c0104209:	0f 85 79 ff ff ff    	jne    c0104188 <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c010420f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0104212:	e8 b2 10 00 00       	call   c01052c9 <nr_free_pages>
c0104217:	39 c3                	cmp    %eax,%ebx
c0104219:	74 24                	je     c010423f <default_check+0xd8>
c010421b:	c7 44 24 0c b6 d4 10 	movl   $0xc010d4b6,0xc(%esp)
c0104222:	c0 
c0104223:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c010422a:	c0 
c010422b:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
c0104232:	00 
c0104233:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c010423a:	e8 95 cb ff ff       	call   c0100dd4 <__panic>

    basic_check();
c010423f:	e8 e7 f9 ff ff       	call   c0103c2b <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0104244:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010424b:	e8 dc 0f 00 00       	call   c010522c <alloc_pages>
c0104250:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c0104253:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104257:	75 24                	jne    c010427d <default_check+0x116>
c0104259:	c7 44 24 0c cf d4 10 	movl   $0xc010d4cf,0xc(%esp)
c0104260:	c0 
c0104261:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0104268:	c0 
c0104269:	c7 44 24 04 f6 00 00 	movl   $0xf6,0x4(%esp)
c0104270:	00 
c0104271:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0104278:	e8 57 cb ff ff       	call   c0100dd4 <__panic>
    assert(!PageProperty(p0));
c010427d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104280:	83 c0 04             	add    $0x4,%eax
c0104283:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c010428a:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010428d:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0104290:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104293:	0f a3 10             	bt     %edx,(%eax)
c0104296:	19 c0                	sbb    %eax,%eax
c0104298:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c010429b:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010429f:	0f 95 c0             	setne  %al
c01042a2:	0f b6 c0             	movzbl %al,%eax
c01042a5:	85 c0                	test   %eax,%eax
c01042a7:	74 24                	je     c01042cd <default_check+0x166>
c01042a9:	c7 44 24 0c da d4 10 	movl   $0xc010d4da,0xc(%esp)
c01042b0:	c0 
c01042b1:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c01042b8:	c0 
c01042b9:	c7 44 24 04 f7 00 00 	movl   $0xf7,0x4(%esp)
c01042c0:	00 
c01042c1:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c01042c8:	e8 07 cb ff ff       	call   c0100dd4 <__panic>

    list_entry_t free_list_store = free_list;
c01042cd:	a1 7c 2e 1b c0       	mov    0xc01b2e7c,%eax
c01042d2:	8b 15 80 2e 1b c0    	mov    0xc01b2e80,%edx
c01042d8:	89 45 80             	mov    %eax,-0x80(%ebp)
c01042db:	89 55 84             	mov    %edx,-0x7c(%ebp)
c01042de:	c7 45 b4 7c 2e 1b c0 	movl   $0xc01b2e7c,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01042e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01042e8:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01042eb:	89 50 04             	mov    %edx,0x4(%eax)
c01042ee:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01042f1:	8b 50 04             	mov    0x4(%eax),%edx
c01042f4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01042f7:	89 10                	mov    %edx,(%eax)
c01042f9:	c7 45 b0 7c 2e 1b c0 	movl   $0xc01b2e7c,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0104300:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0104303:	8b 40 04             	mov    0x4(%eax),%eax
c0104306:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c0104309:	0f 94 c0             	sete   %al
c010430c:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c010430f:	85 c0                	test   %eax,%eax
c0104311:	75 24                	jne    c0104337 <default_check+0x1d0>
c0104313:	c7 44 24 0c 2f d4 10 	movl   $0xc010d42f,0xc(%esp)
c010431a:	c0 
c010431b:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0104322:	c0 
c0104323:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c010432a:	00 
c010432b:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0104332:	e8 9d ca ff ff       	call   c0100dd4 <__panic>
    assert(alloc_page() == NULL);
c0104337:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010433e:	e8 e9 0e 00 00       	call   c010522c <alloc_pages>
c0104343:	85 c0                	test   %eax,%eax
c0104345:	74 24                	je     c010436b <default_check+0x204>
c0104347:	c7 44 24 0c 46 d4 10 	movl   $0xc010d446,0xc(%esp)
c010434e:	c0 
c010434f:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0104356:	c0 
c0104357:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c010435e:	00 
c010435f:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0104366:	e8 69 ca ff ff       	call   c0100dd4 <__panic>

    unsigned int nr_free_store = nr_free;
c010436b:	a1 84 2e 1b c0       	mov    0xc01b2e84,%eax
c0104370:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0104373:	c7 05 84 2e 1b c0 00 	movl   $0x0,0xc01b2e84
c010437a:	00 00 00 

    free_pages(p0 + 2, 3);
c010437d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104380:	83 c0 40             	add    $0x40,%eax
c0104383:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c010438a:	00 
c010438b:	89 04 24             	mov    %eax,(%esp)
c010438e:	e8 04 0f 00 00       	call   c0105297 <free_pages>
    assert(alloc_pages(4) == NULL);
c0104393:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010439a:	e8 8d 0e 00 00       	call   c010522c <alloc_pages>
c010439f:	85 c0                	test   %eax,%eax
c01043a1:	74 24                	je     c01043c7 <default_check+0x260>
c01043a3:	c7 44 24 0c ec d4 10 	movl   $0xc010d4ec,0xc(%esp)
c01043aa:	c0 
c01043ab:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c01043b2:	c0 
c01043b3:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c01043ba:	00 
c01043bb:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c01043c2:	e8 0d ca ff ff       	call   c0100dd4 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c01043c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043ca:	83 c0 40             	add    $0x40,%eax
c01043cd:	83 c0 04             	add    $0x4,%eax
c01043d0:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c01043d7:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01043da:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01043dd:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01043e0:	0f a3 10             	bt     %edx,(%eax)
c01043e3:	19 c0                	sbb    %eax,%eax
c01043e5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c01043e8:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c01043ec:	0f 95 c0             	setne  %al
c01043ef:	0f b6 c0             	movzbl %al,%eax
c01043f2:	85 c0                	test   %eax,%eax
c01043f4:	74 0e                	je     c0104404 <default_check+0x29d>
c01043f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043f9:	83 c0 40             	add    $0x40,%eax
c01043fc:	8b 40 08             	mov    0x8(%eax),%eax
c01043ff:	83 f8 03             	cmp    $0x3,%eax
c0104402:	74 24                	je     c0104428 <default_check+0x2c1>
c0104404:	c7 44 24 0c 04 d5 10 	movl   $0xc010d504,0xc(%esp)
c010440b:	c0 
c010440c:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0104413:	c0 
c0104414:	c7 44 24 04 03 01 00 	movl   $0x103,0x4(%esp)
c010441b:	00 
c010441c:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0104423:	e8 ac c9 ff ff       	call   c0100dd4 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0104428:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010442f:	e8 f8 0d 00 00       	call   c010522c <alloc_pages>
c0104434:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0104437:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010443b:	75 24                	jne    c0104461 <default_check+0x2fa>
c010443d:	c7 44 24 0c 30 d5 10 	movl   $0xc010d530,0xc(%esp)
c0104444:	c0 
c0104445:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c010444c:	c0 
c010444d:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c0104454:	00 
c0104455:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c010445c:	e8 73 c9 ff ff       	call   c0100dd4 <__panic>
    assert(alloc_page() == NULL);
c0104461:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104468:	e8 bf 0d 00 00       	call   c010522c <alloc_pages>
c010446d:	85 c0                	test   %eax,%eax
c010446f:	74 24                	je     c0104495 <default_check+0x32e>
c0104471:	c7 44 24 0c 46 d4 10 	movl   $0xc010d446,0xc(%esp)
c0104478:	c0 
c0104479:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0104480:	c0 
c0104481:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
c0104488:	00 
c0104489:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0104490:	e8 3f c9 ff ff       	call   c0100dd4 <__panic>
    assert(p0 + 2 == p1);
c0104495:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104498:	83 c0 40             	add    $0x40,%eax
c010449b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010449e:	74 24                	je     c01044c4 <default_check+0x35d>
c01044a0:	c7 44 24 0c 4e d5 10 	movl   $0xc010d54e,0xc(%esp)
c01044a7:	c0 
c01044a8:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c01044af:	c0 
c01044b0:	c7 44 24 04 06 01 00 	movl   $0x106,0x4(%esp)
c01044b7:	00 
c01044b8:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c01044bf:	e8 10 c9 ff ff       	call   c0100dd4 <__panic>

    p2 = p0 + 1;
c01044c4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044c7:	83 c0 20             	add    $0x20,%eax
c01044ca:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c01044cd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01044d4:	00 
c01044d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044d8:	89 04 24             	mov    %eax,(%esp)
c01044db:	e8 b7 0d 00 00       	call   c0105297 <free_pages>
    free_pages(p1, 3);
c01044e0:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01044e7:	00 
c01044e8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01044eb:	89 04 24             	mov    %eax,(%esp)
c01044ee:	e8 a4 0d 00 00       	call   c0105297 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c01044f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044f6:	83 c0 04             	add    $0x4,%eax
c01044f9:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c0104500:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104503:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0104506:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0104509:	0f a3 10             	bt     %edx,(%eax)
c010450c:	19 c0                	sbb    %eax,%eax
c010450e:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0104511:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0104515:	0f 95 c0             	setne  %al
c0104518:	0f b6 c0             	movzbl %al,%eax
c010451b:	85 c0                	test   %eax,%eax
c010451d:	74 0b                	je     c010452a <default_check+0x3c3>
c010451f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104522:	8b 40 08             	mov    0x8(%eax),%eax
c0104525:	83 f8 01             	cmp    $0x1,%eax
c0104528:	74 24                	je     c010454e <default_check+0x3e7>
c010452a:	c7 44 24 0c 5c d5 10 	movl   $0xc010d55c,0xc(%esp)
c0104531:	c0 
c0104532:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0104539:	c0 
c010453a:	c7 44 24 04 0b 01 00 	movl   $0x10b,0x4(%esp)
c0104541:	00 
c0104542:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0104549:	e8 86 c8 ff ff       	call   c0100dd4 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c010454e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104551:	83 c0 04             	add    $0x4,%eax
c0104554:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c010455b:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010455e:	8b 45 90             	mov    -0x70(%ebp),%eax
c0104561:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0104564:	0f a3 10             	bt     %edx,(%eax)
c0104567:	19 c0                	sbb    %eax,%eax
c0104569:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c010456c:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c0104570:	0f 95 c0             	setne  %al
c0104573:	0f b6 c0             	movzbl %al,%eax
c0104576:	85 c0                	test   %eax,%eax
c0104578:	74 0b                	je     c0104585 <default_check+0x41e>
c010457a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010457d:	8b 40 08             	mov    0x8(%eax),%eax
c0104580:	83 f8 03             	cmp    $0x3,%eax
c0104583:	74 24                	je     c01045a9 <default_check+0x442>
c0104585:	c7 44 24 0c 84 d5 10 	movl   $0xc010d584,0xc(%esp)
c010458c:	c0 
c010458d:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0104594:	c0 
c0104595:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c010459c:	00 
c010459d:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c01045a4:	e8 2b c8 ff ff       	call   c0100dd4 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c01045a9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01045b0:	e8 77 0c 00 00       	call   c010522c <alloc_pages>
c01045b5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01045b8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01045bb:	83 e8 20             	sub    $0x20,%eax
c01045be:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01045c1:	74 24                	je     c01045e7 <default_check+0x480>
c01045c3:	c7 44 24 0c aa d5 10 	movl   $0xc010d5aa,0xc(%esp)
c01045ca:	c0 
c01045cb:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c01045d2:	c0 
c01045d3:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c01045da:	00 
c01045db:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c01045e2:	e8 ed c7 ff ff       	call   c0100dd4 <__panic>
    free_page(p0);
c01045e7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01045ee:	00 
c01045ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01045f2:	89 04 24             	mov    %eax,(%esp)
c01045f5:	e8 9d 0c 00 00       	call   c0105297 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c01045fa:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0104601:	e8 26 0c 00 00       	call   c010522c <alloc_pages>
c0104606:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104609:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010460c:	83 c0 20             	add    $0x20,%eax
c010460f:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0104612:	74 24                	je     c0104638 <default_check+0x4d1>
c0104614:	c7 44 24 0c c8 d5 10 	movl   $0xc010d5c8,0xc(%esp)
c010461b:	c0 
c010461c:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0104623:	c0 
c0104624:	c7 44 24 04 10 01 00 	movl   $0x110,0x4(%esp)
c010462b:	00 
c010462c:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0104633:	e8 9c c7 ff ff       	call   c0100dd4 <__panic>

    free_pages(p0, 2);
c0104638:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010463f:	00 
c0104640:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104643:	89 04 24             	mov    %eax,(%esp)
c0104646:	e8 4c 0c 00 00       	call   c0105297 <free_pages>
    free_page(p2);
c010464b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104652:	00 
c0104653:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104656:	89 04 24             	mov    %eax,(%esp)
c0104659:	e8 39 0c 00 00       	call   c0105297 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c010465e:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104665:	e8 c2 0b 00 00       	call   c010522c <alloc_pages>
c010466a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010466d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104671:	75 24                	jne    c0104697 <default_check+0x530>
c0104673:	c7 44 24 0c e8 d5 10 	movl   $0xc010d5e8,0xc(%esp)
c010467a:	c0 
c010467b:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0104682:	c0 
c0104683:	c7 44 24 04 15 01 00 	movl   $0x115,0x4(%esp)
c010468a:	00 
c010468b:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0104692:	e8 3d c7 ff ff       	call   c0100dd4 <__panic>
    assert(alloc_page() == NULL);
c0104697:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010469e:	e8 89 0b 00 00       	call   c010522c <alloc_pages>
c01046a3:	85 c0                	test   %eax,%eax
c01046a5:	74 24                	je     c01046cb <default_check+0x564>
c01046a7:	c7 44 24 0c 46 d4 10 	movl   $0xc010d446,0xc(%esp)
c01046ae:	c0 
c01046af:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c01046b6:	c0 
c01046b7:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
c01046be:	00 
c01046bf:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c01046c6:	e8 09 c7 ff ff       	call   c0100dd4 <__panic>

    assert(nr_free == 0);
c01046cb:	a1 84 2e 1b c0       	mov    0xc01b2e84,%eax
c01046d0:	85 c0                	test   %eax,%eax
c01046d2:	74 24                	je     c01046f8 <default_check+0x591>
c01046d4:	c7 44 24 0c 99 d4 10 	movl   $0xc010d499,0xc(%esp)
c01046db:	c0 
c01046dc:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c01046e3:	c0 
c01046e4:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c01046eb:	00 
c01046ec:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c01046f3:	e8 dc c6 ff ff       	call   c0100dd4 <__panic>
    nr_free = nr_free_store;
c01046f8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01046fb:	a3 84 2e 1b c0       	mov    %eax,0xc01b2e84

    free_list = free_list_store;
c0104700:	8b 45 80             	mov    -0x80(%ebp),%eax
c0104703:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0104706:	a3 7c 2e 1b c0       	mov    %eax,0xc01b2e7c
c010470b:	89 15 80 2e 1b c0    	mov    %edx,0xc01b2e80
    free_pages(p0, 5);
c0104711:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0104718:	00 
c0104719:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010471c:	89 04 24             	mov    %eax,(%esp)
c010471f:	e8 73 0b 00 00       	call   c0105297 <free_pages>

    le = &free_list;
c0104724:	c7 45 ec 7c 2e 1b c0 	movl   $0xc01b2e7c,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010472b:	eb 1d                	jmp    c010474a <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c010472d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104730:	83 e8 0c             	sub    $0xc,%eax
c0104733:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c0104736:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010473a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010473d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104740:	8b 40 08             	mov    0x8(%eax),%eax
c0104743:	29 c2                	sub    %eax,%edx
c0104745:	89 d0                	mov    %edx,%eax
c0104747:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010474a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010474d:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104750:	8b 45 88             	mov    -0x78(%ebp),%eax
c0104753:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104756:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104759:	81 7d ec 7c 2e 1b c0 	cmpl   $0xc01b2e7c,-0x14(%ebp)
c0104760:	75 cb                	jne    c010472d <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0104762:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104766:	74 24                	je     c010478c <default_check+0x625>
c0104768:	c7 44 24 0c 06 d6 10 	movl   $0xc010d606,0xc(%esp)
c010476f:	c0 
c0104770:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c0104777:	c0 
c0104778:	c7 44 24 04 23 01 00 	movl   $0x123,0x4(%esp)
c010477f:	00 
c0104780:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c0104787:	e8 48 c6 ff ff       	call   c0100dd4 <__panic>
    assert(total == 0);
c010478c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104790:	74 24                	je     c01047b6 <default_check+0x64f>
c0104792:	c7 44 24 0c 11 d6 10 	movl   $0xc010d611,0xc(%esp)
c0104799:	c0 
c010479a:	c7 44 24 08 d6 d2 10 	movl   $0xc010d2d6,0x8(%esp)
c01047a1:	c0 
c01047a2:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c01047a9:	00 
c01047aa:	c7 04 24 eb d2 10 c0 	movl   $0xc010d2eb,(%esp)
c01047b1:	e8 1e c6 ff ff       	call   c0100dd4 <__panic>
}
c01047b6:	81 c4 94 00 00 00    	add    $0x94,%esp
c01047bc:	5b                   	pop    %ebx
c01047bd:	5d                   	pop    %ebp
c01047be:	c3                   	ret    

c01047bf <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01047bf:	55                   	push   %ebp
c01047c0:	89 e5                	mov    %esp,%ebp
c01047c2:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01047c5:	9c                   	pushf  
c01047c6:	58                   	pop    %eax
c01047c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01047ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01047cd:	25 00 02 00 00       	and    $0x200,%eax
c01047d2:	85 c0                	test   %eax,%eax
c01047d4:	74 0c                	je     c01047e2 <__intr_save+0x23>
        intr_disable();
c01047d6:	e8 51 d8 ff ff       	call   c010202c <intr_disable>
        return 1;
c01047db:	b8 01 00 00 00       	mov    $0x1,%eax
c01047e0:	eb 05                	jmp    c01047e7 <__intr_save+0x28>
    }
    return 0;
c01047e2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01047e7:	c9                   	leave  
c01047e8:	c3                   	ret    

c01047e9 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01047e9:	55                   	push   %ebp
c01047ea:	89 e5                	mov    %esp,%ebp
c01047ec:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01047ef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01047f3:	74 05                	je     c01047fa <__intr_restore+0x11>
        intr_enable();
c01047f5:	e8 2c d8 ff ff       	call   c0102026 <intr_enable>
    }
}
c01047fa:	c9                   	leave  
c01047fb:	c3                   	ret    

c01047fc <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01047fc:	55                   	push   %ebp
c01047fd:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01047ff:	8b 55 08             	mov    0x8(%ebp),%edx
c0104802:	a1 90 2e 1b c0       	mov    0xc01b2e90,%eax
c0104807:	29 c2                	sub    %eax,%edx
c0104809:	89 d0                	mov    %edx,%eax
c010480b:	c1 f8 05             	sar    $0x5,%eax
}
c010480e:	5d                   	pop    %ebp
c010480f:	c3                   	ret    

c0104810 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104810:	55                   	push   %ebp
c0104811:	89 e5                	mov    %esp,%ebp
c0104813:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104816:	8b 45 08             	mov    0x8(%ebp),%eax
c0104819:	89 04 24             	mov    %eax,(%esp)
c010481c:	e8 db ff ff ff       	call   c01047fc <page2ppn>
c0104821:	c1 e0 0c             	shl    $0xc,%eax
}
c0104824:	c9                   	leave  
c0104825:	c3                   	ret    

c0104826 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104826:	55                   	push   %ebp
c0104827:	89 e5                	mov    %esp,%ebp
c0104829:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010482c:	8b 45 08             	mov    0x8(%ebp),%eax
c010482f:	c1 e8 0c             	shr    $0xc,%eax
c0104832:	89 c2                	mov    %eax,%edx
c0104834:	a1 80 0d 1b c0       	mov    0xc01b0d80,%eax
c0104839:	39 c2                	cmp    %eax,%edx
c010483b:	72 1c                	jb     c0104859 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010483d:	c7 44 24 08 4c d6 10 	movl   $0xc010d64c,0x8(%esp)
c0104844:	c0 
c0104845:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010484c:	00 
c010484d:	c7 04 24 6b d6 10 c0 	movl   $0xc010d66b,(%esp)
c0104854:	e8 7b c5 ff ff       	call   c0100dd4 <__panic>
    }
    return &pages[PPN(pa)];
c0104859:	a1 90 2e 1b c0       	mov    0xc01b2e90,%eax
c010485e:	8b 55 08             	mov    0x8(%ebp),%edx
c0104861:	c1 ea 0c             	shr    $0xc,%edx
c0104864:	c1 e2 05             	shl    $0x5,%edx
c0104867:	01 d0                	add    %edx,%eax
}
c0104869:	c9                   	leave  
c010486a:	c3                   	ret    

c010486b <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010486b:	55                   	push   %ebp
c010486c:	89 e5                	mov    %esp,%ebp
c010486e:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104871:	8b 45 08             	mov    0x8(%ebp),%eax
c0104874:	89 04 24             	mov    %eax,(%esp)
c0104877:	e8 94 ff ff ff       	call   c0104810 <page2pa>
c010487c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010487f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104882:	c1 e8 0c             	shr    $0xc,%eax
c0104885:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104888:	a1 80 0d 1b c0       	mov    0xc01b0d80,%eax
c010488d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104890:	72 23                	jb     c01048b5 <page2kva+0x4a>
c0104892:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104895:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104899:	c7 44 24 08 7c d6 10 	movl   $0xc010d67c,0x8(%esp)
c01048a0:	c0 
c01048a1:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c01048a8:	00 
c01048a9:	c7 04 24 6b d6 10 c0 	movl   $0xc010d66b,(%esp)
c01048b0:	e8 1f c5 ff ff       	call   c0100dd4 <__panic>
c01048b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048b8:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01048bd:	c9                   	leave  
c01048be:	c3                   	ret    

c01048bf <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c01048bf:	55                   	push   %ebp
c01048c0:	89 e5                	mov    %esp,%ebp
c01048c2:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c01048c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01048c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01048cb:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01048d2:	77 23                	ja     c01048f7 <kva2page+0x38>
c01048d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01048db:	c7 44 24 08 a0 d6 10 	movl   $0xc010d6a0,0x8(%esp)
c01048e2:	c0 
c01048e3:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c01048ea:	00 
c01048eb:	c7 04 24 6b d6 10 c0 	movl   $0xc010d66b,(%esp)
c01048f2:	e8 dd c4 ff ff       	call   c0100dd4 <__panic>
c01048f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048fa:	05 00 00 00 40       	add    $0x40000000,%eax
c01048ff:	89 04 24             	mov    %eax,(%esp)
c0104902:	e8 1f ff ff ff       	call   c0104826 <pa2page>
}
c0104907:	c9                   	leave  
c0104908:	c3                   	ret    

c0104909 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0104909:	55                   	push   %ebp
c010490a:	89 e5                	mov    %esp,%ebp
c010490c:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c010490f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104912:	ba 01 00 00 00       	mov    $0x1,%edx
c0104917:	89 c1                	mov    %eax,%ecx
c0104919:	d3 e2                	shl    %cl,%edx
c010491b:	89 d0                	mov    %edx,%eax
c010491d:	89 04 24             	mov    %eax,(%esp)
c0104920:	e8 07 09 00 00       	call   c010522c <alloc_pages>
c0104925:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0104928:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010492c:	75 07                	jne    c0104935 <__slob_get_free_pages+0x2c>
    return NULL;
c010492e:	b8 00 00 00 00       	mov    $0x0,%eax
c0104933:	eb 0b                	jmp    c0104940 <__slob_get_free_pages+0x37>
  return page2kva(page);
c0104935:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104938:	89 04 24             	mov    %eax,(%esp)
c010493b:	e8 2b ff ff ff       	call   c010486b <page2kva>
}
c0104940:	c9                   	leave  
c0104941:	c3                   	ret    

c0104942 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104942:	55                   	push   %ebp
c0104943:	89 e5                	mov    %esp,%ebp
c0104945:	53                   	push   %ebx
c0104946:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c0104949:	8b 45 0c             	mov    0xc(%ebp),%eax
c010494c:	ba 01 00 00 00       	mov    $0x1,%edx
c0104951:	89 c1                	mov    %eax,%ecx
c0104953:	d3 e2                	shl    %cl,%edx
c0104955:	89 d0                	mov    %edx,%eax
c0104957:	89 c3                	mov    %eax,%ebx
c0104959:	8b 45 08             	mov    0x8(%ebp),%eax
c010495c:	89 04 24             	mov    %eax,(%esp)
c010495f:	e8 5b ff ff ff       	call   c01048bf <kva2page>
c0104964:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0104968:	89 04 24             	mov    %eax,(%esp)
c010496b:	e8 27 09 00 00       	call   c0105297 <free_pages>
}
c0104970:	83 c4 14             	add    $0x14,%esp
c0104973:	5b                   	pop    %ebx
c0104974:	5d                   	pop    %ebp
c0104975:	c3                   	ret    

c0104976 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104976:	55                   	push   %ebp
c0104977:	89 e5                	mov    %esp,%ebp
c0104979:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c010497c:	8b 45 08             	mov    0x8(%ebp),%eax
c010497f:	83 c0 08             	add    $0x8,%eax
c0104982:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0104987:	76 24                	jbe    c01049ad <slob_alloc+0x37>
c0104989:	c7 44 24 0c c4 d6 10 	movl   $0xc010d6c4,0xc(%esp)
c0104990:	c0 
c0104991:	c7 44 24 08 e3 d6 10 	movl   $0xc010d6e3,0x8(%esp)
c0104998:	c0 
c0104999:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01049a0:	00 
c01049a1:	c7 04 24 f8 d6 10 c0 	movl   $0xc010d6f8,(%esp)
c01049a8:	e8 27 c4 ff ff       	call   c0100dd4 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c01049ad:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c01049b4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01049bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01049be:	83 c0 07             	add    $0x7,%eax
c01049c1:	c1 e8 03             	shr    $0x3,%eax
c01049c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c01049c7:	e8 f3 fd ff ff       	call   c01047bf <__intr_save>
c01049cc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c01049cf:	a1 08 ea 12 c0       	mov    0xc012ea08,%eax
c01049d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c01049d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049da:	8b 40 04             	mov    0x4(%eax),%eax
c01049dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c01049e0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01049e4:	74 25                	je     c0104a0b <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c01049e6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01049e9:	8b 45 10             	mov    0x10(%ebp),%eax
c01049ec:	01 d0                	add    %edx,%eax
c01049ee:	8d 50 ff             	lea    -0x1(%eax),%edx
c01049f1:	8b 45 10             	mov    0x10(%ebp),%eax
c01049f4:	f7 d8                	neg    %eax
c01049f6:	21 d0                	and    %edx,%eax
c01049f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c01049fb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01049fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a01:	29 c2                	sub    %eax,%edx
c0104a03:	89 d0                	mov    %edx,%eax
c0104a05:	c1 f8 03             	sar    $0x3,%eax
c0104a08:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0104a0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a0e:	8b 00                	mov    (%eax),%eax
c0104a10:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104a13:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104a16:	01 ca                	add    %ecx,%edx
c0104a18:	39 d0                	cmp    %edx,%eax
c0104a1a:	0f 8c aa 00 00 00    	jl     c0104aca <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c0104a20:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104a24:	74 38                	je     c0104a5e <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c0104a26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a29:	8b 00                	mov    (%eax),%eax
c0104a2b:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0104a2e:	89 c2                	mov    %eax,%edx
c0104a30:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a33:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104a35:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a38:	8b 50 04             	mov    0x4(%eax),%edx
c0104a3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a3e:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104a41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a44:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104a47:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104a4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a4d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104a50:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104a52:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a55:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104a58:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104a5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a61:	8b 00                	mov    (%eax),%eax
c0104a63:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104a66:	75 0e                	jne    c0104a76 <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c0104a68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a6b:	8b 50 04             	mov    0x4(%eax),%edx
c0104a6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a71:	89 50 04             	mov    %edx,0x4(%eax)
c0104a74:	eb 3c                	jmp    c0104ab2 <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c0104a76:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104a79:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104a80:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a83:	01 c2                	add    %eax,%edx
c0104a85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a88:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0104a8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a8e:	8b 40 04             	mov    0x4(%eax),%eax
c0104a91:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104a94:	8b 12                	mov    (%edx),%edx
c0104a96:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0104a99:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0104a9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a9e:	8b 40 04             	mov    0x4(%eax),%eax
c0104aa1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104aa4:	8b 52 04             	mov    0x4(%edx),%edx
c0104aa7:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0104aaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104aad:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104ab0:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0104ab2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ab5:	a3 08 ea 12 c0       	mov    %eax,0xc012ea08
			spin_unlock_irqrestore(&slob_lock, flags);
c0104aba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104abd:	89 04 24             	mov    %eax,(%esp)
c0104ac0:	e8 24 fd ff ff       	call   c01047e9 <__intr_restore>
			return cur;
c0104ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ac8:	eb 7f                	jmp    c0104b49 <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c0104aca:	a1 08 ea 12 c0       	mov    0xc012ea08,%eax
c0104acf:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104ad2:	75 61                	jne    c0104b35 <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c0104ad4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104ad7:	89 04 24             	mov    %eax,(%esp)
c0104ada:	e8 0a fd ff ff       	call   c01047e9 <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0104adf:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104ae6:	75 07                	jne    c0104aef <slob_alloc+0x179>
				return 0;
c0104ae8:	b8 00 00 00 00       	mov    $0x0,%eax
c0104aed:	eb 5a                	jmp    c0104b49 <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0104aef:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104af6:	00 
c0104af7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104afa:	89 04 24             	mov    %eax,(%esp)
c0104afd:	e8 07 fe ff ff       	call   c0104909 <__slob_get_free_pages>
c0104b02:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0104b05:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104b09:	75 07                	jne    c0104b12 <slob_alloc+0x19c>
				return 0;
c0104b0b:	b8 00 00 00 00       	mov    $0x0,%eax
c0104b10:	eb 37                	jmp    c0104b49 <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c0104b12:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0104b19:	00 
c0104b1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b1d:	89 04 24             	mov    %eax,(%esp)
c0104b20:	e8 26 00 00 00       	call   c0104b4b <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0104b25:	e8 95 fc ff ff       	call   c01047bf <__intr_save>
c0104b2a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104b2d:	a1 08 ea 12 c0       	mov    0xc012ea08,%eax
c0104b32:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104b35:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b38:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104b3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b3e:	8b 40 04             	mov    0x4(%eax),%eax
c0104b41:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104b44:	e9 97 fe ff ff       	jmp    c01049e0 <slob_alloc+0x6a>
}
c0104b49:	c9                   	leave  
c0104b4a:	c3                   	ret    

c0104b4b <slob_free>:

static void slob_free(void *block, int size)
{
c0104b4b:	55                   	push   %ebp
c0104b4c:	89 e5                	mov    %esp,%ebp
c0104b4e:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104b51:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b54:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104b57:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104b5b:	75 05                	jne    c0104b62 <slob_free+0x17>
		return;
c0104b5d:	e9 ff 00 00 00       	jmp    c0104c61 <slob_free+0x116>

	if (size)
c0104b62:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104b66:	74 10                	je     c0104b78 <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c0104b68:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104b6b:	83 c0 07             	add    $0x7,%eax
c0104b6e:	c1 e8 03             	shr    $0x3,%eax
c0104b71:	89 c2                	mov    %eax,%edx
c0104b73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b76:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104b78:	e8 42 fc ff ff       	call   c01047bf <__intr_save>
c0104b7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104b80:	a1 08 ea 12 c0       	mov    0xc012ea08,%eax
c0104b85:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104b88:	eb 27                	jmp    c0104bb1 <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104b8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b8d:	8b 40 04             	mov    0x4(%eax),%eax
c0104b90:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104b93:	77 13                	ja     c0104ba8 <slob_free+0x5d>
c0104b95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b98:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104b9b:	77 27                	ja     c0104bc4 <slob_free+0x79>
c0104b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ba0:	8b 40 04             	mov    0x4(%eax),%eax
c0104ba3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104ba6:	77 1c                	ja     c0104bc4 <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104ba8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bab:	8b 40 04             	mov    0x4(%eax),%eax
c0104bae:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104bb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bb4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104bb7:	76 d1                	jbe    c0104b8a <slob_free+0x3f>
c0104bb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bbc:	8b 40 04             	mov    0x4(%eax),%eax
c0104bbf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104bc2:	76 c6                	jbe    c0104b8a <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104bc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bc7:	8b 00                	mov    (%eax),%eax
c0104bc9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104bd0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bd3:	01 c2                	add    %eax,%edx
c0104bd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bd8:	8b 40 04             	mov    0x4(%eax),%eax
c0104bdb:	39 c2                	cmp    %eax,%edx
c0104bdd:	75 25                	jne    c0104c04 <slob_free+0xb9>
		b->units += cur->next->units;
c0104bdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104be2:	8b 10                	mov    (%eax),%edx
c0104be4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104be7:	8b 40 04             	mov    0x4(%eax),%eax
c0104bea:	8b 00                	mov    (%eax),%eax
c0104bec:	01 c2                	add    %eax,%edx
c0104bee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bf1:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104bf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bf6:	8b 40 04             	mov    0x4(%eax),%eax
c0104bf9:	8b 50 04             	mov    0x4(%eax),%edx
c0104bfc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bff:	89 50 04             	mov    %edx,0x4(%eax)
c0104c02:	eb 0c                	jmp    c0104c10 <slob_free+0xc5>
	} else
		b->next = cur->next;
c0104c04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c07:	8b 50 04             	mov    0x4(%eax),%edx
c0104c0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c0d:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104c10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c13:	8b 00                	mov    (%eax),%eax
c0104c15:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104c1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c1f:	01 d0                	add    %edx,%eax
c0104c21:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104c24:	75 1f                	jne    c0104c45 <slob_free+0xfa>
		cur->units += b->units;
c0104c26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c29:	8b 10                	mov    (%eax),%edx
c0104c2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c2e:	8b 00                	mov    (%eax),%eax
c0104c30:	01 c2                	add    %eax,%edx
c0104c32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c35:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104c37:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c3a:	8b 50 04             	mov    0x4(%eax),%edx
c0104c3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c40:	89 50 04             	mov    %edx,0x4(%eax)
c0104c43:	eb 09                	jmp    c0104c4e <slob_free+0x103>
	} else
		cur->next = b;
c0104c45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c48:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c4b:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104c4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c51:	a3 08 ea 12 c0       	mov    %eax,0xc012ea08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104c56:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c59:	89 04 24             	mov    %eax,(%esp)
c0104c5c:	e8 88 fb ff ff       	call   c01047e9 <__intr_restore>
}
c0104c61:	c9                   	leave  
c0104c62:	c3                   	ret    

c0104c63 <slob_init>:



void
slob_init(void) {
c0104c63:	55                   	push   %ebp
c0104c64:	89 e5                	mov    %esp,%ebp
c0104c66:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104c69:	c7 04 24 0a d7 10 c0 	movl   $0xc010d70a,(%esp)
c0104c70:	e8 e3 b6 ff ff       	call   c0100358 <cprintf>
}
c0104c75:	c9                   	leave  
c0104c76:	c3                   	ret    

c0104c77 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104c77:	55                   	push   %ebp
c0104c78:	89 e5                	mov    %esp,%ebp
c0104c7a:	83 ec 18             	sub    $0x18,%esp
    slob_init();
c0104c7d:	e8 e1 ff ff ff       	call   c0104c63 <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104c82:	c7 04 24 1e d7 10 c0 	movl   $0xc010d71e,(%esp)
c0104c89:	e8 ca b6 ff ff       	call   c0100358 <cprintf>
}
c0104c8e:	c9                   	leave  
c0104c8f:	c3                   	ret    

c0104c90 <slob_allocated>:

size_t
slob_allocated(void) {
c0104c90:	55                   	push   %ebp
c0104c91:	89 e5                	mov    %esp,%ebp
  return 0;
c0104c93:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104c98:	5d                   	pop    %ebp
c0104c99:	c3                   	ret    

c0104c9a <kallocated>:

size_t
kallocated(void) {
c0104c9a:	55                   	push   %ebp
c0104c9b:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0104c9d:	e8 ee ff ff ff       	call   c0104c90 <slob_allocated>
}
c0104ca2:	5d                   	pop    %ebp
c0104ca3:	c3                   	ret    

c0104ca4 <find_order>:

static int find_order(int size)
{
c0104ca4:	55                   	push   %ebp
c0104ca5:	89 e5                	mov    %esp,%ebp
c0104ca7:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104caa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104cb1:	eb 07                	jmp    c0104cba <find_order+0x16>
		order++;
c0104cb3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0104cb7:	d1 7d 08             	sarl   0x8(%ebp)
c0104cba:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104cc1:	7f f0                	jg     c0104cb3 <find_order+0xf>
		order++;
	return order;
c0104cc3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104cc6:	c9                   	leave  
c0104cc7:	c3                   	ret    

c0104cc8 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0104cc8:	55                   	push   %ebp
c0104cc9:	89 e5                	mov    %esp,%ebp
c0104ccb:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104cce:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0104cd5:	77 38                	ja     c0104d0f <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0104cd7:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cda:	8d 50 08             	lea    0x8(%eax),%edx
c0104cdd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104ce4:	00 
c0104ce5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104ce8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104cec:	89 14 24             	mov    %edx,(%esp)
c0104cef:	e8 82 fc ff ff       	call   c0104976 <slob_alloc>
c0104cf4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0104cf7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104cfb:	74 08                	je     c0104d05 <__kmalloc+0x3d>
c0104cfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d00:	83 c0 08             	add    $0x8,%eax
c0104d03:	eb 05                	jmp    c0104d0a <__kmalloc+0x42>
c0104d05:	b8 00 00 00 00       	mov    $0x0,%eax
c0104d0a:	e9 a6 00 00 00       	jmp    c0104db5 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0104d0f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104d16:	00 
c0104d17:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104d1a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104d1e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104d25:	e8 4c fc ff ff       	call   c0104976 <slob_alloc>
c0104d2a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0104d2d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104d31:	75 07                	jne    c0104d3a <__kmalloc+0x72>
		return 0;
c0104d33:	b8 00 00 00 00       	mov    $0x0,%eax
c0104d38:	eb 7b                	jmp    c0104db5 <__kmalloc+0xed>

	bb->order = find_order(size);
c0104d3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d3d:	89 04 24             	mov    %eax,(%esp)
c0104d40:	e8 5f ff ff ff       	call   c0104ca4 <find_order>
c0104d45:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104d48:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104d4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d4d:	8b 00                	mov    (%eax),%eax
c0104d4f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104d53:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104d56:	89 04 24             	mov    %eax,(%esp)
c0104d59:	e8 ab fb ff ff       	call   c0104909 <__slob_get_free_pages>
c0104d5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104d61:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104d64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d67:	8b 40 04             	mov    0x4(%eax),%eax
c0104d6a:	85 c0                	test   %eax,%eax
c0104d6c:	74 2f                	je     c0104d9d <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104d6e:	e8 4c fa ff ff       	call   c01047bf <__intr_save>
c0104d73:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104d76:	8b 15 64 0d 1b c0    	mov    0xc01b0d64,%edx
c0104d7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d7f:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104d82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d85:	a3 64 0d 1b c0       	mov    %eax,0xc01b0d64
		spin_unlock_irqrestore(&block_lock, flags);
c0104d8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d8d:	89 04 24             	mov    %eax,(%esp)
c0104d90:	e8 54 fa ff ff       	call   c01047e9 <__intr_restore>
		return bb->pages;
c0104d95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d98:	8b 40 04             	mov    0x4(%eax),%eax
c0104d9b:	eb 18                	jmp    c0104db5 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104d9d:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104da4:	00 
c0104da5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104da8:	89 04 24             	mov    %eax,(%esp)
c0104dab:	e8 9b fd ff ff       	call   c0104b4b <slob_free>
	return 0;
c0104db0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104db5:	c9                   	leave  
c0104db6:	c3                   	ret    

c0104db7 <kmalloc>:

void *
kmalloc(size_t size)
{
c0104db7:	55                   	push   %ebp
c0104db8:	89 e5                	mov    %esp,%ebp
c0104dba:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104dbd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104dc4:	00 
c0104dc5:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dc8:	89 04 24             	mov    %eax,(%esp)
c0104dcb:	e8 f8 fe ff ff       	call   c0104cc8 <__kmalloc>
}
c0104dd0:	c9                   	leave  
c0104dd1:	c3                   	ret    

c0104dd2 <kfree>:


void kfree(void *block)
{
c0104dd2:	55                   	push   %ebp
c0104dd3:	89 e5                	mov    %esp,%ebp
c0104dd5:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104dd8:	c7 45 f0 64 0d 1b c0 	movl   $0xc01b0d64,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104ddf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104de3:	75 05                	jne    c0104dea <kfree+0x18>
		return;
c0104de5:	e9 a2 00 00 00       	jmp    c0104e8c <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104dea:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ded:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104df2:	85 c0                	test   %eax,%eax
c0104df4:	75 7f                	jne    c0104e75 <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104df6:	e8 c4 f9 ff ff       	call   c01047bf <__intr_save>
c0104dfb:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104dfe:	a1 64 0d 1b c0       	mov    0xc01b0d64,%eax
c0104e03:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104e06:	eb 5c                	jmp    c0104e64 <kfree+0x92>
			if (bb->pages == block) {
c0104e08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e0b:	8b 40 04             	mov    0x4(%eax),%eax
c0104e0e:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104e11:	75 3f                	jne    c0104e52 <kfree+0x80>
				*last = bb->next;
c0104e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e16:	8b 50 08             	mov    0x8(%eax),%edx
c0104e19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e1c:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104e1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104e21:	89 04 24             	mov    %eax,(%esp)
c0104e24:	e8 c0 f9 ff ff       	call   c01047e9 <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e2c:	8b 10                	mov    (%eax),%edx
c0104e2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e31:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104e35:	89 04 24             	mov    %eax,(%esp)
c0104e38:	e8 05 fb ff ff       	call   c0104942 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104e3d:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104e44:	00 
c0104e45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e48:	89 04 24             	mov    %eax,(%esp)
c0104e4b:	e8 fb fc ff ff       	call   c0104b4b <slob_free>
				return;
c0104e50:	eb 3a                	jmp    c0104e8c <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104e52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e55:	83 c0 08             	add    $0x8,%eax
c0104e58:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104e5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e5e:	8b 40 08             	mov    0x8(%eax),%eax
c0104e61:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104e64:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104e68:	75 9e                	jne    c0104e08 <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104e6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104e6d:	89 04 24             	mov    %eax,(%esp)
c0104e70:	e8 74 f9 ff ff       	call   c01047e9 <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104e75:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e78:	83 e8 08             	sub    $0x8,%eax
c0104e7b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104e82:	00 
c0104e83:	89 04 24             	mov    %eax,(%esp)
c0104e86:	e8 c0 fc ff ff       	call   c0104b4b <slob_free>
	return;
c0104e8b:	90                   	nop
}
c0104e8c:	c9                   	leave  
c0104e8d:	c3                   	ret    

c0104e8e <ksize>:


unsigned int ksize(const void *block)
{
c0104e8e:	55                   	push   %ebp
c0104e8f:	89 e5                	mov    %esp,%ebp
c0104e91:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104e94:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104e98:	75 07                	jne    c0104ea1 <ksize+0x13>
		return 0;
c0104e9a:	b8 00 00 00 00       	mov    $0x0,%eax
c0104e9f:	eb 6b                	jmp    c0104f0c <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104ea1:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ea4:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104ea9:	85 c0                	test   %eax,%eax
c0104eab:	75 54                	jne    c0104f01 <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c0104ead:	e8 0d f9 ff ff       	call   c01047bf <__intr_save>
c0104eb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104eb5:	a1 64 0d 1b c0       	mov    0xc01b0d64,%eax
c0104eba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ebd:	eb 31                	jmp    c0104ef0 <ksize+0x62>
			if (bb->pages == block) {
c0104ebf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ec2:	8b 40 04             	mov    0x4(%eax),%eax
c0104ec5:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104ec8:	75 1d                	jne    c0104ee7 <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104eca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ecd:	89 04 24             	mov    %eax,(%esp)
c0104ed0:	e8 14 f9 ff ff       	call   c01047e9 <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104ed5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ed8:	8b 00                	mov    (%eax),%eax
c0104eda:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104edf:	89 c1                	mov    %eax,%ecx
c0104ee1:	d3 e2                	shl    %cl,%edx
c0104ee3:	89 d0                	mov    %edx,%eax
c0104ee5:	eb 25                	jmp    c0104f0c <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0104ee7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104eea:	8b 40 08             	mov    0x8(%eax),%eax
c0104eed:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ef0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104ef4:	75 c9                	jne    c0104ebf <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104ef6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ef9:	89 04 24             	mov    %eax,(%esp)
c0104efc:	e8 e8 f8 ff ff       	call   c01047e9 <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104f01:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f04:	83 e8 08             	sub    $0x8,%eax
c0104f07:	8b 00                	mov    (%eax),%eax
c0104f09:	c1 e0 03             	shl    $0x3,%eax
}
c0104f0c:	c9                   	leave  
c0104f0d:	c3                   	ret    

c0104f0e <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104f0e:	55                   	push   %ebp
c0104f0f:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104f11:	8b 55 08             	mov    0x8(%ebp),%edx
c0104f14:	a1 90 2e 1b c0       	mov    0xc01b2e90,%eax
c0104f19:	29 c2                	sub    %eax,%edx
c0104f1b:	89 d0                	mov    %edx,%eax
c0104f1d:	c1 f8 05             	sar    $0x5,%eax
}
c0104f20:	5d                   	pop    %ebp
c0104f21:	c3                   	ret    

c0104f22 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104f22:	55                   	push   %ebp
c0104f23:	89 e5                	mov    %esp,%ebp
c0104f25:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104f28:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f2b:	89 04 24             	mov    %eax,(%esp)
c0104f2e:	e8 db ff ff ff       	call   c0104f0e <page2ppn>
c0104f33:	c1 e0 0c             	shl    $0xc,%eax
}
c0104f36:	c9                   	leave  
c0104f37:	c3                   	ret    

c0104f38 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104f38:	55                   	push   %ebp
c0104f39:	89 e5                	mov    %esp,%ebp
c0104f3b:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104f3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f41:	c1 e8 0c             	shr    $0xc,%eax
c0104f44:	89 c2                	mov    %eax,%edx
c0104f46:	a1 80 0d 1b c0       	mov    0xc01b0d80,%eax
c0104f4b:	39 c2                	cmp    %eax,%edx
c0104f4d:	72 1c                	jb     c0104f6b <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104f4f:	c7 44 24 08 3c d7 10 	movl   $0xc010d73c,0x8(%esp)
c0104f56:	c0 
c0104f57:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104f5e:	00 
c0104f5f:	c7 04 24 5b d7 10 c0 	movl   $0xc010d75b,(%esp)
c0104f66:	e8 69 be ff ff       	call   c0100dd4 <__panic>
    }
    return &pages[PPN(pa)];
c0104f6b:	a1 90 2e 1b c0       	mov    0xc01b2e90,%eax
c0104f70:	8b 55 08             	mov    0x8(%ebp),%edx
c0104f73:	c1 ea 0c             	shr    $0xc,%edx
c0104f76:	c1 e2 05             	shl    $0x5,%edx
c0104f79:	01 d0                	add    %edx,%eax
}
c0104f7b:	c9                   	leave  
c0104f7c:	c3                   	ret    

c0104f7d <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104f7d:	55                   	push   %ebp
c0104f7e:	89 e5                	mov    %esp,%ebp
c0104f80:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104f83:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f86:	89 04 24             	mov    %eax,(%esp)
c0104f89:	e8 94 ff ff ff       	call   c0104f22 <page2pa>
c0104f8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104f91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f94:	c1 e8 0c             	shr    $0xc,%eax
c0104f97:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104f9a:	a1 80 0d 1b c0       	mov    0xc01b0d80,%eax
c0104f9f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104fa2:	72 23                	jb     c0104fc7 <page2kva+0x4a>
c0104fa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fa7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104fab:	c7 44 24 08 6c d7 10 	movl   $0xc010d76c,0x8(%esp)
c0104fb2:	c0 
c0104fb3:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104fba:	00 
c0104fbb:	c7 04 24 5b d7 10 c0 	movl   $0xc010d75b,(%esp)
c0104fc2:	e8 0d be ff ff       	call   c0100dd4 <__panic>
c0104fc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fca:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104fcf:	c9                   	leave  
c0104fd0:	c3                   	ret    

c0104fd1 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0104fd1:	55                   	push   %ebp
c0104fd2:	89 e5                	mov    %esp,%ebp
c0104fd4:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0104fd7:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fda:	83 e0 01             	and    $0x1,%eax
c0104fdd:	85 c0                	test   %eax,%eax
c0104fdf:	75 1c                	jne    c0104ffd <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0104fe1:	c7 44 24 08 90 d7 10 	movl   $0xc010d790,0x8(%esp)
c0104fe8:	c0 
c0104fe9:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0104ff0:	00 
c0104ff1:	c7 04 24 5b d7 10 c0 	movl   $0xc010d75b,(%esp)
c0104ff8:	e8 d7 bd ff ff       	call   c0100dd4 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0104ffd:	8b 45 08             	mov    0x8(%ebp),%eax
c0105000:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105005:	89 04 24             	mov    %eax,(%esp)
c0105008:	e8 2b ff ff ff       	call   c0104f38 <pa2page>
}
c010500d:	c9                   	leave  
c010500e:	c3                   	ret    

c010500f <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c010500f:	55                   	push   %ebp
c0105010:	89 e5                	mov    %esp,%ebp
c0105012:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0105015:	8b 45 08             	mov    0x8(%ebp),%eax
c0105018:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010501d:	89 04 24             	mov    %eax,(%esp)
c0105020:	e8 13 ff ff ff       	call   c0104f38 <pa2page>
}
c0105025:	c9                   	leave  
c0105026:	c3                   	ret    

c0105027 <page_ref>:

static inline int
page_ref(struct Page *page) {
c0105027:	55                   	push   %ebp
c0105028:	89 e5                	mov    %esp,%ebp
    return page->ref;
c010502a:	8b 45 08             	mov    0x8(%ebp),%eax
c010502d:	8b 00                	mov    (%eax),%eax
}
c010502f:	5d                   	pop    %ebp
c0105030:	c3                   	ret    

c0105031 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0105031:	55                   	push   %ebp
c0105032:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0105034:	8b 45 08             	mov    0x8(%ebp),%eax
c0105037:	8b 55 0c             	mov    0xc(%ebp),%edx
c010503a:	89 10                	mov    %edx,(%eax)
}
c010503c:	5d                   	pop    %ebp
c010503d:	c3                   	ret    

c010503e <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c010503e:	55                   	push   %ebp
c010503f:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0105041:	8b 45 08             	mov    0x8(%ebp),%eax
c0105044:	8b 00                	mov    (%eax),%eax
c0105046:	8d 50 01             	lea    0x1(%eax),%edx
c0105049:	8b 45 08             	mov    0x8(%ebp),%eax
c010504c:	89 10                	mov    %edx,(%eax)
    return page->ref;
c010504e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105051:	8b 00                	mov    (%eax),%eax
}
c0105053:	5d                   	pop    %ebp
c0105054:	c3                   	ret    

c0105055 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0105055:	55                   	push   %ebp
c0105056:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0105058:	8b 45 08             	mov    0x8(%ebp),%eax
c010505b:	8b 00                	mov    (%eax),%eax
c010505d:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105060:	8b 45 08             	mov    0x8(%ebp),%eax
c0105063:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0105065:	8b 45 08             	mov    0x8(%ebp),%eax
c0105068:	8b 00                	mov    (%eax),%eax
}
c010506a:	5d                   	pop    %ebp
c010506b:	c3                   	ret    

c010506c <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010506c:	55                   	push   %ebp
c010506d:	89 e5                	mov    %esp,%ebp
c010506f:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0105072:	9c                   	pushf  
c0105073:	58                   	pop    %eax
c0105074:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0105077:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010507a:	25 00 02 00 00       	and    $0x200,%eax
c010507f:	85 c0                	test   %eax,%eax
c0105081:	74 0c                	je     c010508f <__intr_save+0x23>
        intr_disable();
c0105083:	e8 a4 cf ff ff       	call   c010202c <intr_disable>
        return 1;
c0105088:	b8 01 00 00 00       	mov    $0x1,%eax
c010508d:	eb 05                	jmp    c0105094 <__intr_save+0x28>
    }
    return 0;
c010508f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105094:	c9                   	leave  
c0105095:	c3                   	ret    

c0105096 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0105096:	55                   	push   %ebp
c0105097:	89 e5                	mov    %esp,%ebp
c0105099:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010509c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01050a0:	74 05                	je     c01050a7 <__intr_restore+0x11>
        intr_enable();
c01050a2:	e8 7f cf ff ff       	call   c0102026 <intr_enable>
    }
}
c01050a7:	c9                   	leave  
c01050a8:	c3                   	ret    

c01050a9 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c01050a9:	55                   	push   %ebp
c01050aa:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c01050ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01050af:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c01050b2:	b8 23 00 00 00       	mov    $0x23,%eax
c01050b7:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c01050b9:	b8 23 00 00 00       	mov    $0x23,%eax
c01050be:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c01050c0:	b8 10 00 00 00       	mov    $0x10,%eax
c01050c5:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c01050c7:	b8 10 00 00 00       	mov    $0x10,%eax
c01050cc:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c01050ce:	b8 10 00 00 00       	mov    $0x10,%eax
c01050d3:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c01050d5:	ea dc 50 10 c0 08 00 	ljmp   $0x8,$0xc01050dc
}
c01050dc:	5d                   	pop    %ebp
c01050dd:	c3                   	ret    

c01050de <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c01050de:	55                   	push   %ebp
c01050df:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c01050e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01050e4:	a3 a4 0d 1b c0       	mov    %eax,0xc01b0da4
}
c01050e9:	5d                   	pop    %ebp
c01050ea:	c3                   	ret    

c01050eb <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c01050eb:	55                   	push   %ebp
c01050ec:	89 e5                	mov    %esp,%ebp
c01050ee:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c01050f1:	b8 00 e0 12 c0       	mov    $0xc012e000,%eax
c01050f6:	89 04 24             	mov    %eax,(%esp)
c01050f9:	e8 e0 ff ff ff       	call   c01050de <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c01050fe:	66 c7 05 a8 0d 1b c0 	movw   $0x10,0xc01b0da8
c0105105:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0105107:	66 c7 05 48 ea 12 c0 	movw   $0x68,0xc012ea48
c010510e:	68 00 
c0105110:	b8 a0 0d 1b c0       	mov    $0xc01b0da0,%eax
c0105115:	66 a3 4a ea 12 c0    	mov    %ax,0xc012ea4a
c010511b:	b8 a0 0d 1b c0       	mov    $0xc01b0da0,%eax
c0105120:	c1 e8 10             	shr    $0x10,%eax
c0105123:	a2 4c ea 12 c0       	mov    %al,0xc012ea4c
c0105128:	0f b6 05 4d ea 12 c0 	movzbl 0xc012ea4d,%eax
c010512f:	83 e0 f0             	and    $0xfffffff0,%eax
c0105132:	83 c8 09             	or     $0x9,%eax
c0105135:	a2 4d ea 12 c0       	mov    %al,0xc012ea4d
c010513a:	0f b6 05 4d ea 12 c0 	movzbl 0xc012ea4d,%eax
c0105141:	83 e0 ef             	and    $0xffffffef,%eax
c0105144:	a2 4d ea 12 c0       	mov    %al,0xc012ea4d
c0105149:	0f b6 05 4d ea 12 c0 	movzbl 0xc012ea4d,%eax
c0105150:	83 e0 9f             	and    $0xffffff9f,%eax
c0105153:	a2 4d ea 12 c0       	mov    %al,0xc012ea4d
c0105158:	0f b6 05 4d ea 12 c0 	movzbl 0xc012ea4d,%eax
c010515f:	83 c8 80             	or     $0xffffff80,%eax
c0105162:	a2 4d ea 12 c0       	mov    %al,0xc012ea4d
c0105167:	0f b6 05 4e ea 12 c0 	movzbl 0xc012ea4e,%eax
c010516e:	83 e0 f0             	and    $0xfffffff0,%eax
c0105171:	a2 4e ea 12 c0       	mov    %al,0xc012ea4e
c0105176:	0f b6 05 4e ea 12 c0 	movzbl 0xc012ea4e,%eax
c010517d:	83 e0 ef             	and    $0xffffffef,%eax
c0105180:	a2 4e ea 12 c0       	mov    %al,0xc012ea4e
c0105185:	0f b6 05 4e ea 12 c0 	movzbl 0xc012ea4e,%eax
c010518c:	83 e0 df             	and    $0xffffffdf,%eax
c010518f:	a2 4e ea 12 c0       	mov    %al,0xc012ea4e
c0105194:	0f b6 05 4e ea 12 c0 	movzbl 0xc012ea4e,%eax
c010519b:	83 c8 40             	or     $0x40,%eax
c010519e:	a2 4e ea 12 c0       	mov    %al,0xc012ea4e
c01051a3:	0f b6 05 4e ea 12 c0 	movzbl 0xc012ea4e,%eax
c01051aa:	83 e0 7f             	and    $0x7f,%eax
c01051ad:	a2 4e ea 12 c0       	mov    %al,0xc012ea4e
c01051b2:	b8 a0 0d 1b c0       	mov    $0xc01b0da0,%eax
c01051b7:	c1 e8 18             	shr    $0x18,%eax
c01051ba:	a2 4f ea 12 c0       	mov    %al,0xc012ea4f

    // reload all segment registers
    lgdt(&gdt_pd);
c01051bf:	c7 04 24 50 ea 12 c0 	movl   $0xc012ea50,(%esp)
c01051c6:	e8 de fe ff ff       	call   c01050a9 <lgdt>
c01051cb:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c01051d1:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01051d5:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c01051d8:	c9                   	leave  
c01051d9:	c3                   	ret    

c01051da <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c01051da:	55                   	push   %ebp
c01051db:	89 e5                	mov    %esp,%ebp
c01051dd:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c01051e0:	c7 05 88 2e 1b c0 30 	movl   $0xc010d630,0xc01b2e88
c01051e7:	d6 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c01051ea:	a1 88 2e 1b c0       	mov    0xc01b2e88,%eax
c01051ef:	8b 00                	mov    (%eax),%eax
c01051f1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01051f5:	c7 04 24 bc d7 10 c0 	movl   $0xc010d7bc,(%esp)
c01051fc:	e8 57 b1 ff ff       	call   c0100358 <cprintf>
    pmm_manager->init();
c0105201:	a1 88 2e 1b c0       	mov    0xc01b2e88,%eax
c0105206:	8b 40 04             	mov    0x4(%eax),%eax
c0105209:	ff d0                	call   *%eax
}
c010520b:	c9                   	leave  
c010520c:	c3                   	ret    

c010520d <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c010520d:	55                   	push   %ebp
c010520e:	89 e5                	mov    %esp,%ebp
c0105210:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c0105213:	a1 88 2e 1b c0       	mov    0xc01b2e88,%eax
c0105218:	8b 40 08             	mov    0x8(%eax),%eax
c010521b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010521e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105222:	8b 55 08             	mov    0x8(%ebp),%edx
c0105225:	89 14 24             	mov    %edx,(%esp)
c0105228:	ff d0                	call   *%eax
}
c010522a:	c9                   	leave  
c010522b:	c3                   	ret    

c010522c <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c010522c:	55                   	push   %ebp
c010522d:	89 e5                	mov    %esp,%ebp
c010522f:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c0105232:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c0105239:	e8 2e fe ff ff       	call   c010506c <__intr_save>
c010523e:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0105241:	a1 88 2e 1b c0       	mov    0xc01b2e88,%eax
c0105246:	8b 40 0c             	mov    0xc(%eax),%eax
c0105249:	8b 55 08             	mov    0x8(%ebp),%edx
c010524c:	89 14 24             	mov    %edx,(%esp)
c010524f:	ff d0                	call   *%eax
c0105251:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0105254:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105257:	89 04 24             	mov    %eax,(%esp)
c010525a:	e8 37 fe ff ff       	call   c0105096 <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c010525f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105263:	75 2d                	jne    c0105292 <alloc_pages+0x66>
c0105265:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0105269:	77 27                	ja     c0105292 <alloc_pages+0x66>
c010526b:	a1 0c 0e 1b c0       	mov    0xc01b0e0c,%eax
c0105270:	85 c0                	test   %eax,%eax
c0105272:	74 1e                	je     c0105292 <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c0105274:	8b 55 08             	mov    0x8(%ebp),%edx
c0105277:	a1 6c 2f 1b c0       	mov    0xc01b2f6c,%eax
c010527c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105283:	00 
c0105284:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105288:	89 04 24             	mov    %eax,(%esp)
c010528b:	e8 8e 1d 00 00       	call   c010701e <swap_out>
    }
c0105290:	eb a7                	jmp    c0105239 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c0105292:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105295:	c9                   	leave  
c0105296:	c3                   	ret    

c0105297 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c0105297:	55                   	push   %ebp
c0105298:	89 e5                	mov    %esp,%ebp
c010529a:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010529d:	e8 ca fd ff ff       	call   c010506c <__intr_save>
c01052a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c01052a5:	a1 88 2e 1b c0       	mov    0xc01b2e88,%eax
c01052aa:	8b 40 10             	mov    0x10(%eax),%eax
c01052ad:	8b 55 0c             	mov    0xc(%ebp),%edx
c01052b0:	89 54 24 04          	mov    %edx,0x4(%esp)
c01052b4:	8b 55 08             	mov    0x8(%ebp),%edx
c01052b7:	89 14 24             	mov    %edx,(%esp)
c01052ba:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c01052bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052bf:	89 04 24             	mov    %eax,(%esp)
c01052c2:	e8 cf fd ff ff       	call   c0105096 <__intr_restore>
}
c01052c7:	c9                   	leave  
c01052c8:	c3                   	ret    

c01052c9 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c01052c9:	55                   	push   %ebp
c01052ca:	89 e5                	mov    %esp,%ebp
c01052cc:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c01052cf:	e8 98 fd ff ff       	call   c010506c <__intr_save>
c01052d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c01052d7:	a1 88 2e 1b c0       	mov    0xc01b2e88,%eax
c01052dc:	8b 40 14             	mov    0x14(%eax),%eax
c01052df:	ff d0                	call   *%eax
c01052e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c01052e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052e7:	89 04 24             	mov    %eax,(%esp)
c01052ea:	e8 a7 fd ff ff       	call   c0105096 <__intr_restore>
    return ret;
c01052ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01052f2:	c9                   	leave  
c01052f3:	c3                   	ret    

c01052f4 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c01052f4:	55                   	push   %ebp
c01052f5:	89 e5                	mov    %esp,%ebp
c01052f7:	57                   	push   %edi
c01052f8:	56                   	push   %esi
c01052f9:	53                   	push   %ebx
c01052fa:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c0105300:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c0105307:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c010530e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0105315:	c7 04 24 d3 d7 10 c0 	movl   $0xc010d7d3,(%esp)
c010531c:	e8 37 b0 ff ff       	call   c0100358 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105321:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105328:	e9 15 01 00 00       	jmp    c0105442 <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c010532d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105330:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105333:	89 d0                	mov    %edx,%eax
c0105335:	c1 e0 02             	shl    $0x2,%eax
c0105338:	01 d0                	add    %edx,%eax
c010533a:	c1 e0 02             	shl    $0x2,%eax
c010533d:	01 c8                	add    %ecx,%eax
c010533f:	8b 50 08             	mov    0x8(%eax),%edx
c0105342:	8b 40 04             	mov    0x4(%eax),%eax
c0105345:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0105348:	89 55 bc             	mov    %edx,-0x44(%ebp)
c010534b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010534e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105351:	89 d0                	mov    %edx,%eax
c0105353:	c1 e0 02             	shl    $0x2,%eax
c0105356:	01 d0                	add    %edx,%eax
c0105358:	c1 e0 02             	shl    $0x2,%eax
c010535b:	01 c8                	add    %ecx,%eax
c010535d:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105360:	8b 58 10             	mov    0x10(%eax),%ebx
c0105363:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105366:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0105369:	01 c8                	add    %ecx,%eax
c010536b:	11 da                	adc    %ebx,%edx
c010536d:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0105370:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0105373:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105376:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105379:	89 d0                	mov    %edx,%eax
c010537b:	c1 e0 02             	shl    $0x2,%eax
c010537e:	01 d0                	add    %edx,%eax
c0105380:	c1 e0 02             	shl    $0x2,%eax
c0105383:	01 c8                	add    %ecx,%eax
c0105385:	83 c0 14             	add    $0x14,%eax
c0105388:	8b 00                	mov    (%eax),%eax
c010538a:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c0105390:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105393:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105396:	83 c0 ff             	add    $0xffffffff,%eax
c0105399:	83 d2 ff             	adc    $0xffffffff,%edx
c010539c:	89 c6                	mov    %eax,%esi
c010539e:	89 d7                	mov    %edx,%edi
c01053a0:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01053a3:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053a6:	89 d0                	mov    %edx,%eax
c01053a8:	c1 e0 02             	shl    $0x2,%eax
c01053ab:	01 d0                	add    %edx,%eax
c01053ad:	c1 e0 02             	shl    $0x2,%eax
c01053b0:	01 c8                	add    %ecx,%eax
c01053b2:	8b 48 0c             	mov    0xc(%eax),%ecx
c01053b5:	8b 58 10             	mov    0x10(%eax),%ebx
c01053b8:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c01053be:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c01053c2:	89 74 24 14          	mov    %esi,0x14(%esp)
c01053c6:	89 7c 24 18          	mov    %edi,0x18(%esp)
c01053ca:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01053cd:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01053d0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01053d4:	89 54 24 10          	mov    %edx,0x10(%esp)
c01053d8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01053dc:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c01053e0:	c7 04 24 e0 d7 10 c0 	movl   $0xc010d7e0,(%esp)
c01053e7:	e8 6c af ff ff       	call   c0100358 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c01053ec:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01053ef:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053f2:	89 d0                	mov    %edx,%eax
c01053f4:	c1 e0 02             	shl    $0x2,%eax
c01053f7:	01 d0                	add    %edx,%eax
c01053f9:	c1 e0 02             	shl    $0x2,%eax
c01053fc:	01 c8                	add    %ecx,%eax
c01053fe:	83 c0 14             	add    $0x14,%eax
c0105401:	8b 00                	mov    (%eax),%eax
c0105403:	83 f8 01             	cmp    $0x1,%eax
c0105406:	75 36                	jne    c010543e <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c0105408:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010540b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010540e:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0105411:	77 2b                	ja     c010543e <page_init+0x14a>
c0105413:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0105416:	72 05                	jb     c010541d <page_init+0x129>
c0105418:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c010541b:	73 21                	jae    c010543e <page_init+0x14a>
c010541d:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105421:	77 1b                	ja     c010543e <page_init+0x14a>
c0105423:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105427:	72 09                	jb     c0105432 <page_init+0x13e>
c0105429:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c0105430:	77 0c                	ja     c010543e <page_init+0x14a>
                maxpa = end;
c0105432:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105435:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105438:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010543b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c010543e:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105442:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105445:	8b 00                	mov    (%eax),%eax
c0105447:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010544a:	0f 8f dd fe ff ff    	jg     c010532d <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c0105450:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105454:	72 1d                	jb     c0105473 <page_init+0x17f>
c0105456:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010545a:	77 09                	ja     c0105465 <page_init+0x171>
c010545c:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c0105463:	76 0e                	jbe    c0105473 <page_init+0x17f>
        maxpa = KMEMSIZE;
c0105465:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c010546c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c0105473:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105476:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105479:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010547d:	c1 ea 0c             	shr    $0xc,%edx
c0105480:	a3 80 0d 1b c0       	mov    %eax,0xc01b0d80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c0105485:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c010548c:	b8 78 2f 1b c0       	mov    $0xc01b2f78,%eax
c0105491:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105494:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0105497:	01 d0                	add    %edx,%eax
c0105499:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010549c:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010549f:	ba 00 00 00 00       	mov    $0x0,%edx
c01054a4:	f7 75 ac             	divl   -0x54(%ebp)
c01054a7:	89 d0                	mov    %edx,%eax
c01054a9:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01054ac:	29 c2                	sub    %eax,%edx
c01054ae:	89 d0                	mov    %edx,%eax
c01054b0:	a3 90 2e 1b c0       	mov    %eax,0xc01b2e90

    for (i = 0; i < npage; i ++) {
c01054b5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01054bc:	eb 27                	jmp    c01054e5 <page_init+0x1f1>
        SetPageReserved(pages + i);
c01054be:	a1 90 2e 1b c0       	mov    0xc01b2e90,%eax
c01054c3:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01054c6:	c1 e2 05             	shl    $0x5,%edx
c01054c9:	01 d0                	add    %edx,%eax
c01054cb:	83 c0 04             	add    $0x4,%eax
c01054ce:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c01054d5:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01054d8:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01054db:	8b 55 90             	mov    -0x70(%ebp),%edx
c01054de:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c01054e1:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01054e5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01054e8:	a1 80 0d 1b c0       	mov    0xc01b0d80,%eax
c01054ed:	39 c2                	cmp    %eax,%edx
c01054ef:	72 cd                	jb     c01054be <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c01054f1:	a1 80 0d 1b c0       	mov    0xc01b0d80,%eax
c01054f6:	c1 e0 05             	shl    $0x5,%eax
c01054f9:	89 c2                	mov    %eax,%edx
c01054fb:	a1 90 2e 1b c0       	mov    0xc01b2e90,%eax
c0105500:	01 d0                	add    %edx,%eax
c0105502:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c0105505:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c010550c:	77 23                	ja     c0105531 <page_init+0x23d>
c010550e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105511:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105515:	c7 44 24 08 10 d8 10 	movl   $0xc010d810,0x8(%esp)
c010551c:	c0 
c010551d:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0105524:	00 
c0105525:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c010552c:	e8 a3 b8 ff ff       	call   c0100dd4 <__panic>
c0105531:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105534:	05 00 00 00 40       	add    $0x40000000,%eax
c0105539:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c010553c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105543:	e9 74 01 00 00       	jmp    c01056bc <page_init+0x3c8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105548:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010554b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010554e:	89 d0                	mov    %edx,%eax
c0105550:	c1 e0 02             	shl    $0x2,%eax
c0105553:	01 d0                	add    %edx,%eax
c0105555:	c1 e0 02             	shl    $0x2,%eax
c0105558:	01 c8                	add    %ecx,%eax
c010555a:	8b 50 08             	mov    0x8(%eax),%edx
c010555d:	8b 40 04             	mov    0x4(%eax),%eax
c0105560:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105563:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0105566:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105569:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010556c:	89 d0                	mov    %edx,%eax
c010556e:	c1 e0 02             	shl    $0x2,%eax
c0105571:	01 d0                	add    %edx,%eax
c0105573:	c1 e0 02             	shl    $0x2,%eax
c0105576:	01 c8                	add    %ecx,%eax
c0105578:	8b 48 0c             	mov    0xc(%eax),%ecx
c010557b:	8b 58 10             	mov    0x10(%eax),%ebx
c010557e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105581:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105584:	01 c8                	add    %ecx,%eax
c0105586:	11 da                	adc    %ebx,%edx
c0105588:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010558b:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c010558e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105591:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105594:	89 d0                	mov    %edx,%eax
c0105596:	c1 e0 02             	shl    $0x2,%eax
c0105599:	01 d0                	add    %edx,%eax
c010559b:	c1 e0 02             	shl    $0x2,%eax
c010559e:	01 c8                	add    %ecx,%eax
c01055a0:	83 c0 14             	add    $0x14,%eax
c01055a3:	8b 00                	mov    (%eax),%eax
c01055a5:	83 f8 01             	cmp    $0x1,%eax
c01055a8:	0f 85 0a 01 00 00    	jne    c01056b8 <page_init+0x3c4>
            if (begin < freemem) {
c01055ae:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01055b1:	ba 00 00 00 00       	mov    $0x0,%edx
c01055b6:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01055b9:	72 17                	jb     c01055d2 <page_init+0x2de>
c01055bb:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01055be:	77 05                	ja     c01055c5 <page_init+0x2d1>
c01055c0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01055c3:	76 0d                	jbe    c01055d2 <page_init+0x2de>
                begin = freemem;
c01055c5:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01055c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01055cb:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c01055d2:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01055d6:	72 1d                	jb     c01055f5 <page_init+0x301>
c01055d8:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01055dc:	77 09                	ja     c01055e7 <page_init+0x2f3>
c01055de:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c01055e5:	76 0e                	jbe    c01055f5 <page_init+0x301>
                end = KMEMSIZE;
c01055e7:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c01055ee:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c01055f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01055f8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01055fb:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01055fe:	0f 87 b4 00 00 00    	ja     c01056b8 <page_init+0x3c4>
c0105604:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105607:	72 09                	jb     c0105612 <page_init+0x31e>
c0105609:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010560c:	0f 83 a6 00 00 00    	jae    c01056b8 <page_init+0x3c4>
                begin = ROUNDUP(begin, PGSIZE);
c0105612:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c0105619:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010561c:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010561f:	01 d0                	add    %edx,%eax
c0105621:	83 e8 01             	sub    $0x1,%eax
c0105624:	89 45 98             	mov    %eax,-0x68(%ebp)
c0105627:	8b 45 98             	mov    -0x68(%ebp),%eax
c010562a:	ba 00 00 00 00       	mov    $0x0,%edx
c010562f:	f7 75 9c             	divl   -0x64(%ebp)
c0105632:	89 d0                	mov    %edx,%eax
c0105634:	8b 55 98             	mov    -0x68(%ebp),%edx
c0105637:	29 c2                	sub    %eax,%edx
c0105639:	89 d0                	mov    %edx,%eax
c010563b:	ba 00 00 00 00       	mov    $0x0,%edx
c0105640:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105643:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0105646:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105649:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010564c:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010564f:	ba 00 00 00 00       	mov    $0x0,%edx
c0105654:	89 c7                	mov    %eax,%edi
c0105656:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c010565c:	89 7d 80             	mov    %edi,-0x80(%ebp)
c010565f:	89 d0                	mov    %edx,%eax
c0105661:	83 e0 00             	and    $0x0,%eax
c0105664:	89 45 84             	mov    %eax,-0x7c(%ebp)
c0105667:	8b 45 80             	mov    -0x80(%ebp),%eax
c010566a:	8b 55 84             	mov    -0x7c(%ebp),%edx
c010566d:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0105670:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c0105673:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105676:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105679:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010567c:	77 3a                	ja     c01056b8 <page_init+0x3c4>
c010567e:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105681:	72 05                	jb     c0105688 <page_init+0x394>
c0105683:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0105686:	73 30                	jae    c01056b8 <page_init+0x3c4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0105688:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010568b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c010568e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105691:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0105694:	29 c8                	sub    %ecx,%eax
c0105696:	19 da                	sbb    %ebx,%edx
c0105698:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010569c:	c1 ea 0c             	shr    $0xc,%edx
c010569f:	89 c3                	mov    %eax,%ebx
c01056a1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01056a4:	89 04 24             	mov    %eax,(%esp)
c01056a7:	e8 8c f8 ff ff       	call   c0104f38 <pa2page>
c01056ac:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01056b0:	89 04 24             	mov    %eax,(%esp)
c01056b3:	e8 55 fb ff ff       	call   c010520d <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c01056b8:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01056bc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01056bf:	8b 00                	mov    (%eax),%eax
c01056c1:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01056c4:	0f 8f 7e fe ff ff    	jg     c0105548 <page_init+0x254>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c01056ca:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c01056d0:	5b                   	pop    %ebx
c01056d1:	5e                   	pop    %esi
c01056d2:	5f                   	pop    %edi
c01056d3:	5d                   	pop    %ebp
c01056d4:	c3                   	ret    

c01056d5 <enable_paging>:

static void
enable_paging(void) {
c01056d5:	55                   	push   %ebp
c01056d6:	89 e5                	mov    %esp,%ebp
c01056d8:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c01056db:	a1 8c 2e 1b c0       	mov    0xc01b2e8c,%eax
c01056e0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c01056e3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01056e6:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c01056e9:	0f 20 c0             	mov    %cr0,%eax
c01056ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr0;
c01056ef:	8b 45 f4             	mov    -0xc(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c01056f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c01056f5:	81 4d fc 2f 00 05 80 	orl    $0x8005002f,-0x4(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c01056fc:	83 65 fc f3          	andl   $0xfffffff3,-0x4(%ebp)
c0105700:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105703:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c0105706:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105709:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c010570c:	c9                   	leave  
c010570d:	c3                   	ret    

c010570e <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c010570e:	55                   	push   %ebp
c010570f:	89 e5                	mov    %esp,%ebp
c0105711:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c0105714:	8b 45 14             	mov    0x14(%ebp),%eax
c0105717:	8b 55 0c             	mov    0xc(%ebp),%edx
c010571a:	31 d0                	xor    %edx,%eax
c010571c:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105721:	85 c0                	test   %eax,%eax
c0105723:	74 24                	je     c0105749 <boot_map_segment+0x3b>
c0105725:	c7 44 24 0c 42 d8 10 	movl   $0xc010d842,0xc(%esp)
c010572c:	c0 
c010572d:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0105734:	c0 
c0105735:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c010573c:	00 
c010573d:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0105744:	e8 8b b6 ff ff       	call   c0100dd4 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0105749:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0105750:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105753:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105758:	89 c2                	mov    %eax,%edx
c010575a:	8b 45 10             	mov    0x10(%ebp),%eax
c010575d:	01 c2                	add    %eax,%edx
c010575f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105762:	01 d0                	add    %edx,%eax
c0105764:	83 e8 01             	sub    $0x1,%eax
c0105767:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010576a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010576d:	ba 00 00 00 00       	mov    $0x0,%edx
c0105772:	f7 75 f0             	divl   -0x10(%ebp)
c0105775:	89 d0                	mov    %edx,%eax
c0105777:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010577a:	29 c2                	sub    %eax,%edx
c010577c:	89 d0                	mov    %edx,%eax
c010577e:	c1 e8 0c             	shr    $0xc,%eax
c0105781:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0105784:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105787:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010578a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010578d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105792:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0105795:	8b 45 14             	mov    0x14(%ebp),%eax
c0105798:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010579b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010579e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01057a3:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01057a6:	eb 6b                	jmp    c0105813 <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c01057a8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01057af:	00 
c01057b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01057b3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01057b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01057ba:	89 04 24             	mov    %eax,(%esp)
c01057bd:	e8 d1 01 00 00       	call   c0105993 <get_pte>
c01057c2:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c01057c5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01057c9:	75 24                	jne    c01057ef <boot_map_segment+0xe1>
c01057cb:	c7 44 24 0c 6e d8 10 	movl   $0xc010d86e,0xc(%esp)
c01057d2:	c0 
c01057d3:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c01057da:	c0 
c01057db:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c01057e2:	00 
c01057e3:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c01057ea:	e8 e5 b5 ff ff       	call   c0100dd4 <__panic>
        *ptep = pa | PTE_P | perm;
c01057ef:	8b 45 18             	mov    0x18(%ebp),%eax
c01057f2:	8b 55 14             	mov    0x14(%ebp),%edx
c01057f5:	09 d0                	or     %edx,%eax
c01057f7:	83 c8 01             	or     $0x1,%eax
c01057fa:	89 c2                	mov    %eax,%edx
c01057fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01057ff:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0105801:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0105805:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c010580c:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0105813:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105817:	75 8f                	jne    c01057a8 <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c0105819:	c9                   	leave  
c010581a:	c3                   	ret    

c010581b <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c010581b:	55                   	push   %ebp
c010581c:	89 e5                	mov    %esp,%ebp
c010581e:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c0105821:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105828:	e8 ff f9 ff ff       	call   c010522c <alloc_pages>
c010582d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0105830:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105834:	75 1c                	jne    c0105852 <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c0105836:	c7 44 24 08 7b d8 10 	movl   $0xc010d87b,0x8(%esp)
c010583d:	c0 
c010583e:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c0105845:	00 
c0105846:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c010584d:	e8 82 b5 ff ff       	call   c0100dd4 <__panic>
    }
    return page2kva(p);
c0105852:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105855:	89 04 24             	mov    %eax,(%esp)
c0105858:	e8 20 f7 ff ff       	call   c0104f7d <page2kva>
}
c010585d:	c9                   	leave  
c010585e:	c3                   	ret    

c010585f <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c010585f:	55                   	push   %ebp
c0105860:	89 e5                	mov    %esp,%ebp
c0105862:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0105865:	e8 70 f9 ff ff       	call   c01051da <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c010586a:	e8 85 fa ff ff       	call   c01052f4 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c010586f:	e8 62 09 00 00       	call   c01061d6 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c0105874:	e8 a2 ff ff ff       	call   c010581b <boot_alloc_page>
c0105879:	a3 84 0d 1b c0       	mov    %eax,0xc01b0d84
    memset(boot_pgdir, 0, PGSIZE);
c010587e:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c0105883:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010588a:	00 
c010588b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105892:	00 
c0105893:	89 04 24             	mov    %eax,(%esp)
c0105896:	e8 55 6f 00 00       	call   c010c7f0 <memset>
    boot_cr3 = PADDR(boot_pgdir);
c010589b:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c01058a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01058a3:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01058aa:	77 23                	ja     c01058cf <pmm_init+0x70>
c01058ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058af:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01058b3:	c7 44 24 08 10 d8 10 	movl   $0xc010d810,0x8(%esp)
c01058ba:	c0 
c01058bb:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c01058c2:	00 
c01058c3:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c01058ca:	e8 05 b5 ff ff       	call   c0100dd4 <__panic>
c01058cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058d2:	05 00 00 00 40       	add    $0x40000000,%eax
c01058d7:	a3 8c 2e 1b c0       	mov    %eax,0xc01b2e8c

    check_pgdir();
c01058dc:	e8 13 09 00 00       	call   c01061f4 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c01058e1:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c01058e6:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c01058ec:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c01058f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01058f4:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c01058fb:	77 23                	ja     c0105920 <pmm_init+0xc1>
c01058fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105900:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105904:	c7 44 24 08 10 d8 10 	movl   $0xc010d810,0x8(%esp)
c010590b:	c0 
c010590c:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c0105913:	00 
c0105914:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c010591b:	e8 b4 b4 ff ff       	call   c0100dd4 <__panic>
c0105920:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105923:	05 00 00 00 40       	add    $0x40000000,%eax
c0105928:	83 c8 03             	or     $0x3,%eax
c010592b:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c010592d:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c0105932:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0105939:	00 
c010593a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105941:	00 
c0105942:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c0105949:	38 
c010594a:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c0105951:	c0 
c0105952:	89 04 24             	mov    %eax,(%esp)
c0105955:	e8 b4 fd ff ff       	call   c010570e <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c010595a:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c010595f:	8b 15 84 0d 1b c0    	mov    0xc01b0d84,%edx
c0105965:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c010596b:	89 10                	mov    %edx,(%eax)

    enable_paging();
c010596d:	e8 63 fd ff ff       	call   c01056d5 <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0105972:	e8 74 f7 ff ff       	call   c01050eb <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c0105977:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c010597c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0105982:	e8 08 0f 00 00       	call   c010688f <check_boot_pgdir>

    print_pgdir();
c0105987:	e8 95 13 00 00       	call   c0106d21 <print_pgdir>
    
    kmalloc_init();
c010598c:	e8 e6 f2 ff ff       	call   c0104c77 <kmalloc_init>

}
c0105991:	c9                   	leave  
c0105992:	c3                   	ret    

c0105993 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0105993:	55                   	push   %ebp
c0105994:	89 e5                	mov    %esp,%ebp
c0105996:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t* entry = &pgdir[PDX(la)];
c0105999:	8b 45 0c             	mov    0xc(%ebp),%eax
c010599c:	c1 e8 16             	shr    $0x16,%eax
c010599f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01059a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01059a9:	01 d0                	add    %edx,%eax
c01059ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(!(*entry & PTE_P))
c01059ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059b1:	8b 00                	mov    (%eax),%eax
c01059b3:	83 e0 01             	and    $0x1,%eax
c01059b6:	85 c0                	test   %eax,%eax
c01059b8:	0f 85 af 00 00 00    	jne    c0105a6d <get_pte+0xda>
    {
    	struct Page* p;
    	if((!create) || ((p = alloc_page()) == NULL))
c01059be:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01059c2:	74 15                	je     c01059d9 <get_pte+0x46>
c01059c4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01059cb:	e8 5c f8 ff ff       	call   c010522c <alloc_pages>
c01059d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01059d3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01059d7:	75 0a                	jne    c01059e3 <get_pte+0x50>
    	{
			return NULL;
c01059d9:	b8 00 00 00 00       	mov    $0x0,%eax
c01059de:	e9 e6 00 00 00       	jmp    c0105ac9 <get_pte+0x136>
    	}
		set_page_ref(p, 1);
c01059e3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01059ea:	00 
c01059eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01059ee:	89 04 24             	mov    %eax,(%esp)
c01059f1:	e8 3b f6 ff ff       	call   c0105031 <set_page_ref>
		uintptr_t pg_addr = page2pa(p);
c01059f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01059f9:	89 04 24             	mov    %eax,(%esp)
c01059fc:	e8 21 f5 ff ff       	call   c0104f22 <page2pa>
c0105a01:	89 45 ec             	mov    %eax,-0x14(%ebp)
		memset(KADDR(pg_addr), 0, PGSIZE);
c0105a04:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a07:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105a0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105a0d:	c1 e8 0c             	shr    $0xc,%eax
c0105a10:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105a13:	a1 80 0d 1b c0       	mov    0xc01b0d80,%eax
c0105a18:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0105a1b:	72 23                	jb     c0105a40 <get_pte+0xad>
c0105a1d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105a20:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105a24:	c7 44 24 08 6c d7 10 	movl   $0xc010d76c,0x8(%esp)
c0105a2b:	c0 
c0105a2c:	c7 44 24 04 99 01 00 	movl   $0x199,0x4(%esp)
c0105a33:	00 
c0105a34:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0105a3b:	e8 94 b3 ff ff       	call   c0100dd4 <__panic>
c0105a40:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105a43:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105a48:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105a4f:	00 
c0105a50:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105a57:	00 
c0105a58:	89 04 24             	mov    %eax,(%esp)
c0105a5b:	e8 90 6d 00 00       	call   c010c7f0 <memset>
		*entry = pg_addr | PTE_U | PTE_W | PTE_P;
c0105a60:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a63:	83 c8 07             	or     $0x7,%eax
c0105a66:	89 c2                	mov    %eax,%edx
c0105a68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a6b:	89 10                	mov    %edx,(%eax)
   	}
    return &((pte_t*)KADDR(PDE_ADDR(*entry)))[PTX(la)];
c0105a6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a70:	8b 00                	mov    (%eax),%eax
c0105a72:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105a77:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105a7a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105a7d:	c1 e8 0c             	shr    $0xc,%eax
c0105a80:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105a83:	a1 80 0d 1b c0       	mov    0xc01b0d80,%eax
c0105a88:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0105a8b:	72 23                	jb     c0105ab0 <get_pte+0x11d>
c0105a8d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105a90:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105a94:	c7 44 24 08 6c d7 10 	movl   $0xc010d76c,0x8(%esp)
c0105a9b:	c0 
c0105a9c:	c7 44 24 04 9c 01 00 	movl   $0x19c,0x4(%esp)
c0105aa3:	00 
c0105aa4:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0105aab:	e8 24 b3 ff ff       	call   c0100dd4 <__panic>
c0105ab0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105ab3:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105ab8:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105abb:	c1 ea 0c             	shr    $0xc,%edx
c0105abe:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c0105ac4:	c1 e2 02             	shl    $0x2,%edx
c0105ac7:	01 d0                	add    %edx,%eax
}
c0105ac9:	c9                   	leave  
c0105aca:	c3                   	ret    

c0105acb <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0105acb:	55                   	push   %ebp
c0105acc:	89 e5                	mov    %esp,%ebp
c0105ace:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105ad1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105ad8:	00 
c0105ad9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105adc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ae0:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ae3:	89 04 24             	mov    %eax,(%esp)
c0105ae6:	e8 a8 fe ff ff       	call   c0105993 <get_pte>
c0105aeb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0105aee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105af2:	74 08                	je     c0105afc <get_page+0x31>
        *ptep_store = ptep;
c0105af4:	8b 45 10             	mov    0x10(%ebp),%eax
c0105af7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105afa:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0105afc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105b00:	74 1b                	je     c0105b1d <get_page+0x52>
c0105b02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b05:	8b 00                	mov    (%eax),%eax
c0105b07:	83 e0 01             	and    $0x1,%eax
c0105b0a:	85 c0                	test   %eax,%eax
c0105b0c:	74 0f                	je     c0105b1d <get_page+0x52>
        return pa2page(*ptep);
c0105b0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b11:	8b 00                	mov    (%eax),%eax
c0105b13:	89 04 24             	mov    %eax,(%esp)
c0105b16:	e8 1d f4 ff ff       	call   c0104f38 <pa2page>
c0105b1b:	eb 05                	jmp    c0105b22 <get_page+0x57>
    }
    return NULL;
c0105b1d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105b22:	c9                   	leave  
c0105b23:	c3                   	ret    

c0105b24 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0105b24:	55                   	push   %ebp
c0105b25:	89 e5                	mov    %esp,%ebp
c0105b27:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if(*ptep & PTE_P)
c0105b2a:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b2d:	8b 00                	mov    (%eax),%eax
c0105b2f:	83 e0 01             	and    $0x1,%eax
c0105b32:	85 c0                	test   %eax,%eax
c0105b34:	74 52                	je     c0105b88 <page_remove_pte+0x64>
	{
		struct Page* page = pte2page(*ptep);
c0105b36:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b39:	8b 00                	mov    (%eax),%eax
c0105b3b:	89 04 24             	mov    %eax,(%esp)
c0105b3e:	e8 8e f4 ff ff       	call   c0104fd1 <pte2page>
c0105b43:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int re = page_ref_dec(page);
c0105b46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b49:	89 04 24             	mov    %eax,(%esp)
c0105b4c:	e8 04 f5 ff ff       	call   c0105055 <page_ref_dec>
c0105b51:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if(re == 0)
c0105b54:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105b58:	75 13                	jne    c0105b6d <page_remove_pte+0x49>
		{
			free_page(page);
c0105b5a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105b61:	00 
c0105b62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b65:	89 04 24             	mov    %eax,(%esp)
c0105b68:	e8 2a f7 ff ff       	call   c0105297 <free_pages>
		}
		*ptep = 0;
c0105b6d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b70:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(pgdir, la);
c0105b76:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b79:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b80:	89 04 24             	mov    %eax,(%esp)
c0105b83:	e8 1d 05 00 00       	call   c01060a5 <tlb_invalidate>
	}
}
c0105b88:	c9                   	leave  
c0105b89:	c3                   	ret    

c0105b8a <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105b8a:	55                   	push   %ebp
c0105b8b:	89 e5                	mov    %esp,%ebp
c0105b8d:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105b90:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b93:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105b98:	85 c0                	test   %eax,%eax
c0105b9a:	75 0c                	jne    c0105ba8 <unmap_range+0x1e>
c0105b9c:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b9f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105ba4:	85 c0                	test   %eax,%eax
c0105ba6:	74 24                	je     c0105bcc <unmap_range+0x42>
c0105ba8:	c7 44 24 0c 94 d8 10 	movl   $0xc010d894,0xc(%esp)
c0105baf:	c0 
c0105bb0:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0105bb7:	c0 
c0105bb8:	c7 44 24 04 d9 01 00 	movl   $0x1d9,0x4(%esp)
c0105bbf:	00 
c0105bc0:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0105bc7:	e8 08 b2 ff ff       	call   c0100dd4 <__panic>
    assert(USER_ACCESS(start, end));
c0105bcc:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105bd3:	76 11                	jbe    c0105be6 <unmap_range+0x5c>
c0105bd5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bd8:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105bdb:	73 09                	jae    c0105be6 <unmap_range+0x5c>
c0105bdd:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105be4:	76 24                	jbe    c0105c0a <unmap_range+0x80>
c0105be6:	c7 44 24 0c bd d8 10 	movl   $0xc010d8bd,0xc(%esp)
c0105bed:	c0 
c0105bee:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0105bf5:	c0 
c0105bf6:	c7 44 24 04 da 01 00 	movl   $0x1da,0x4(%esp)
c0105bfd:	00 
c0105bfe:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0105c05:	e8 ca b1 ff ff       	call   c0100dd4 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0105c0a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105c11:	00 
c0105c12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c15:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105c19:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c1c:	89 04 24             	mov    %eax,(%esp)
c0105c1f:	e8 6f fd ff ff       	call   c0105993 <get_pte>
c0105c24:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105c27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105c2b:	75 18                	jne    c0105c45 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105c2d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c30:	05 00 00 40 00       	add    $0x400000,%eax
c0105c35:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105c38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c3b:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105c40:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105c43:	eb 29                	jmp    c0105c6e <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105c45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c48:	8b 00                	mov    (%eax),%eax
c0105c4a:	85 c0                	test   %eax,%eax
c0105c4c:	74 19                	je     c0105c67 <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0105c4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c51:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105c55:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c58:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105c5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c5f:	89 04 24             	mov    %eax,(%esp)
c0105c62:	e8 bd fe ff ff       	call   c0105b24 <page_remove_pte>
        }
        start += PGSIZE;
c0105c67:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105c6e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105c72:	74 08                	je     c0105c7c <unmap_range+0xf2>
c0105c74:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c77:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105c7a:	72 8e                	jb     c0105c0a <unmap_range+0x80>
}
c0105c7c:	c9                   	leave  
c0105c7d:	c3                   	ret    

c0105c7e <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105c7e:	55                   	push   %ebp
c0105c7f:	89 e5                	mov    %esp,%ebp
c0105c81:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105c84:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c87:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105c8c:	85 c0                	test   %eax,%eax
c0105c8e:	75 0c                	jne    c0105c9c <exit_range+0x1e>
c0105c90:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c93:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105c98:	85 c0                	test   %eax,%eax
c0105c9a:	74 24                	je     c0105cc0 <exit_range+0x42>
c0105c9c:	c7 44 24 0c 94 d8 10 	movl   $0xc010d894,0xc(%esp)
c0105ca3:	c0 
c0105ca4:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0105cab:	c0 
c0105cac:	c7 44 24 04 eb 01 00 	movl   $0x1eb,0x4(%esp)
c0105cb3:	00 
c0105cb4:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0105cbb:	e8 14 b1 ff ff       	call   c0100dd4 <__panic>
    assert(USER_ACCESS(start, end));
c0105cc0:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105cc7:	76 11                	jbe    c0105cda <exit_range+0x5c>
c0105cc9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ccc:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105ccf:	73 09                	jae    c0105cda <exit_range+0x5c>
c0105cd1:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105cd8:	76 24                	jbe    c0105cfe <exit_range+0x80>
c0105cda:	c7 44 24 0c bd d8 10 	movl   $0xc010d8bd,0xc(%esp)
c0105ce1:	c0 
c0105ce2:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0105ce9:	c0 
c0105cea:	c7 44 24 04 ec 01 00 	movl   $0x1ec,0x4(%esp)
c0105cf1:	00 
c0105cf2:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0105cf9:	e8 d6 b0 ff ff       	call   c0100dd4 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105cfe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d01:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105d04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d07:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105d0c:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105d0f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d12:	c1 e8 16             	shr    $0x16,%eax
c0105d15:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105d18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d1b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105d22:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d25:	01 d0                	add    %edx,%eax
c0105d27:	8b 00                	mov    (%eax),%eax
c0105d29:	83 e0 01             	and    $0x1,%eax
c0105d2c:	85 c0                	test   %eax,%eax
c0105d2e:	74 3e                	je     c0105d6e <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0105d30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d33:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105d3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d3d:	01 d0                	add    %edx,%eax
c0105d3f:	8b 00                	mov    (%eax),%eax
c0105d41:	89 04 24             	mov    %eax,(%esp)
c0105d44:	e8 c6 f2 ff ff       	call   c010500f <pde2page>
c0105d49:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105d50:	00 
c0105d51:	89 04 24             	mov    %eax,(%esp)
c0105d54:	e8 3e f5 ff ff       	call   c0105297 <free_pages>
            pgdir[pde_idx] = 0;
c0105d59:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d5c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105d63:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d66:	01 d0                	add    %edx,%eax
c0105d68:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105d6e:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105d75:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105d79:	74 08                	je     c0105d83 <exit_range+0x105>
c0105d7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d7e:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105d81:	72 8c                	jb     c0105d0f <exit_range+0x91>
}
c0105d83:	c9                   	leave  
c0105d84:	c3                   	ret    

c0105d85 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105d85:	55                   	push   %ebp
c0105d86:	89 e5                	mov    %esp,%ebp
c0105d88:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105d8b:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d8e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105d93:	85 c0                	test   %eax,%eax
c0105d95:	75 0c                	jne    c0105da3 <copy_range+0x1e>
c0105d97:	8b 45 14             	mov    0x14(%ebp),%eax
c0105d9a:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105d9f:	85 c0                	test   %eax,%eax
c0105da1:	74 24                	je     c0105dc7 <copy_range+0x42>
c0105da3:	c7 44 24 0c 94 d8 10 	movl   $0xc010d894,0xc(%esp)
c0105daa:	c0 
c0105dab:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0105db2:	c0 
c0105db3:	c7 44 24 04 01 02 00 	movl   $0x201,0x4(%esp)
c0105dba:	00 
c0105dbb:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0105dc2:	e8 0d b0 ff ff       	call   c0100dd4 <__panic>
    assert(USER_ACCESS(start, end));
c0105dc7:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105dce:	76 11                	jbe    c0105de1 <copy_range+0x5c>
c0105dd0:	8b 45 10             	mov    0x10(%ebp),%eax
c0105dd3:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105dd6:	73 09                	jae    c0105de1 <copy_range+0x5c>
c0105dd8:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105ddf:	76 24                	jbe    c0105e05 <copy_range+0x80>
c0105de1:	c7 44 24 0c bd d8 10 	movl   $0xc010d8bd,0xc(%esp)
c0105de8:	c0 
c0105de9:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0105df0:	c0 
c0105df1:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)
c0105df8:	00 
c0105df9:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0105e00:	e8 cf af ff ff       	call   c0100dd4 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0105e05:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105e0c:	00 
c0105e0d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e10:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e14:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e17:	89 04 24             	mov    %eax,(%esp)
c0105e1a:	e8 74 fb ff ff       	call   c0105993 <get_pte>
c0105e1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105e22:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105e26:	75 1b                	jne    c0105e43 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105e28:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e2b:	05 00 00 40 00       	add    $0x400000,%eax
c0105e30:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105e33:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e36:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105e3b:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105e3e:	e9 4c 01 00 00       	jmp    c0105f8f <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105e43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e46:	8b 00                	mov    (%eax),%eax
c0105e48:	83 e0 01             	and    $0x1,%eax
c0105e4b:	85 c0                	test   %eax,%eax
c0105e4d:	0f 84 35 01 00 00    	je     c0105f88 <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105e53:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105e5a:	00 
c0105e5b:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e5e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e62:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e65:	89 04 24             	mov    %eax,(%esp)
c0105e68:	e8 26 fb ff ff       	call   c0105993 <get_pte>
c0105e6d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105e70:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105e74:	75 0a                	jne    c0105e80 <copy_range+0xfb>
                return -E_NO_MEM;
c0105e76:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105e7b:	e9 26 01 00 00       	jmp    c0105fa6 <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0105e80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e83:	8b 00                	mov    (%eax),%eax
c0105e85:	83 e0 07             	and    $0x7,%eax
c0105e88:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105e8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e8e:	8b 00                	mov    (%eax),%eax
c0105e90:	89 04 24             	mov    %eax,(%esp)
c0105e93:	e8 39 f1 ff ff       	call   c0104fd1 <pte2page>
c0105e98:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105e9b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105ea2:	e8 85 f3 ff ff       	call   c010522c <alloc_pages>
c0105ea7:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0105eaa:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105eae:	75 24                	jne    c0105ed4 <copy_range+0x14f>
c0105eb0:	c7 44 24 0c d5 d8 10 	movl   $0xc010d8d5,0xc(%esp)
c0105eb7:	c0 
c0105eb8:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0105ebf:	c0 
c0105ec0:	c7 44 24 04 15 02 00 	movl   $0x215,0x4(%esp)
c0105ec7:	00 
c0105ec8:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0105ecf:	e8 00 af ff ff       	call   c0100dd4 <__panic>
        assert(npage!=NULL);
c0105ed4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105ed8:	75 24                	jne    c0105efe <copy_range+0x179>
c0105eda:	c7 44 24 0c e0 d8 10 	movl   $0xc010d8e0,0xc(%esp)
c0105ee1:	c0 
c0105ee2:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0105ee9:	c0 
c0105eea:	c7 44 24 04 16 02 00 	movl   $0x216,0x4(%esp)
c0105ef1:	00 
c0105ef2:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0105ef9:	e8 d6 ae ff ff       	call   c0100dd4 <__panic>
        int ret=0;
c0105efe:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void* src_kvaddr = page2kva(page);
c0105f05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105f08:	89 04 24             	mov    %eax,(%esp)
c0105f0b:	e8 6d f0 ff ff       	call   c0104f7d <page2kva>
c0105f10:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void* dst_kvaddr = page2kva(npage);
c0105f13:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105f16:	89 04 24             	mov    %eax,(%esp)
c0105f19:	e8 5f f0 ff ff       	call   c0104f7d <page2kva>
c0105f1e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
c0105f21:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105f28:	00 
c0105f29:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105f2c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f30:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105f33:	89 04 24             	mov    %eax,(%esp)
c0105f36:	e8 97 69 00 00       	call   c010c8d2 <memcpy>
        ret = page_insert(to, npage, start, perm);
c0105f3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105f3e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105f42:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f45:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f49:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105f4c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f50:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f53:	89 04 24             	mov    %eax,(%esp)
c0105f56:	e8 91 00 00 00       	call   c0105fec <page_insert>
c0105f5b:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c0105f5e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105f62:	74 24                	je     c0105f88 <copy_range+0x203>
c0105f64:	c7 44 24 0c ec d8 10 	movl   $0xc010d8ec,0xc(%esp)
c0105f6b:	c0 
c0105f6c:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0105f73:	c0 
c0105f74:	c7 44 24 04 2a 02 00 	movl   $0x22a,0x4(%esp)
c0105f7b:	00 
c0105f7c:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0105f83:	e8 4c ae ff ff       	call   c0100dd4 <__panic>
        }
        start += PGSIZE;
c0105f88:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105f8f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105f93:	74 0c                	je     c0105fa1 <copy_range+0x21c>
c0105f95:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f98:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105f9b:	0f 82 64 fe ff ff    	jb     c0105e05 <copy_range+0x80>
    return 0;
c0105fa1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105fa6:	c9                   	leave  
c0105fa7:	c3                   	ret    

c0105fa8 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0105fa8:	55                   	push   %ebp
c0105fa9:	89 e5                	mov    %esp,%ebp
c0105fab:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105fae:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105fb5:	00 
c0105fb6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105fb9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105fbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0105fc0:	89 04 24             	mov    %eax,(%esp)
c0105fc3:	e8 cb f9 ff ff       	call   c0105993 <get_pte>
c0105fc8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0105fcb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105fcf:	74 19                	je     c0105fea <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0105fd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fd4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105fd8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105fdb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105fdf:	8b 45 08             	mov    0x8(%ebp),%eax
c0105fe2:	89 04 24             	mov    %eax,(%esp)
c0105fe5:	e8 3a fb ff ff       	call   c0105b24 <page_remove_pte>
    }
}
c0105fea:	c9                   	leave  
c0105feb:	c3                   	ret    

c0105fec <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0105fec:	55                   	push   %ebp
c0105fed:	89 e5                	mov    %esp,%ebp
c0105fef:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0105ff2:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105ff9:	00 
c0105ffa:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ffd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106001:	8b 45 08             	mov    0x8(%ebp),%eax
c0106004:	89 04 24             	mov    %eax,(%esp)
c0106007:	e8 87 f9 ff ff       	call   c0105993 <get_pte>
c010600c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c010600f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106013:	75 0a                	jne    c010601f <page_insert+0x33>
        return -E_NO_MEM;
c0106015:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010601a:	e9 84 00 00 00       	jmp    c01060a3 <page_insert+0xb7>
    }
    page_ref_inc(page);
c010601f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106022:	89 04 24             	mov    %eax,(%esp)
c0106025:	e8 14 f0 ff ff       	call   c010503e <page_ref_inc>
    if (*ptep & PTE_P) {
c010602a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010602d:	8b 00                	mov    (%eax),%eax
c010602f:	83 e0 01             	and    $0x1,%eax
c0106032:	85 c0                	test   %eax,%eax
c0106034:	74 3e                	je     c0106074 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0106036:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106039:	8b 00                	mov    (%eax),%eax
c010603b:	89 04 24             	mov    %eax,(%esp)
c010603e:	e8 8e ef ff ff       	call   c0104fd1 <pte2page>
c0106043:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0106046:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106049:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010604c:	75 0d                	jne    c010605b <page_insert+0x6f>
            page_ref_dec(page);
c010604e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106051:	89 04 24             	mov    %eax,(%esp)
c0106054:	e8 fc ef ff ff       	call   c0105055 <page_ref_dec>
c0106059:	eb 19                	jmp    c0106074 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c010605b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010605e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106062:	8b 45 10             	mov    0x10(%ebp),%eax
c0106065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106069:	8b 45 08             	mov    0x8(%ebp),%eax
c010606c:	89 04 24             	mov    %eax,(%esp)
c010606f:	e8 b0 fa ff ff       	call   c0105b24 <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0106074:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106077:	89 04 24             	mov    %eax,(%esp)
c010607a:	e8 a3 ee ff ff       	call   c0104f22 <page2pa>
c010607f:	0b 45 14             	or     0x14(%ebp),%eax
c0106082:	83 c8 01             	or     $0x1,%eax
c0106085:	89 c2                	mov    %eax,%edx
c0106087:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010608a:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c010608c:	8b 45 10             	mov    0x10(%ebp),%eax
c010608f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106093:	8b 45 08             	mov    0x8(%ebp),%eax
c0106096:	89 04 24             	mov    %eax,(%esp)
c0106099:	e8 07 00 00 00       	call   c01060a5 <tlb_invalidate>
    return 0;
c010609e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01060a3:	c9                   	leave  
c01060a4:	c3                   	ret    

c01060a5 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c01060a5:	55                   	push   %ebp
c01060a6:	89 e5                	mov    %esp,%ebp
c01060a8:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c01060ab:	0f 20 d8             	mov    %cr3,%eax
c01060ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c01060b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c01060b4:	89 c2                	mov    %eax,%edx
c01060b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01060b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01060bc:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01060c3:	77 23                	ja     c01060e8 <tlb_invalidate+0x43>
c01060c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060c8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01060cc:	c7 44 24 08 10 d8 10 	movl   $0xc010d810,0x8(%esp)
c01060d3:	c0 
c01060d4:	c7 44 24 04 5b 02 00 	movl   $0x25b,0x4(%esp)
c01060db:	00 
c01060dc:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c01060e3:	e8 ec ac ff ff       	call   c0100dd4 <__panic>
c01060e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060eb:	05 00 00 00 40       	add    $0x40000000,%eax
c01060f0:	39 c2                	cmp    %eax,%edx
c01060f2:	75 0c                	jne    c0106100 <tlb_invalidate+0x5b>
        invlpg((void *)la);
c01060f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01060f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c01060fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01060fd:	0f 01 38             	invlpg (%eax)
    }
}
c0106100:	c9                   	leave  
c0106101:	c3                   	ret    

c0106102 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0106102:	55                   	push   %ebp
c0106103:	89 e5                	mov    %esp,%ebp
c0106105:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0106108:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010610f:	e8 18 f1 ff ff       	call   c010522c <alloc_pages>
c0106114:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0106117:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010611b:	0f 84 b0 00 00 00    	je     c01061d1 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0106121:	8b 45 10             	mov    0x10(%ebp),%eax
c0106124:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106128:	8b 45 0c             	mov    0xc(%ebp),%eax
c010612b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010612f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106132:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106136:	8b 45 08             	mov    0x8(%ebp),%eax
c0106139:	89 04 24             	mov    %eax,(%esp)
c010613c:	e8 ab fe ff ff       	call   c0105fec <page_insert>
c0106141:	85 c0                	test   %eax,%eax
c0106143:	74 1a                	je     c010615f <pgdir_alloc_page+0x5d>
            free_page(page);
c0106145:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010614c:	00 
c010614d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106150:	89 04 24             	mov    %eax,(%esp)
c0106153:	e8 3f f1 ff ff       	call   c0105297 <free_pages>
            return NULL;
c0106158:	b8 00 00 00 00       	mov    $0x0,%eax
c010615d:	eb 75                	jmp    c01061d4 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c010615f:	a1 0c 0e 1b c0       	mov    0xc01b0e0c,%eax
c0106164:	85 c0                	test   %eax,%eax
c0106166:	74 69                	je     c01061d1 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c0106168:	a1 6c 2f 1b c0       	mov    0xc01b2f6c,%eax
c010616d:	85 c0                	test   %eax,%eax
c010616f:	74 60                	je     c01061d1 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0106171:	a1 6c 2f 1b c0       	mov    0xc01b2f6c,%eax
c0106176:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010617d:	00 
c010617e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106181:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106185:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106188:	89 54 24 04          	mov    %edx,0x4(%esp)
c010618c:	89 04 24             	mov    %eax,(%esp)
c010618f:	e8 3e 0e 00 00       	call   c0106fd2 <swap_map_swappable>
                page->pra_vaddr=la;
c0106194:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106197:	8b 55 0c             	mov    0xc(%ebp),%edx
c010619a:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c010619d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061a0:	89 04 24             	mov    %eax,(%esp)
c01061a3:	e8 7f ee ff ff       	call   c0105027 <page_ref>
c01061a8:	83 f8 01             	cmp    $0x1,%eax
c01061ab:	74 24                	je     c01061d1 <pgdir_alloc_page+0xcf>
c01061ad:	c7 44 24 0c f5 d8 10 	movl   $0xc010d8f5,0xc(%esp)
c01061b4:	c0 
c01061b5:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c01061bc:	c0 
c01061bd:	c7 44 24 04 6f 02 00 	movl   $0x26f,0x4(%esp)
c01061c4:	00 
c01061c5:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c01061cc:	e8 03 ac ff ff       	call   c0100dd4 <__panic>
            }
        }

    }

    return page;
c01061d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01061d4:	c9                   	leave  
c01061d5:	c3                   	ret    

c01061d6 <check_alloc_page>:

static void
check_alloc_page(void) {
c01061d6:	55                   	push   %ebp
c01061d7:	89 e5                	mov    %esp,%ebp
c01061d9:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c01061dc:	a1 88 2e 1b c0       	mov    0xc01b2e88,%eax
c01061e1:	8b 40 18             	mov    0x18(%eax),%eax
c01061e4:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c01061e6:	c7 04 24 0c d9 10 c0 	movl   $0xc010d90c,(%esp)
c01061ed:	e8 66 a1 ff ff       	call   c0100358 <cprintf>
}
c01061f2:	c9                   	leave  
c01061f3:	c3                   	ret    

c01061f4 <check_pgdir>:

static void
check_pgdir(void) {
c01061f4:	55                   	push   %ebp
c01061f5:	89 e5                	mov    %esp,%ebp
c01061f7:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c01061fa:	a1 80 0d 1b c0       	mov    0xc01b0d80,%eax
c01061ff:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0106204:	76 24                	jbe    c010622a <check_pgdir+0x36>
c0106206:	c7 44 24 0c 2b d9 10 	movl   $0xc010d92b,0xc(%esp)
c010620d:	c0 
c010620e:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106215:	c0 
c0106216:	c7 44 24 04 87 02 00 	movl   $0x287,0x4(%esp)
c010621d:	00 
c010621e:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106225:	e8 aa ab ff ff       	call   c0100dd4 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c010622a:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c010622f:	85 c0                	test   %eax,%eax
c0106231:	74 0e                	je     c0106241 <check_pgdir+0x4d>
c0106233:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c0106238:	25 ff 0f 00 00       	and    $0xfff,%eax
c010623d:	85 c0                	test   %eax,%eax
c010623f:	74 24                	je     c0106265 <check_pgdir+0x71>
c0106241:	c7 44 24 0c 48 d9 10 	movl   $0xc010d948,0xc(%esp)
c0106248:	c0 
c0106249:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106250:	c0 
c0106251:	c7 44 24 04 88 02 00 	movl   $0x288,0x4(%esp)
c0106258:	00 
c0106259:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106260:	e8 6f ab ff ff       	call   c0100dd4 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0106265:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c010626a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106271:	00 
c0106272:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106279:	00 
c010627a:	89 04 24             	mov    %eax,(%esp)
c010627d:	e8 49 f8 ff ff       	call   c0105acb <get_page>
c0106282:	85 c0                	test   %eax,%eax
c0106284:	74 24                	je     c01062aa <check_pgdir+0xb6>
c0106286:	c7 44 24 0c 80 d9 10 	movl   $0xc010d980,0xc(%esp)
c010628d:	c0 
c010628e:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106295:	c0 
c0106296:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
c010629d:	00 
c010629e:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c01062a5:	e8 2a ab ff ff       	call   c0100dd4 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c01062aa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01062b1:	e8 76 ef ff ff       	call   c010522c <alloc_pages>
c01062b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c01062b9:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c01062be:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01062c5:	00 
c01062c6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01062cd:	00 
c01062ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01062d1:	89 54 24 04          	mov    %edx,0x4(%esp)
c01062d5:	89 04 24             	mov    %eax,(%esp)
c01062d8:	e8 0f fd ff ff       	call   c0105fec <page_insert>
c01062dd:	85 c0                	test   %eax,%eax
c01062df:	74 24                	je     c0106305 <check_pgdir+0x111>
c01062e1:	c7 44 24 0c a8 d9 10 	movl   $0xc010d9a8,0xc(%esp)
c01062e8:	c0 
c01062e9:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c01062f0:	c0 
c01062f1:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c01062f8:	00 
c01062f9:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106300:	e8 cf aa ff ff       	call   c0100dd4 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0106305:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c010630a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106311:	00 
c0106312:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106319:	00 
c010631a:	89 04 24             	mov    %eax,(%esp)
c010631d:	e8 71 f6 ff ff       	call   c0105993 <get_pte>
c0106322:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106325:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106329:	75 24                	jne    c010634f <check_pgdir+0x15b>
c010632b:	c7 44 24 0c d4 d9 10 	movl   $0xc010d9d4,0xc(%esp)
c0106332:	c0 
c0106333:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c010633a:	c0 
c010633b:	c7 44 24 04 90 02 00 	movl   $0x290,0x4(%esp)
c0106342:	00 
c0106343:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c010634a:	e8 85 aa ff ff       	call   c0100dd4 <__panic>
    assert(pa2page(*ptep) == p1);
c010634f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106352:	8b 00                	mov    (%eax),%eax
c0106354:	89 04 24             	mov    %eax,(%esp)
c0106357:	e8 dc eb ff ff       	call   c0104f38 <pa2page>
c010635c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010635f:	74 24                	je     c0106385 <check_pgdir+0x191>
c0106361:	c7 44 24 0c 01 da 10 	movl   $0xc010da01,0xc(%esp)
c0106368:	c0 
c0106369:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106370:	c0 
c0106371:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
c0106378:	00 
c0106379:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106380:	e8 4f aa ff ff       	call   c0100dd4 <__panic>
    assert(page_ref(p1) == 1);
c0106385:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106388:	89 04 24             	mov    %eax,(%esp)
c010638b:	e8 97 ec ff ff       	call   c0105027 <page_ref>
c0106390:	83 f8 01             	cmp    $0x1,%eax
c0106393:	74 24                	je     c01063b9 <check_pgdir+0x1c5>
c0106395:	c7 44 24 0c 16 da 10 	movl   $0xc010da16,0xc(%esp)
c010639c:	c0 
c010639d:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c01063a4:	c0 
c01063a5:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
c01063ac:	00 
c01063ad:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c01063b4:	e8 1b aa ff ff       	call   c0100dd4 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c01063b9:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c01063be:	8b 00                	mov    (%eax),%eax
c01063c0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01063c5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01063c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01063cb:	c1 e8 0c             	shr    $0xc,%eax
c01063ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01063d1:	a1 80 0d 1b c0       	mov    0xc01b0d80,%eax
c01063d6:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c01063d9:	72 23                	jb     c01063fe <check_pgdir+0x20a>
c01063db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01063de:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01063e2:	c7 44 24 08 6c d7 10 	movl   $0xc010d76c,0x8(%esp)
c01063e9:	c0 
c01063ea:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
c01063f1:	00 
c01063f2:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c01063f9:	e8 d6 a9 ff ff       	call   c0100dd4 <__panic>
c01063fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106401:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106406:	83 c0 04             	add    $0x4,%eax
c0106409:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c010640c:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c0106411:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106418:	00 
c0106419:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106420:	00 
c0106421:	89 04 24             	mov    %eax,(%esp)
c0106424:	e8 6a f5 ff ff       	call   c0105993 <get_pte>
c0106429:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010642c:	74 24                	je     c0106452 <check_pgdir+0x25e>
c010642e:	c7 44 24 0c 28 da 10 	movl   $0xc010da28,0xc(%esp)
c0106435:	c0 
c0106436:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c010643d:	c0 
c010643e:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c0106445:	00 
c0106446:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c010644d:	e8 82 a9 ff ff       	call   c0100dd4 <__panic>

    p2 = alloc_page();
c0106452:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106459:	e8 ce ed ff ff       	call   c010522c <alloc_pages>
c010645e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0106461:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c0106466:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c010646d:	00 
c010646e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106475:	00 
c0106476:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106479:	89 54 24 04          	mov    %edx,0x4(%esp)
c010647d:	89 04 24             	mov    %eax,(%esp)
c0106480:	e8 67 fb ff ff       	call   c0105fec <page_insert>
c0106485:	85 c0                	test   %eax,%eax
c0106487:	74 24                	je     c01064ad <check_pgdir+0x2b9>
c0106489:	c7 44 24 0c 50 da 10 	movl   $0xc010da50,0xc(%esp)
c0106490:	c0 
c0106491:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106498:	c0 
c0106499:	c7 44 24 04 98 02 00 	movl   $0x298,0x4(%esp)
c01064a0:	00 
c01064a1:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c01064a8:	e8 27 a9 ff ff       	call   c0100dd4 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01064ad:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c01064b2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01064b9:	00 
c01064ba:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01064c1:	00 
c01064c2:	89 04 24             	mov    %eax,(%esp)
c01064c5:	e8 c9 f4 ff ff       	call   c0105993 <get_pte>
c01064ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01064cd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01064d1:	75 24                	jne    c01064f7 <check_pgdir+0x303>
c01064d3:	c7 44 24 0c 88 da 10 	movl   $0xc010da88,0xc(%esp)
c01064da:	c0 
c01064db:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c01064e2:	c0 
c01064e3:	c7 44 24 04 99 02 00 	movl   $0x299,0x4(%esp)
c01064ea:	00 
c01064eb:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c01064f2:	e8 dd a8 ff ff       	call   c0100dd4 <__panic>
    assert(*ptep & PTE_U);
c01064f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01064fa:	8b 00                	mov    (%eax),%eax
c01064fc:	83 e0 04             	and    $0x4,%eax
c01064ff:	85 c0                	test   %eax,%eax
c0106501:	75 24                	jne    c0106527 <check_pgdir+0x333>
c0106503:	c7 44 24 0c b8 da 10 	movl   $0xc010dab8,0xc(%esp)
c010650a:	c0 
c010650b:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106512:	c0 
c0106513:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
c010651a:	00 
c010651b:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106522:	e8 ad a8 ff ff       	call   c0100dd4 <__panic>
    assert(*ptep & PTE_W);
c0106527:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010652a:	8b 00                	mov    (%eax),%eax
c010652c:	83 e0 02             	and    $0x2,%eax
c010652f:	85 c0                	test   %eax,%eax
c0106531:	75 24                	jne    c0106557 <check_pgdir+0x363>
c0106533:	c7 44 24 0c c6 da 10 	movl   $0xc010dac6,0xc(%esp)
c010653a:	c0 
c010653b:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106542:	c0 
c0106543:	c7 44 24 04 9b 02 00 	movl   $0x29b,0x4(%esp)
c010654a:	00 
c010654b:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106552:	e8 7d a8 ff ff       	call   c0100dd4 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c0106557:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c010655c:	8b 00                	mov    (%eax),%eax
c010655e:	83 e0 04             	and    $0x4,%eax
c0106561:	85 c0                	test   %eax,%eax
c0106563:	75 24                	jne    c0106589 <check_pgdir+0x395>
c0106565:	c7 44 24 0c d4 da 10 	movl   $0xc010dad4,0xc(%esp)
c010656c:	c0 
c010656d:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106574:	c0 
c0106575:	c7 44 24 04 9c 02 00 	movl   $0x29c,0x4(%esp)
c010657c:	00 
c010657d:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106584:	e8 4b a8 ff ff       	call   c0100dd4 <__panic>
    assert(page_ref(p2) == 1);
c0106589:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010658c:	89 04 24             	mov    %eax,(%esp)
c010658f:	e8 93 ea ff ff       	call   c0105027 <page_ref>
c0106594:	83 f8 01             	cmp    $0x1,%eax
c0106597:	74 24                	je     c01065bd <check_pgdir+0x3c9>
c0106599:	c7 44 24 0c ea da 10 	movl   $0xc010daea,0xc(%esp)
c01065a0:	c0 
c01065a1:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c01065a8:	c0 
c01065a9:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c01065b0:	00 
c01065b1:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c01065b8:	e8 17 a8 ff ff       	call   c0100dd4 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c01065bd:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c01065c2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01065c9:	00 
c01065ca:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01065d1:	00 
c01065d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01065d5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01065d9:	89 04 24             	mov    %eax,(%esp)
c01065dc:	e8 0b fa ff ff       	call   c0105fec <page_insert>
c01065e1:	85 c0                	test   %eax,%eax
c01065e3:	74 24                	je     c0106609 <check_pgdir+0x415>
c01065e5:	c7 44 24 0c fc da 10 	movl   $0xc010dafc,0xc(%esp)
c01065ec:	c0 
c01065ed:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c01065f4:	c0 
c01065f5:	c7 44 24 04 9f 02 00 	movl   $0x29f,0x4(%esp)
c01065fc:	00 
c01065fd:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106604:	e8 cb a7 ff ff       	call   c0100dd4 <__panic>
    assert(page_ref(p1) == 2);
c0106609:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010660c:	89 04 24             	mov    %eax,(%esp)
c010660f:	e8 13 ea ff ff       	call   c0105027 <page_ref>
c0106614:	83 f8 02             	cmp    $0x2,%eax
c0106617:	74 24                	je     c010663d <check_pgdir+0x449>
c0106619:	c7 44 24 0c 28 db 10 	movl   $0xc010db28,0xc(%esp)
c0106620:	c0 
c0106621:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106628:	c0 
c0106629:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
c0106630:	00 
c0106631:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106638:	e8 97 a7 ff ff       	call   c0100dd4 <__panic>
    assert(page_ref(p2) == 0);
c010663d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106640:	89 04 24             	mov    %eax,(%esp)
c0106643:	e8 df e9 ff ff       	call   c0105027 <page_ref>
c0106648:	85 c0                	test   %eax,%eax
c010664a:	74 24                	je     c0106670 <check_pgdir+0x47c>
c010664c:	c7 44 24 0c 3a db 10 	movl   $0xc010db3a,0xc(%esp)
c0106653:	c0 
c0106654:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c010665b:	c0 
c010665c:	c7 44 24 04 a1 02 00 	movl   $0x2a1,0x4(%esp)
c0106663:	00 
c0106664:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c010666b:	e8 64 a7 ff ff       	call   c0100dd4 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0106670:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c0106675:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010667c:	00 
c010667d:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106684:	00 
c0106685:	89 04 24             	mov    %eax,(%esp)
c0106688:	e8 06 f3 ff ff       	call   c0105993 <get_pte>
c010668d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106690:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106694:	75 24                	jne    c01066ba <check_pgdir+0x4c6>
c0106696:	c7 44 24 0c 88 da 10 	movl   $0xc010da88,0xc(%esp)
c010669d:	c0 
c010669e:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c01066a5:	c0 
c01066a6:	c7 44 24 04 a2 02 00 	movl   $0x2a2,0x4(%esp)
c01066ad:	00 
c01066ae:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c01066b5:	e8 1a a7 ff ff       	call   c0100dd4 <__panic>
    assert(pa2page(*ptep) == p1);
c01066ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01066bd:	8b 00                	mov    (%eax),%eax
c01066bf:	89 04 24             	mov    %eax,(%esp)
c01066c2:	e8 71 e8 ff ff       	call   c0104f38 <pa2page>
c01066c7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01066ca:	74 24                	je     c01066f0 <check_pgdir+0x4fc>
c01066cc:	c7 44 24 0c 01 da 10 	movl   $0xc010da01,0xc(%esp)
c01066d3:	c0 
c01066d4:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c01066db:	c0 
c01066dc:	c7 44 24 04 a3 02 00 	movl   $0x2a3,0x4(%esp)
c01066e3:	00 
c01066e4:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c01066eb:	e8 e4 a6 ff ff       	call   c0100dd4 <__panic>
    assert((*ptep & PTE_U) == 0);
c01066f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01066f3:	8b 00                	mov    (%eax),%eax
c01066f5:	83 e0 04             	and    $0x4,%eax
c01066f8:	85 c0                	test   %eax,%eax
c01066fa:	74 24                	je     c0106720 <check_pgdir+0x52c>
c01066fc:	c7 44 24 0c 4c db 10 	movl   $0xc010db4c,0xc(%esp)
c0106703:	c0 
c0106704:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c010670b:	c0 
c010670c:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c0106713:	00 
c0106714:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c010671b:	e8 b4 a6 ff ff       	call   c0100dd4 <__panic>

    page_remove(boot_pgdir, 0x0);
c0106720:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c0106725:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010672c:	00 
c010672d:	89 04 24             	mov    %eax,(%esp)
c0106730:	e8 73 f8 ff ff       	call   c0105fa8 <page_remove>
    assert(page_ref(p1) == 1);
c0106735:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106738:	89 04 24             	mov    %eax,(%esp)
c010673b:	e8 e7 e8 ff ff       	call   c0105027 <page_ref>
c0106740:	83 f8 01             	cmp    $0x1,%eax
c0106743:	74 24                	je     c0106769 <check_pgdir+0x575>
c0106745:	c7 44 24 0c 16 da 10 	movl   $0xc010da16,0xc(%esp)
c010674c:	c0 
c010674d:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106754:	c0 
c0106755:	c7 44 24 04 a7 02 00 	movl   $0x2a7,0x4(%esp)
c010675c:	00 
c010675d:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106764:	e8 6b a6 ff ff       	call   c0100dd4 <__panic>
    assert(page_ref(p2) == 0);
c0106769:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010676c:	89 04 24             	mov    %eax,(%esp)
c010676f:	e8 b3 e8 ff ff       	call   c0105027 <page_ref>
c0106774:	85 c0                	test   %eax,%eax
c0106776:	74 24                	je     c010679c <check_pgdir+0x5a8>
c0106778:	c7 44 24 0c 3a db 10 	movl   $0xc010db3a,0xc(%esp)
c010677f:	c0 
c0106780:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106787:	c0 
c0106788:	c7 44 24 04 a8 02 00 	movl   $0x2a8,0x4(%esp)
c010678f:	00 
c0106790:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106797:	e8 38 a6 ff ff       	call   c0100dd4 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c010679c:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c01067a1:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01067a8:	00 
c01067a9:	89 04 24             	mov    %eax,(%esp)
c01067ac:	e8 f7 f7 ff ff       	call   c0105fa8 <page_remove>
    assert(page_ref(p1) == 0);
c01067b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01067b4:	89 04 24             	mov    %eax,(%esp)
c01067b7:	e8 6b e8 ff ff       	call   c0105027 <page_ref>
c01067bc:	85 c0                	test   %eax,%eax
c01067be:	74 24                	je     c01067e4 <check_pgdir+0x5f0>
c01067c0:	c7 44 24 0c 61 db 10 	movl   $0xc010db61,0xc(%esp)
c01067c7:	c0 
c01067c8:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c01067cf:	c0 
c01067d0:	c7 44 24 04 ab 02 00 	movl   $0x2ab,0x4(%esp)
c01067d7:	00 
c01067d8:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c01067df:	e8 f0 a5 ff ff       	call   c0100dd4 <__panic>
    assert(page_ref(p2) == 0);
c01067e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01067e7:	89 04 24             	mov    %eax,(%esp)
c01067ea:	e8 38 e8 ff ff       	call   c0105027 <page_ref>
c01067ef:	85 c0                	test   %eax,%eax
c01067f1:	74 24                	je     c0106817 <check_pgdir+0x623>
c01067f3:	c7 44 24 0c 3a db 10 	movl   $0xc010db3a,0xc(%esp)
c01067fa:	c0 
c01067fb:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106802:	c0 
c0106803:	c7 44 24 04 ac 02 00 	movl   $0x2ac,0x4(%esp)
c010680a:	00 
c010680b:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106812:	e8 bd a5 ff ff       	call   c0100dd4 <__panic>

    assert(page_ref(pa2page(boot_pgdir[0])) == 1);
c0106817:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c010681c:	8b 00                	mov    (%eax),%eax
c010681e:	89 04 24             	mov    %eax,(%esp)
c0106821:	e8 12 e7 ff ff       	call   c0104f38 <pa2page>
c0106826:	89 04 24             	mov    %eax,(%esp)
c0106829:	e8 f9 e7 ff ff       	call   c0105027 <page_ref>
c010682e:	83 f8 01             	cmp    $0x1,%eax
c0106831:	74 24                	je     c0106857 <check_pgdir+0x663>
c0106833:	c7 44 24 0c 74 db 10 	movl   $0xc010db74,0xc(%esp)
c010683a:	c0 
c010683b:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106842:	c0 
c0106843:	c7 44 24 04 ae 02 00 	movl   $0x2ae,0x4(%esp)
c010684a:	00 
c010684b:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106852:	e8 7d a5 ff ff       	call   c0100dd4 <__panic>
    free_page(pa2page(boot_pgdir[0]));
c0106857:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c010685c:	8b 00                	mov    (%eax),%eax
c010685e:	89 04 24             	mov    %eax,(%esp)
c0106861:	e8 d2 e6 ff ff       	call   c0104f38 <pa2page>
c0106866:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010686d:	00 
c010686e:	89 04 24             	mov    %eax,(%esp)
c0106871:	e8 21 ea ff ff       	call   c0105297 <free_pages>
    boot_pgdir[0] = 0;
c0106876:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c010687b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0106881:	c7 04 24 9a db 10 c0 	movl   $0xc010db9a,(%esp)
c0106888:	e8 cb 9a ff ff       	call   c0100358 <cprintf>
}
c010688d:	c9                   	leave  
c010688e:	c3                   	ret    

c010688f <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c010688f:	55                   	push   %ebp
c0106890:	89 e5                	mov    %esp,%ebp
c0106892:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106895:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010689c:	e9 ca 00 00 00       	jmp    c010696b <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c01068a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01068a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01068a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068aa:	c1 e8 0c             	shr    $0xc,%eax
c01068ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01068b0:	a1 80 0d 1b c0       	mov    0xc01b0d80,%eax
c01068b5:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c01068b8:	72 23                	jb     c01068dd <check_boot_pgdir+0x4e>
c01068ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068bd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01068c1:	c7 44 24 08 6c d7 10 	movl   $0xc010d76c,0x8(%esp)
c01068c8:	c0 
c01068c9:	c7 44 24 04 ba 02 00 	movl   $0x2ba,0x4(%esp)
c01068d0:	00 
c01068d1:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c01068d8:	e8 f7 a4 ff ff       	call   c0100dd4 <__panic>
c01068dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068e0:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01068e5:	89 c2                	mov    %eax,%edx
c01068e7:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c01068ec:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01068f3:	00 
c01068f4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01068f8:	89 04 24             	mov    %eax,(%esp)
c01068fb:	e8 93 f0 ff ff       	call   c0105993 <get_pte>
c0106900:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106903:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106907:	75 24                	jne    c010692d <check_boot_pgdir+0x9e>
c0106909:	c7 44 24 0c b4 db 10 	movl   $0xc010dbb4,0xc(%esp)
c0106910:	c0 
c0106911:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106918:	c0 
c0106919:	c7 44 24 04 ba 02 00 	movl   $0x2ba,0x4(%esp)
c0106920:	00 
c0106921:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106928:	e8 a7 a4 ff ff       	call   c0100dd4 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c010692d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106930:	8b 00                	mov    (%eax),%eax
c0106932:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106937:	89 c2                	mov    %eax,%edx
c0106939:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010693c:	39 c2                	cmp    %eax,%edx
c010693e:	74 24                	je     c0106964 <check_boot_pgdir+0xd5>
c0106940:	c7 44 24 0c f1 db 10 	movl   $0xc010dbf1,0xc(%esp)
c0106947:	c0 
c0106948:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c010694f:	c0 
c0106950:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c0106957:	00 
c0106958:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c010695f:	e8 70 a4 ff ff       	call   c0100dd4 <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106964:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c010696b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010696e:	a1 80 0d 1b c0       	mov    0xc01b0d80,%eax
c0106973:	39 c2                	cmp    %eax,%edx
c0106975:	0f 82 26 ff ff ff    	jb     c01068a1 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c010697b:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c0106980:	05 ac 0f 00 00       	add    $0xfac,%eax
c0106985:	8b 00                	mov    (%eax),%eax
c0106987:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010698c:	89 c2                	mov    %eax,%edx
c010698e:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c0106993:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106996:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c010699d:	77 23                	ja     c01069c2 <check_boot_pgdir+0x133>
c010699f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01069a2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01069a6:	c7 44 24 08 10 d8 10 	movl   $0xc010d810,0x8(%esp)
c01069ad:	c0 
c01069ae:	c7 44 24 04 be 02 00 	movl   $0x2be,0x4(%esp)
c01069b5:	00 
c01069b6:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c01069bd:	e8 12 a4 ff ff       	call   c0100dd4 <__panic>
c01069c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01069c5:	05 00 00 00 40       	add    $0x40000000,%eax
c01069ca:	39 c2                	cmp    %eax,%edx
c01069cc:	74 24                	je     c01069f2 <check_boot_pgdir+0x163>
c01069ce:	c7 44 24 0c 08 dc 10 	movl   $0xc010dc08,0xc(%esp)
c01069d5:	c0 
c01069d6:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c01069dd:	c0 
c01069de:	c7 44 24 04 be 02 00 	movl   $0x2be,0x4(%esp)
c01069e5:	00 
c01069e6:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c01069ed:	e8 e2 a3 ff ff       	call   c0100dd4 <__panic>

    assert(boot_pgdir[0] == 0);
c01069f2:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c01069f7:	8b 00                	mov    (%eax),%eax
c01069f9:	85 c0                	test   %eax,%eax
c01069fb:	74 24                	je     c0106a21 <check_boot_pgdir+0x192>
c01069fd:	c7 44 24 0c 3c dc 10 	movl   $0xc010dc3c,0xc(%esp)
c0106a04:	c0 
c0106a05:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106a0c:	c0 
c0106a0d:	c7 44 24 04 c0 02 00 	movl   $0x2c0,0x4(%esp)
c0106a14:	00 
c0106a15:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106a1c:	e8 b3 a3 ff ff       	call   c0100dd4 <__panic>

    struct Page *p;
    p = alloc_page();
c0106a21:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106a28:	e8 ff e7 ff ff       	call   c010522c <alloc_pages>
c0106a2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0106a30:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c0106a35:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106a3c:	00 
c0106a3d:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0106a44:	00 
c0106a45:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106a48:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106a4c:	89 04 24             	mov    %eax,(%esp)
c0106a4f:	e8 98 f5 ff ff       	call   c0105fec <page_insert>
c0106a54:	85 c0                	test   %eax,%eax
c0106a56:	74 24                	je     c0106a7c <check_boot_pgdir+0x1ed>
c0106a58:	c7 44 24 0c 50 dc 10 	movl   $0xc010dc50,0xc(%esp)
c0106a5f:	c0 
c0106a60:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106a67:	c0 
c0106a68:	c7 44 24 04 c4 02 00 	movl   $0x2c4,0x4(%esp)
c0106a6f:	00 
c0106a70:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106a77:	e8 58 a3 ff ff       	call   c0100dd4 <__panic>
    assert(page_ref(p) == 1);
c0106a7c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a7f:	89 04 24             	mov    %eax,(%esp)
c0106a82:	e8 a0 e5 ff ff       	call   c0105027 <page_ref>
c0106a87:	83 f8 01             	cmp    $0x1,%eax
c0106a8a:	74 24                	je     c0106ab0 <check_boot_pgdir+0x221>
c0106a8c:	c7 44 24 0c 7e dc 10 	movl   $0xc010dc7e,0xc(%esp)
c0106a93:	c0 
c0106a94:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106a9b:	c0 
c0106a9c:	c7 44 24 04 c5 02 00 	movl   $0x2c5,0x4(%esp)
c0106aa3:	00 
c0106aa4:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106aab:	e8 24 a3 ff ff       	call   c0100dd4 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0106ab0:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c0106ab5:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106abc:	00 
c0106abd:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c0106ac4:	00 
c0106ac5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106ac8:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106acc:	89 04 24             	mov    %eax,(%esp)
c0106acf:	e8 18 f5 ff ff       	call   c0105fec <page_insert>
c0106ad4:	85 c0                	test   %eax,%eax
c0106ad6:	74 24                	je     c0106afc <check_boot_pgdir+0x26d>
c0106ad8:	c7 44 24 0c 90 dc 10 	movl   $0xc010dc90,0xc(%esp)
c0106adf:	c0 
c0106ae0:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106ae7:	c0 
c0106ae8:	c7 44 24 04 c6 02 00 	movl   $0x2c6,0x4(%esp)
c0106aef:	00 
c0106af0:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106af7:	e8 d8 a2 ff ff       	call   c0100dd4 <__panic>
    assert(page_ref(p) == 2);
c0106afc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106aff:	89 04 24             	mov    %eax,(%esp)
c0106b02:	e8 20 e5 ff ff       	call   c0105027 <page_ref>
c0106b07:	83 f8 02             	cmp    $0x2,%eax
c0106b0a:	74 24                	je     c0106b30 <check_boot_pgdir+0x2a1>
c0106b0c:	c7 44 24 0c c7 dc 10 	movl   $0xc010dcc7,0xc(%esp)
c0106b13:	c0 
c0106b14:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106b1b:	c0 
c0106b1c:	c7 44 24 04 c7 02 00 	movl   $0x2c7,0x4(%esp)
c0106b23:	00 
c0106b24:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106b2b:	e8 a4 a2 ff ff       	call   c0100dd4 <__panic>

    const char *str = "ucore: Hello world!!";
c0106b30:	c7 45 dc d8 dc 10 c0 	movl   $0xc010dcd8,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0106b37:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106b3a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106b3e:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106b45:	e8 cf 59 00 00       	call   c010c519 <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0106b4a:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106b51:	00 
c0106b52:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106b59:	e8 34 5a 00 00       	call   c010c592 <strcmp>
c0106b5e:	85 c0                	test   %eax,%eax
c0106b60:	74 24                	je     c0106b86 <check_boot_pgdir+0x2f7>
c0106b62:	c7 44 24 0c f0 dc 10 	movl   $0xc010dcf0,0xc(%esp)
c0106b69:	c0 
c0106b6a:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106b71:	c0 
c0106b72:	c7 44 24 04 cb 02 00 	movl   $0x2cb,0x4(%esp)
c0106b79:	00 
c0106b7a:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106b81:	e8 4e a2 ff ff       	call   c0100dd4 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0106b86:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106b89:	89 04 24             	mov    %eax,(%esp)
c0106b8c:	e8 ec e3 ff ff       	call   c0104f7d <page2kva>
c0106b91:	05 00 01 00 00       	add    $0x100,%eax
c0106b96:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106b99:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106ba0:	e8 1c 59 00 00       	call   c010c4c1 <strlen>
c0106ba5:	85 c0                	test   %eax,%eax
c0106ba7:	74 24                	je     c0106bcd <check_boot_pgdir+0x33e>
c0106ba9:	c7 44 24 0c 28 dd 10 	movl   $0xc010dd28,0xc(%esp)
c0106bb0:	c0 
c0106bb1:	c7 44 24 08 59 d8 10 	movl   $0xc010d859,0x8(%esp)
c0106bb8:	c0 
c0106bb9:	c7 44 24 04 ce 02 00 	movl   $0x2ce,0x4(%esp)
c0106bc0:	00 
c0106bc1:	c7 04 24 34 d8 10 c0 	movl   $0xc010d834,(%esp)
c0106bc8:	e8 07 a2 ff ff       	call   c0100dd4 <__panic>

    free_page(p);
c0106bcd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106bd4:	00 
c0106bd5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106bd8:	89 04 24             	mov    %eax,(%esp)
c0106bdb:	e8 b7 e6 ff ff       	call   c0105297 <free_pages>
    free_page(pa2page(PDE_ADDR(boot_pgdir[0])));
c0106be0:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c0106be5:	8b 00                	mov    (%eax),%eax
c0106be7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106bec:	89 04 24             	mov    %eax,(%esp)
c0106bef:	e8 44 e3 ff ff       	call   c0104f38 <pa2page>
c0106bf4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106bfb:	00 
c0106bfc:	89 04 24             	mov    %eax,(%esp)
c0106bff:	e8 93 e6 ff ff       	call   c0105297 <free_pages>
    boot_pgdir[0] = 0;
c0106c04:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c0106c09:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0106c0f:	c7 04 24 4c dd 10 c0 	movl   $0xc010dd4c,(%esp)
c0106c16:	e8 3d 97 ff ff       	call   c0100358 <cprintf>
}
c0106c1b:	c9                   	leave  
c0106c1c:	c3                   	ret    

c0106c1d <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106c1d:	55                   	push   %ebp
c0106c1e:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106c20:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c23:	83 e0 04             	and    $0x4,%eax
c0106c26:	85 c0                	test   %eax,%eax
c0106c28:	74 07                	je     c0106c31 <perm2str+0x14>
c0106c2a:	b8 75 00 00 00       	mov    $0x75,%eax
c0106c2f:	eb 05                	jmp    c0106c36 <perm2str+0x19>
c0106c31:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106c36:	a2 08 0e 1b c0       	mov    %al,0xc01b0e08
    str[1] = 'r';
c0106c3b:	c6 05 09 0e 1b c0 72 	movb   $0x72,0xc01b0e09
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106c42:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c45:	83 e0 02             	and    $0x2,%eax
c0106c48:	85 c0                	test   %eax,%eax
c0106c4a:	74 07                	je     c0106c53 <perm2str+0x36>
c0106c4c:	b8 77 00 00 00       	mov    $0x77,%eax
c0106c51:	eb 05                	jmp    c0106c58 <perm2str+0x3b>
c0106c53:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106c58:	a2 0a 0e 1b c0       	mov    %al,0xc01b0e0a
    str[3] = '\0';
c0106c5d:	c6 05 0b 0e 1b c0 00 	movb   $0x0,0xc01b0e0b
    return str;
c0106c64:	b8 08 0e 1b c0       	mov    $0xc01b0e08,%eax
}
c0106c69:	5d                   	pop    %ebp
c0106c6a:	c3                   	ret    

c0106c6b <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106c6b:	55                   	push   %ebp
c0106c6c:	89 e5                	mov    %esp,%ebp
c0106c6e:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106c71:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c74:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106c77:	72 0a                	jb     c0106c83 <get_pgtable_items+0x18>
        return 0;
c0106c79:	b8 00 00 00 00       	mov    $0x0,%eax
c0106c7e:	e9 9c 00 00 00       	jmp    c0106d1f <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106c83:	eb 04                	jmp    c0106c89 <get_pgtable_items+0x1e>
        start ++;
c0106c85:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106c89:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c8c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106c8f:	73 18                	jae    c0106ca9 <get_pgtable_items+0x3e>
c0106c91:	8b 45 10             	mov    0x10(%ebp),%eax
c0106c94:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106c9b:	8b 45 14             	mov    0x14(%ebp),%eax
c0106c9e:	01 d0                	add    %edx,%eax
c0106ca0:	8b 00                	mov    (%eax),%eax
c0106ca2:	83 e0 01             	and    $0x1,%eax
c0106ca5:	85 c0                	test   %eax,%eax
c0106ca7:	74 dc                	je     c0106c85 <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c0106ca9:	8b 45 10             	mov    0x10(%ebp),%eax
c0106cac:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106caf:	73 69                	jae    c0106d1a <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c0106cb1:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106cb5:	74 08                	je     c0106cbf <get_pgtable_items+0x54>
            *left_store = start;
c0106cb7:	8b 45 18             	mov    0x18(%ebp),%eax
c0106cba:	8b 55 10             	mov    0x10(%ebp),%edx
c0106cbd:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106cbf:	8b 45 10             	mov    0x10(%ebp),%eax
c0106cc2:	8d 50 01             	lea    0x1(%eax),%edx
c0106cc5:	89 55 10             	mov    %edx,0x10(%ebp)
c0106cc8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106ccf:	8b 45 14             	mov    0x14(%ebp),%eax
c0106cd2:	01 d0                	add    %edx,%eax
c0106cd4:	8b 00                	mov    (%eax),%eax
c0106cd6:	83 e0 07             	and    $0x7,%eax
c0106cd9:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106cdc:	eb 04                	jmp    c0106ce2 <get_pgtable_items+0x77>
            start ++;
c0106cde:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106ce2:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ce5:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106ce8:	73 1d                	jae    c0106d07 <get_pgtable_items+0x9c>
c0106cea:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ced:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106cf4:	8b 45 14             	mov    0x14(%ebp),%eax
c0106cf7:	01 d0                	add    %edx,%eax
c0106cf9:	8b 00                	mov    (%eax),%eax
c0106cfb:	83 e0 07             	and    $0x7,%eax
c0106cfe:	89 c2                	mov    %eax,%edx
c0106d00:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d03:	39 c2                	cmp    %eax,%edx
c0106d05:	74 d7                	je     c0106cde <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c0106d07:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0106d0b:	74 08                	je     c0106d15 <get_pgtable_items+0xaa>
            *right_store = start;
c0106d0d:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106d10:	8b 55 10             	mov    0x10(%ebp),%edx
c0106d13:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106d15:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d18:	eb 05                	jmp    c0106d1f <get_pgtable_items+0xb4>
    }
    return 0;
c0106d1a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106d1f:	c9                   	leave  
c0106d20:	c3                   	ret    

c0106d21 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106d21:	55                   	push   %ebp
c0106d22:	89 e5                	mov    %esp,%ebp
c0106d24:	57                   	push   %edi
c0106d25:	56                   	push   %esi
c0106d26:	53                   	push   %ebx
c0106d27:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106d2a:	c7 04 24 6c dd 10 c0 	movl   $0xc010dd6c,(%esp)
c0106d31:	e8 22 96 ff ff       	call   c0100358 <cprintf>
    size_t left, right = 0, perm;
c0106d36:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106d3d:	e9 fa 00 00 00       	jmp    c0106e3c <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106d42:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106d45:	89 04 24             	mov    %eax,(%esp)
c0106d48:	e8 d0 fe ff ff       	call   c0106c1d <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106d4d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106d50:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106d53:	29 d1                	sub    %edx,%ecx
c0106d55:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106d57:	89 d6                	mov    %edx,%esi
c0106d59:	c1 e6 16             	shl    $0x16,%esi
c0106d5c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106d5f:	89 d3                	mov    %edx,%ebx
c0106d61:	c1 e3 16             	shl    $0x16,%ebx
c0106d64:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106d67:	89 d1                	mov    %edx,%ecx
c0106d69:	c1 e1 16             	shl    $0x16,%ecx
c0106d6c:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0106d6f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106d72:	29 d7                	sub    %edx,%edi
c0106d74:	89 fa                	mov    %edi,%edx
c0106d76:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106d7a:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106d7e:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106d82:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106d86:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106d8a:	c7 04 24 9d dd 10 c0 	movl   $0xc010dd9d,(%esp)
c0106d91:	e8 c2 95 ff ff       	call   c0100358 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106d96:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106d99:	c1 e0 0a             	shl    $0xa,%eax
c0106d9c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106d9f:	eb 54                	jmp    c0106df5 <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106da1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106da4:	89 04 24             	mov    %eax,(%esp)
c0106da7:	e8 71 fe ff ff       	call   c0106c1d <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106dac:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106daf:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106db2:	29 d1                	sub    %edx,%ecx
c0106db4:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106db6:	89 d6                	mov    %edx,%esi
c0106db8:	c1 e6 0c             	shl    $0xc,%esi
c0106dbb:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106dbe:	89 d3                	mov    %edx,%ebx
c0106dc0:	c1 e3 0c             	shl    $0xc,%ebx
c0106dc3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106dc6:	c1 e2 0c             	shl    $0xc,%edx
c0106dc9:	89 d1                	mov    %edx,%ecx
c0106dcb:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0106dce:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106dd1:	29 d7                	sub    %edx,%edi
c0106dd3:	89 fa                	mov    %edi,%edx
c0106dd5:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106dd9:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106ddd:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106de1:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106de5:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106de9:	c7 04 24 bc dd 10 c0 	movl   $0xc010ddbc,(%esp)
c0106df0:	e8 63 95 ff ff       	call   c0100358 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106df5:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c0106dfa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106dfd:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106e00:	89 ce                	mov    %ecx,%esi
c0106e02:	c1 e6 0a             	shl    $0xa,%esi
c0106e05:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106e08:	89 cb                	mov    %ecx,%ebx
c0106e0a:	c1 e3 0a             	shl    $0xa,%ebx
c0106e0d:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0106e10:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106e14:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0106e17:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106e1b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106e1f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106e23:	89 74 24 04          	mov    %esi,0x4(%esp)
c0106e27:	89 1c 24             	mov    %ebx,(%esp)
c0106e2a:	e8 3c fe ff ff       	call   c0106c6b <get_pgtable_items>
c0106e2f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106e32:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106e36:	0f 85 65 ff ff ff    	jne    c0106da1 <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106e3c:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c0106e41:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106e44:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0106e47:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106e4b:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0106e4e:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106e52:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106e56:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106e5a:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106e61:	00 
c0106e62:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106e69:	e8 fd fd ff ff       	call   c0106c6b <get_pgtable_items>
c0106e6e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106e71:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106e75:	0f 85 c7 fe ff ff    	jne    c0106d42 <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106e7b:	c7 04 24 e0 dd 10 c0 	movl   $0xc010dde0,(%esp)
c0106e82:	e8 d1 94 ff ff       	call   c0100358 <cprintf>
}
c0106e87:	83 c4 4c             	add    $0x4c,%esp
c0106e8a:	5b                   	pop    %ebx
c0106e8b:	5e                   	pop    %esi
c0106e8c:	5f                   	pop    %edi
c0106e8d:	5d                   	pop    %ebp
c0106e8e:	c3                   	ret    

c0106e8f <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106e8f:	55                   	push   %ebp
c0106e90:	89 e5                	mov    %esp,%ebp
c0106e92:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106e95:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e98:	c1 e8 0c             	shr    $0xc,%eax
c0106e9b:	89 c2                	mov    %eax,%edx
c0106e9d:	a1 80 0d 1b c0       	mov    0xc01b0d80,%eax
c0106ea2:	39 c2                	cmp    %eax,%edx
c0106ea4:	72 1c                	jb     c0106ec2 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106ea6:	c7 44 24 08 14 de 10 	movl   $0xc010de14,0x8(%esp)
c0106ead:	c0 
c0106eae:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106eb5:	00 
c0106eb6:	c7 04 24 33 de 10 c0 	movl   $0xc010de33,(%esp)
c0106ebd:	e8 12 9f ff ff       	call   c0100dd4 <__panic>
    }
    return &pages[PPN(pa)];
c0106ec2:	a1 90 2e 1b c0       	mov    0xc01b2e90,%eax
c0106ec7:	8b 55 08             	mov    0x8(%ebp),%edx
c0106eca:	c1 ea 0c             	shr    $0xc,%edx
c0106ecd:	c1 e2 05             	shl    $0x5,%edx
c0106ed0:	01 d0                	add    %edx,%eax
}
c0106ed2:	c9                   	leave  
c0106ed3:	c3                   	ret    

c0106ed4 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106ed4:	55                   	push   %ebp
c0106ed5:	89 e5                	mov    %esp,%ebp
c0106ed7:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106eda:	8b 45 08             	mov    0x8(%ebp),%eax
c0106edd:	83 e0 01             	and    $0x1,%eax
c0106ee0:	85 c0                	test   %eax,%eax
c0106ee2:	75 1c                	jne    c0106f00 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106ee4:	c7 44 24 08 44 de 10 	movl   $0xc010de44,0x8(%esp)
c0106eeb:	c0 
c0106eec:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106ef3:	00 
c0106ef4:	c7 04 24 33 de 10 c0 	movl   $0xc010de33,(%esp)
c0106efb:	e8 d4 9e ff ff       	call   c0100dd4 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106f00:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f03:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106f08:	89 04 24             	mov    %eax,(%esp)
c0106f0b:	e8 7f ff ff ff       	call   c0106e8f <pa2page>
}
c0106f10:	c9                   	leave  
c0106f11:	c3                   	ret    

c0106f12 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106f12:	55                   	push   %ebp
c0106f13:	89 e5                	mov    %esp,%ebp
c0106f15:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106f18:	e8 20 23 00 00       	call   c010923d <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106f1d:	a1 3c 2f 1b c0       	mov    0xc01b2f3c,%eax
c0106f22:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106f27:	76 0c                	jbe    c0106f35 <swap_init+0x23>
c0106f29:	a1 3c 2f 1b c0       	mov    0xc01b2f3c,%eax
c0106f2e:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106f33:	76 25                	jbe    c0106f5a <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106f35:	a1 3c 2f 1b c0       	mov    0xc01b2f3c,%eax
c0106f3a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106f3e:	c7 44 24 08 65 de 10 	movl   $0xc010de65,0x8(%esp)
c0106f45:	c0 
c0106f46:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106f4d:	00 
c0106f4e:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c0106f55:	e8 7a 9e ff ff       	call   c0100dd4 <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106f5a:	c7 05 14 0e 1b c0 60 	movl   $0xc012ea60,0xc01b0e14
c0106f61:	ea 12 c0 
     int r = sm->init();
c0106f64:	a1 14 0e 1b c0       	mov    0xc01b0e14,%eax
c0106f69:	8b 40 04             	mov    0x4(%eax),%eax
c0106f6c:	ff d0                	call   *%eax
c0106f6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0106f71:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106f75:	75 26                	jne    c0106f9d <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0106f77:	c7 05 0c 0e 1b c0 01 	movl   $0x1,0xc01b0e0c
c0106f7e:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0106f81:	a1 14 0e 1b c0       	mov    0xc01b0e14,%eax
c0106f86:	8b 00                	mov    (%eax),%eax
c0106f88:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f8c:	c7 04 24 8f de 10 c0 	movl   $0xc010de8f,(%esp)
c0106f93:	e8 c0 93 ff ff       	call   c0100358 <cprintf>
          check_swap();
c0106f98:	e8 a4 04 00 00       	call   c0107441 <check_swap>
     }

     return r;
c0106f9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106fa0:	c9                   	leave  
c0106fa1:	c3                   	ret    

c0106fa2 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0106fa2:	55                   	push   %ebp
c0106fa3:	89 e5                	mov    %esp,%ebp
c0106fa5:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0106fa8:	a1 14 0e 1b c0       	mov    0xc01b0e14,%eax
c0106fad:	8b 40 08             	mov    0x8(%eax),%eax
c0106fb0:	8b 55 08             	mov    0x8(%ebp),%edx
c0106fb3:	89 14 24             	mov    %edx,(%esp)
c0106fb6:	ff d0                	call   *%eax
}
c0106fb8:	c9                   	leave  
c0106fb9:	c3                   	ret    

c0106fba <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0106fba:	55                   	push   %ebp
c0106fbb:	89 e5                	mov    %esp,%ebp
c0106fbd:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0106fc0:	a1 14 0e 1b c0       	mov    0xc01b0e14,%eax
c0106fc5:	8b 40 0c             	mov    0xc(%eax),%eax
c0106fc8:	8b 55 08             	mov    0x8(%ebp),%edx
c0106fcb:	89 14 24             	mov    %edx,(%esp)
c0106fce:	ff d0                	call   *%eax
}
c0106fd0:	c9                   	leave  
c0106fd1:	c3                   	ret    

c0106fd2 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0106fd2:	55                   	push   %ebp
c0106fd3:	89 e5                	mov    %esp,%ebp
c0106fd5:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0106fd8:	a1 14 0e 1b c0       	mov    0xc01b0e14,%eax
c0106fdd:	8b 40 10             	mov    0x10(%eax),%eax
c0106fe0:	8b 55 14             	mov    0x14(%ebp),%edx
c0106fe3:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106fe7:	8b 55 10             	mov    0x10(%ebp),%edx
c0106fea:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106fee:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106ff1:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ff5:	8b 55 08             	mov    0x8(%ebp),%edx
c0106ff8:	89 14 24             	mov    %edx,(%esp)
c0106ffb:	ff d0                	call   *%eax
}
c0106ffd:	c9                   	leave  
c0106ffe:	c3                   	ret    

c0106fff <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0106fff:	55                   	push   %ebp
c0107000:	89 e5                	mov    %esp,%ebp
c0107002:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c0107005:	a1 14 0e 1b c0       	mov    0xc01b0e14,%eax
c010700a:	8b 40 14             	mov    0x14(%eax),%eax
c010700d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107010:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107014:	8b 55 08             	mov    0x8(%ebp),%edx
c0107017:	89 14 24             	mov    %edx,(%esp)
c010701a:	ff d0                	call   *%eax
}
c010701c:	c9                   	leave  
c010701d:	c3                   	ret    

c010701e <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c010701e:	55                   	push   %ebp
c010701f:	89 e5                	mov    %esp,%ebp
c0107021:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0107024:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010702b:	e9 5a 01 00 00       	jmp    c010718a <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0107030:	a1 14 0e 1b c0       	mov    0xc01b0e14,%eax
c0107035:	8b 40 18             	mov    0x18(%eax),%eax
c0107038:	8b 55 10             	mov    0x10(%ebp),%edx
c010703b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010703f:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0107042:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107046:	8b 55 08             	mov    0x8(%ebp),%edx
c0107049:	89 14 24             	mov    %edx,(%esp)
c010704c:	ff d0                	call   *%eax
c010704e:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0107051:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107055:	74 18                	je     c010706f <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0107057:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010705a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010705e:	c7 04 24 a4 de 10 c0 	movl   $0xc010dea4,(%esp)
c0107065:	e8 ee 92 ff ff       	call   c0100358 <cprintf>
c010706a:	e9 27 01 00 00       	jmp    c0107196 <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c010706f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107072:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107075:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0107078:	8b 45 08             	mov    0x8(%ebp),%eax
c010707b:	8b 40 0c             	mov    0xc(%eax),%eax
c010707e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107085:	00 
c0107086:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107089:	89 54 24 04          	mov    %edx,0x4(%esp)
c010708d:	89 04 24             	mov    %eax,(%esp)
c0107090:	e8 fe e8 ff ff       	call   c0105993 <get_pte>
c0107095:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0107098:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010709b:	8b 00                	mov    (%eax),%eax
c010709d:	83 e0 01             	and    $0x1,%eax
c01070a0:	85 c0                	test   %eax,%eax
c01070a2:	75 24                	jne    c01070c8 <swap_out+0xaa>
c01070a4:	c7 44 24 0c d1 de 10 	movl   $0xc010ded1,0xc(%esp)
c01070ab:	c0 
c01070ac:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c01070b3:	c0 
c01070b4:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c01070bb:	00 
c01070bc:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c01070c3:	e8 0c 9d ff ff       	call   c0100dd4 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c01070c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01070cb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01070ce:	8b 52 1c             	mov    0x1c(%edx),%edx
c01070d1:	c1 ea 0c             	shr    $0xc,%edx
c01070d4:	83 c2 01             	add    $0x1,%edx
c01070d7:	c1 e2 08             	shl    $0x8,%edx
c01070da:	89 44 24 04          	mov    %eax,0x4(%esp)
c01070de:	89 14 24             	mov    %edx,(%esp)
c01070e1:	e8 11 22 00 00       	call   c01092f7 <swapfs_write>
c01070e6:	85 c0                	test   %eax,%eax
c01070e8:	74 34                	je     c010711e <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c01070ea:	c7 04 24 fb de 10 c0 	movl   $0xc010defb,(%esp)
c01070f1:	e8 62 92 ff ff       	call   c0100358 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c01070f6:	a1 14 0e 1b c0       	mov    0xc01b0e14,%eax
c01070fb:	8b 40 10             	mov    0x10(%eax),%eax
c01070fe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107101:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0107108:	00 
c0107109:	89 54 24 08          	mov    %edx,0x8(%esp)
c010710d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107110:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107114:	8b 55 08             	mov    0x8(%ebp),%edx
c0107117:	89 14 24             	mov    %edx,(%esp)
c010711a:	ff d0                	call   *%eax
c010711c:	eb 68                	jmp    c0107186 <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c010711e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107121:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107124:	c1 e8 0c             	shr    $0xc,%eax
c0107127:	83 c0 01             	add    $0x1,%eax
c010712a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010712e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107131:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107135:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107138:	89 44 24 04          	mov    %eax,0x4(%esp)
c010713c:	c7 04 24 14 df 10 c0 	movl   $0xc010df14,(%esp)
c0107143:	e8 10 92 ff ff       	call   c0100358 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0107148:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010714b:	8b 40 1c             	mov    0x1c(%eax),%eax
c010714e:	c1 e8 0c             	shr    $0xc,%eax
c0107151:	83 c0 01             	add    $0x1,%eax
c0107154:	c1 e0 08             	shl    $0x8,%eax
c0107157:	89 c2                	mov    %eax,%edx
c0107159:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010715c:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c010715e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107161:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107168:	00 
c0107169:	89 04 24             	mov    %eax,(%esp)
c010716c:	e8 26 e1 ff ff       	call   c0105297 <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c0107171:	8b 45 08             	mov    0x8(%ebp),%eax
c0107174:	8b 40 0c             	mov    0xc(%eax),%eax
c0107177:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010717a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010717e:	89 04 24             	mov    %eax,(%esp)
c0107181:	e8 1f ef ff ff       	call   c01060a5 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c0107186:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010718a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010718d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107190:	0f 85 9a fe ff ff    	jne    c0107030 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c0107196:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107199:	c9                   	leave  
c010719a:	c3                   	ret    

c010719b <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c010719b:	55                   	push   %ebp
c010719c:	89 e5                	mov    %esp,%ebp
c010719e:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c01071a1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01071a8:	e8 7f e0 ff ff       	call   c010522c <alloc_pages>
c01071ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c01071b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01071b4:	75 24                	jne    c01071da <swap_in+0x3f>
c01071b6:	c7 44 24 0c 54 df 10 	movl   $0xc010df54,0xc(%esp)
c01071bd:	c0 
c01071be:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c01071c5:	c0 
c01071c6:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c01071cd:	00 
c01071ce:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c01071d5:	e8 fa 9b ff ff       	call   c0100dd4 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c01071da:	8b 45 08             	mov    0x8(%ebp),%eax
c01071dd:	8b 40 0c             	mov    0xc(%eax),%eax
c01071e0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01071e7:	00 
c01071e8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01071eb:	89 54 24 04          	mov    %edx,0x4(%esp)
c01071ef:	89 04 24             	mov    %eax,(%esp)
c01071f2:	e8 9c e7 ff ff       	call   c0105993 <get_pte>
c01071f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c01071fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01071fd:	8b 00                	mov    (%eax),%eax
c01071ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107202:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107206:	89 04 24             	mov    %eax,(%esp)
c0107209:	e8 77 20 00 00       	call   c0109285 <swapfs_read>
c010720e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107211:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107215:	74 2a                	je     c0107241 <swap_in+0xa6>
     {
        assert(r!=0);
c0107217:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010721b:	75 24                	jne    c0107241 <swap_in+0xa6>
c010721d:	c7 44 24 0c 61 df 10 	movl   $0xc010df61,0xc(%esp)
c0107224:	c0 
c0107225:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c010722c:	c0 
c010722d:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c0107234:	00 
c0107235:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c010723c:	e8 93 9b ff ff       	call   c0100dd4 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0107241:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107244:	8b 00                	mov    (%eax),%eax
c0107246:	c1 e8 08             	shr    $0x8,%eax
c0107249:	89 c2                	mov    %eax,%edx
c010724b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010724e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107252:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107256:	c7 04 24 68 df 10 c0 	movl   $0xc010df68,(%esp)
c010725d:	e8 f6 90 ff ff       	call   c0100358 <cprintf>
     *ptr_result=result;
c0107262:	8b 45 10             	mov    0x10(%ebp),%eax
c0107265:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107268:	89 10                	mov    %edx,(%eax)
     return 0;
c010726a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010726f:	c9                   	leave  
c0107270:	c3                   	ret    

c0107271 <check_content_set>:



static inline void
check_content_set(void)
{
c0107271:	55                   	push   %ebp
c0107272:	89 e5                	mov    %esp,%ebp
c0107274:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c0107277:	b8 00 10 00 00       	mov    $0x1000,%eax
c010727c:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010727f:	a1 18 0e 1b c0       	mov    0xc01b0e18,%eax
c0107284:	83 f8 01             	cmp    $0x1,%eax
c0107287:	74 24                	je     c01072ad <check_content_set+0x3c>
c0107289:	c7 44 24 0c a6 df 10 	movl   $0xc010dfa6,0xc(%esp)
c0107290:	c0 
c0107291:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c0107298:	c0 
c0107299:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c01072a0:	00 
c01072a1:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c01072a8:	e8 27 9b ff ff       	call   c0100dd4 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c01072ad:	b8 10 10 00 00       	mov    $0x1010,%eax
c01072b2:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01072b5:	a1 18 0e 1b c0       	mov    0xc01b0e18,%eax
c01072ba:	83 f8 01             	cmp    $0x1,%eax
c01072bd:	74 24                	je     c01072e3 <check_content_set+0x72>
c01072bf:	c7 44 24 0c a6 df 10 	movl   $0xc010dfa6,0xc(%esp)
c01072c6:	c0 
c01072c7:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c01072ce:	c0 
c01072cf:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c01072d6:	00 
c01072d7:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c01072de:	e8 f1 9a ff ff       	call   c0100dd4 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c01072e3:	b8 00 20 00 00       	mov    $0x2000,%eax
c01072e8:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01072eb:	a1 18 0e 1b c0       	mov    0xc01b0e18,%eax
c01072f0:	83 f8 02             	cmp    $0x2,%eax
c01072f3:	74 24                	je     c0107319 <check_content_set+0xa8>
c01072f5:	c7 44 24 0c b5 df 10 	movl   $0xc010dfb5,0xc(%esp)
c01072fc:	c0 
c01072fd:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c0107304:	c0 
c0107305:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c010730c:	00 
c010730d:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c0107314:	e8 bb 9a ff ff       	call   c0100dd4 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c0107319:	b8 10 20 00 00       	mov    $0x2010,%eax
c010731e:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107321:	a1 18 0e 1b c0       	mov    0xc01b0e18,%eax
c0107326:	83 f8 02             	cmp    $0x2,%eax
c0107329:	74 24                	je     c010734f <check_content_set+0xde>
c010732b:	c7 44 24 0c b5 df 10 	movl   $0xc010dfb5,0xc(%esp)
c0107332:	c0 
c0107333:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c010733a:	c0 
c010733b:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c0107342:	00 
c0107343:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c010734a:	e8 85 9a ff ff       	call   c0100dd4 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c010734f:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107354:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0107357:	a1 18 0e 1b c0       	mov    0xc01b0e18,%eax
c010735c:	83 f8 03             	cmp    $0x3,%eax
c010735f:	74 24                	je     c0107385 <check_content_set+0x114>
c0107361:	c7 44 24 0c c4 df 10 	movl   $0xc010dfc4,0xc(%esp)
c0107368:	c0 
c0107369:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c0107370:	c0 
c0107371:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c0107378:	00 
c0107379:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c0107380:	e8 4f 9a ff ff       	call   c0100dd4 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c0107385:	b8 10 30 00 00       	mov    $0x3010,%eax
c010738a:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010738d:	a1 18 0e 1b c0       	mov    0xc01b0e18,%eax
c0107392:	83 f8 03             	cmp    $0x3,%eax
c0107395:	74 24                	je     c01073bb <check_content_set+0x14a>
c0107397:	c7 44 24 0c c4 df 10 	movl   $0xc010dfc4,0xc(%esp)
c010739e:	c0 
c010739f:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c01073a6:	c0 
c01073a7:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c01073ae:	00 
c01073af:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c01073b6:	e8 19 9a ff ff       	call   c0100dd4 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c01073bb:	b8 00 40 00 00       	mov    $0x4000,%eax
c01073c0:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01073c3:	a1 18 0e 1b c0       	mov    0xc01b0e18,%eax
c01073c8:	83 f8 04             	cmp    $0x4,%eax
c01073cb:	74 24                	je     c01073f1 <check_content_set+0x180>
c01073cd:	c7 44 24 0c d3 df 10 	movl   $0xc010dfd3,0xc(%esp)
c01073d4:	c0 
c01073d5:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c01073dc:	c0 
c01073dd:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c01073e4:	00 
c01073e5:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c01073ec:	e8 e3 99 ff ff       	call   c0100dd4 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c01073f1:	b8 10 40 00 00       	mov    $0x4010,%eax
c01073f6:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01073f9:	a1 18 0e 1b c0       	mov    0xc01b0e18,%eax
c01073fe:	83 f8 04             	cmp    $0x4,%eax
c0107401:	74 24                	je     c0107427 <check_content_set+0x1b6>
c0107403:	c7 44 24 0c d3 df 10 	movl   $0xc010dfd3,0xc(%esp)
c010740a:	c0 
c010740b:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c0107412:	c0 
c0107413:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010741a:	00 
c010741b:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c0107422:	e8 ad 99 ff ff       	call   c0100dd4 <__panic>
}
c0107427:	c9                   	leave  
c0107428:	c3                   	ret    

c0107429 <check_content_access>:

static inline int
check_content_access(void)
{
c0107429:	55                   	push   %ebp
c010742a:	89 e5                	mov    %esp,%ebp
c010742c:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c010742f:	a1 14 0e 1b c0       	mov    0xc01b0e14,%eax
c0107434:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107437:	ff d0                	call   *%eax
c0107439:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c010743c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010743f:	c9                   	leave  
c0107440:	c3                   	ret    

c0107441 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0107441:	55                   	push   %ebp
c0107442:	89 e5                	mov    %esp,%ebp
c0107444:	53                   	push   %ebx
c0107445:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c0107448:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010744f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0107456:	c7 45 e8 7c 2e 1b c0 	movl   $0xc01b2e7c,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c010745d:	eb 6b                	jmp    c01074ca <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c010745f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107462:	83 e8 0c             	sub    $0xc,%eax
c0107465:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c0107468:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010746b:	83 c0 04             	add    $0x4,%eax
c010746e:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c0107475:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107478:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010747b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010747e:	0f a3 10             	bt     %edx,(%eax)
c0107481:	19 c0                	sbb    %eax,%eax
c0107483:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c0107486:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010748a:	0f 95 c0             	setne  %al
c010748d:	0f b6 c0             	movzbl %al,%eax
c0107490:	85 c0                	test   %eax,%eax
c0107492:	75 24                	jne    c01074b8 <check_swap+0x77>
c0107494:	c7 44 24 0c e2 df 10 	movl   $0xc010dfe2,0xc(%esp)
c010749b:	c0 
c010749c:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c01074a3:	c0 
c01074a4:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c01074ab:	00 
c01074ac:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c01074b3:	e8 1c 99 ff ff       	call   c0100dd4 <__panic>
        count ++, total += p->property;
c01074b8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01074bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01074bf:	8b 50 08             	mov    0x8(%eax),%edx
c01074c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01074c5:	01 d0                	add    %edx,%eax
c01074c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01074ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01074cd:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01074d0:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01074d3:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01074d6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01074d9:	81 7d e8 7c 2e 1b c0 	cmpl   $0xc01b2e7c,-0x18(%ebp)
c01074e0:	0f 85 79 ff ff ff    	jne    c010745f <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c01074e6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01074e9:	e8 db dd ff ff       	call   c01052c9 <nr_free_pages>
c01074ee:	39 c3                	cmp    %eax,%ebx
c01074f0:	74 24                	je     c0107516 <check_swap+0xd5>
c01074f2:	c7 44 24 0c f2 df 10 	movl   $0xc010dff2,0xc(%esp)
c01074f9:	c0 
c01074fa:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c0107501:	c0 
c0107502:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c0107509:	00 
c010750a:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c0107511:	e8 be 98 ff ff       	call   c0100dd4 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0107516:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107519:	89 44 24 08          	mov    %eax,0x8(%esp)
c010751d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107520:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107524:	c7 04 24 0c e0 10 c0 	movl   $0xc010e00c,(%esp)
c010752b:	e8 28 8e ff ff       	call   c0100358 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0107530:	e8 9c 0a 00 00       	call   c0107fd1 <mm_create>
c0107535:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c0107538:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010753c:	75 24                	jne    c0107562 <check_swap+0x121>
c010753e:	c7 44 24 0c 32 e0 10 	movl   $0xc010e032,0xc(%esp)
c0107545:	c0 
c0107546:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c010754d:	c0 
c010754e:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c0107555:	00 
c0107556:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c010755d:	e8 72 98 ff ff       	call   c0100dd4 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0107562:	a1 6c 2f 1b c0       	mov    0xc01b2f6c,%eax
c0107567:	85 c0                	test   %eax,%eax
c0107569:	74 24                	je     c010758f <check_swap+0x14e>
c010756b:	c7 44 24 0c 3d e0 10 	movl   $0xc010e03d,0xc(%esp)
c0107572:	c0 
c0107573:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c010757a:	c0 
c010757b:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0107582:	00 
c0107583:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c010758a:	e8 45 98 ff ff       	call   c0100dd4 <__panic>

     check_mm_struct = mm;
c010758f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107592:	a3 6c 2f 1b c0       	mov    %eax,0xc01b2f6c

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c0107597:	8b 15 84 0d 1b c0    	mov    0xc01b0d84,%edx
c010759d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01075a0:	89 50 0c             	mov    %edx,0xc(%eax)
c01075a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01075a6:	8b 40 0c             	mov    0xc(%eax),%eax
c01075a9:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c01075ac:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01075af:	8b 00                	mov    (%eax),%eax
c01075b1:	85 c0                	test   %eax,%eax
c01075b3:	74 24                	je     c01075d9 <check_swap+0x198>
c01075b5:	c7 44 24 0c 55 e0 10 	movl   $0xc010e055,0xc(%esp)
c01075bc:	c0 
c01075bd:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c01075c4:	c0 
c01075c5:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c01075cc:	00 
c01075cd:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c01075d4:	e8 fb 97 ff ff       	call   c0100dd4 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c01075d9:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c01075e0:	00 
c01075e1:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c01075e8:	00 
c01075e9:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c01075f0:	e8 75 0a 00 00       	call   c010806a <vma_create>
c01075f5:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c01075f8:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01075fc:	75 24                	jne    c0107622 <check_swap+0x1e1>
c01075fe:	c7 44 24 0c 63 e0 10 	movl   $0xc010e063,0xc(%esp)
c0107605:	c0 
c0107606:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c010760d:	c0 
c010760e:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0107615:	00 
c0107616:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c010761d:	e8 b2 97 ff ff       	call   c0100dd4 <__panic>

     insert_vma_struct(mm, vma);
c0107622:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107625:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107629:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010762c:	89 04 24             	mov    %eax,(%esp)
c010762f:	e8 c6 0b 00 00       	call   c01081fa <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0107634:	c7 04 24 70 e0 10 c0 	movl   $0xc010e070,(%esp)
c010763b:	e8 18 8d ff ff       	call   c0100358 <cprintf>
     pte_t *temp_ptep=NULL;
c0107640:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c0107647:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010764a:	8b 40 0c             	mov    0xc(%eax),%eax
c010764d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0107654:	00 
c0107655:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010765c:	00 
c010765d:	89 04 24             	mov    %eax,(%esp)
c0107660:	e8 2e e3 ff ff       	call   c0105993 <get_pte>
c0107665:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c0107668:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c010766c:	75 24                	jne    c0107692 <check_swap+0x251>
c010766e:	c7 44 24 0c a4 e0 10 	movl   $0xc010e0a4,0xc(%esp)
c0107675:	c0 
c0107676:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c010767d:	c0 
c010767e:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0107685:	00 
c0107686:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c010768d:	e8 42 97 ff ff       	call   c0100dd4 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0107692:	c7 04 24 b8 e0 10 c0 	movl   $0xc010e0b8,(%esp)
c0107699:	e8 ba 8c ff ff       	call   c0100358 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010769e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01076a5:	e9 a3 00 00 00       	jmp    c010774d <check_swap+0x30c>
          check_rp[i] = alloc_page();
c01076aa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01076b1:	e8 76 db ff ff       	call   c010522c <alloc_pages>
c01076b6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01076b9:	89 04 95 a0 2e 1b c0 	mov    %eax,-0x3fe4d160(,%edx,4)
          assert(check_rp[i] != NULL );
c01076c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076c3:	8b 04 85 a0 2e 1b c0 	mov    -0x3fe4d160(,%eax,4),%eax
c01076ca:	85 c0                	test   %eax,%eax
c01076cc:	75 24                	jne    c01076f2 <check_swap+0x2b1>
c01076ce:	c7 44 24 0c dc e0 10 	movl   $0xc010e0dc,0xc(%esp)
c01076d5:	c0 
c01076d6:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c01076dd:	c0 
c01076de:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c01076e5:	00 
c01076e6:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c01076ed:	e8 e2 96 ff ff       	call   c0100dd4 <__panic>
          assert(!PageProperty(check_rp[i]));
c01076f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076f5:	8b 04 85 a0 2e 1b c0 	mov    -0x3fe4d160(,%eax,4),%eax
c01076fc:	83 c0 04             	add    $0x4,%eax
c01076ff:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c0107706:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107709:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010770c:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010770f:	0f a3 10             	bt     %edx,(%eax)
c0107712:	19 c0                	sbb    %eax,%eax
c0107714:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c0107717:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c010771b:	0f 95 c0             	setne  %al
c010771e:	0f b6 c0             	movzbl %al,%eax
c0107721:	85 c0                	test   %eax,%eax
c0107723:	74 24                	je     c0107749 <check_swap+0x308>
c0107725:	c7 44 24 0c f0 e0 10 	movl   $0xc010e0f0,0xc(%esp)
c010772c:	c0 
c010772d:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c0107734:	c0 
c0107735:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c010773c:	00 
c010773d:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c0107744:	e8 8b 96 ff ff       	call   c0100dd4 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107749:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010774d:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107751:	0f 8e 53 ff ff ff    	jle    c01076aa <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0107757:	a1 7c 2e 1b c0       	mov    0xc01b2e7c,%eax
c010775c:	8b 15 80 2e 1b c0    	mov    0xc01b2e80,%edx
c0107762:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107765:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0107768:	c7 45 a8 7c 2e 1b c0 	movl   $0xc01b2e7c,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010776f:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107772:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0107775:	89 50 04             	mov    %edx,0x4(%eax)
c0107778:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010777b:	8b 50 04             	mov    0x4(%eax),%edx
c010777e:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107781:	89 10                	mov    %edx,(%eax)
c0107783:	c7 45 a4 7c 2e 1b c0 	movl   $0xc01b2e7c,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010778a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010778d:	8b 40 04             	mov    0x4(%eax),%eax
c0107790:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c0107793:	0f 94 c0             	sete   %al
c0107796:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0107799:	85 c0                	test   %eax,%eax
c010779b:	75 24                	jne    c01077c1 <check_swap+0x380>
c010779d:	c7 44 24 0c 0b e1 10 	movl   $0xc010e10b,0xc(%esp)
c01077a4:	c0 
c01077a5:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c01077ac:	c0 
c01077ad:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c01077b4:	00 
c01077b5:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c01077bc:	e8 13 96 ff ff       	call   c0100dd4 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c01077c1:	a1 84 2e 1b c0       	mov    0xc01b2e84,%eax
c01077c6:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c01077c9:	c7 05 84 2e 1b c0 00 	movl   $0x0,0xc01b2e84
c01077d0:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01077d3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01077da:	eb 1e                	jmp    c01077fa <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c01077dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077df:	8b 04 85 a0 2e 1b c0 	mov    -0x3fe4d160(,%eax,4),%eax
c01077e6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01077ed:	00 
c01077ee:	89 04 24             	mov    %eax,(%esp)
c01077f1:	e8 a1 da ff ff       	call   c0105297 <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01077f6:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01077fa:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01077fe:	7e dc                	jle    c01077dc <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0107800:	a1 84 2e 1b c0       	mov    0xc01b2e84,%eax
c0107805:	83 f8 04             	cmp    $0x4,%eax
c0107808:	74 24                	je     c010782e <check_swap+0x3ed>
c010780a:	c7 44 24 0c 24 e1 10 	movl   $0xc010e124,0xc(%esp)
c0107811:	c0 
c0107812:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c0107819:	c0 
c010781a:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0107821:	00 
c0107822:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c0107829:	e8 a6 95 ff ff       	call   c0100dd4 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c010782e:	c7 04 24 48 e1 10 c0 	movl   $0xc010e148,(%esp)
c0107835:	e8 1e 8b ff ff       	call   c0100358 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c010783a:	c7 05 18 0e 1b c0 00 	movl   $0x0,0xc01b0e18
c0107841:	00 00 00 
     
     check_content_set();
c0107844:	e8 28 fa ff ff       	call   c0107271 <check_content_set>
     assert( nr_free == 0);         
c0107849:	a1 84 2e 1b c0       	mov    0xc01b2e84,%eax
c010784e:	85 c0                	test   %eax,%eax
c0107850:	74 24                	je     c0107876 <check_swap+0x435>
c0107852:	c7 44 24 0c 6f e1 10 	movl   $0xc010e16f,0xc(%esp)
c0107859:	c0 
c010785a:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c0107861:	c0 
c0107862:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0107869:	00 
c010786a:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c0107871:	e8 5e 95 ff ff       	call   c0100dd4 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107876:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010787d:	eb 26                	jmp    c01078a5 <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c010787f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107882:	c7 04 85 c0 2e 1b c0 	movl   $0xffffffff,-0x3fe4d140(,%eax,4)
c0107889:	ff ff ff ff 
c010788d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107890:	8b 14 85 c0 2e 1b c0 	mov    -0x3fe4d140(,%eax,4),%edx
c0107897:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010789a:	89 14 85 00 2f 1b c0 	mov    %edx,-0x3fe4d100(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01078a1:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01078a5:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c01078a9:	7e d4                	jle    c010787f <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01078ab:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01078b2:	e9 eb 00 00 00       	jmp    c01079a2 <check_swap+0x561>
         check_ptep[i]=0;
c01078b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078ba:	c7 04 85 54 2f 1b c0 	movl   $0x0,-0x3fe4d0ac(,%eax,4)
c01078c1:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c01078c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078c8:	83 c0 01             	add    $0x1,%eax
c01078cb:	c1 e0 0c             	shl    $0xc,%eax
c01078ce:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01078d5:	00 
c01078d6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01078da:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01078dd:	89 04 24             	mov    %eax,(%esp)
c01078e0:	e8 ae e0 ff ff       	call   c0105993 <get_pte>
c01078e5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01078e8:	89 04 95 54 2f 1b c0 	mov    %eax,-0x3fe4d0ac(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c01078ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078f2:	8b 04 85 54 2f 1b c0 	mov    -0x3fe4d0ac(,%eax,4),%eax
c01078f9:	85 c0                	test   %eax,%eax
c01078fb:	75 24                	jne    c0107921 <check_swap+0x4e0>
c01078fd:	c7 44 24 0c 7c e1 10 	movl   $0xc010e17c,0xc(%esp)
c0107904:	c0 
c0107905:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c010790c:	c0 
c010790d:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0107914:	00 
c0107915:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c010791c:	e8 b3 94 ff ff       	call   c0100dd4 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0107921:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107924:	8b 04 85 54 2f 1b c0 	mov    -0x3fe4d0ac(,%eax,4),%eax
c010792b:	8b 00                	mov    (%eax),%eax
c010792d:	89 04 24             	mov    %eax,(%esp)
c0107930:	e8 9f f5 ff ff       	call   c0106ed4 <pte2page>
c0107935:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107938:	8b 14 95 a0 2e 1b c0 	mov    -0x3fe4d160(,%edx,4),%edx
c010793f:	39 d0                	cmp    %edx,%eax
c0107941:	74 24                	je     c0107967 <check_swap+0x526>
c0107943:	c7 44 24 0c 94 e1 10 	movl   $0xc010e194,0xc(%esp)
c010794a:	c0 
c010794b:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c0107952:	c0 
c0107953:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c010795a:	00 
c010795b:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c0107962:	e8 6d 94 ff ff       	call   c0100dd4 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0107967:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010796a:	8b 04 85 54 2f 1b c0 	mov    -0x3fe4d0ac(,%eax,4),%eax
c0107971:	8b 00                	mov    (%eax),%eax
c0107973:	83 e0 01             	and    $0x1,%eax
c0107976:	85 c0                	test   %eax,%eax
c0107978:	75 24                	jne    c010799e <check_swap+0x55d>
c010797a:	c7 44 24 0c bc e1 10 	movl   $0xc010e1bc,0xc(%esp)
c0107981:	c0 
c0107982:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c0107989:	c0 
c010798a:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0107991:	00 
c0107992:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c0107999:	e8 36 94 ff ff       	call   c0100dd4 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010799e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01079a2:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01079a6:	0f 8e 0b ff ff ff    	jle    c01078b7 <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c01079ac:	c7 04 24 d8 e1 10 c0 	movl   $0xc010e1d8,(%esp)
c01079b3:	e8 a0 89 ff ff       	call   c0100358 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c01079b8:	e8 6c fa ff ff       	call   c0107429 <check_content_access>
c01079bd:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c01079c0:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01079c4:	74 24                	je     c01079ea <check_swap+0x5a9>
c01079c6:	c7 44 24 0c fe e1 10 	movl   $0xc010e1fe,0xc(%esp)
c01079cd:	c0 
c01079ce:	c7 44 24 08 e6 de 10 	movl   $0xc010dee6,0x8(%esp)
c01079d5:	c0 
c01079d6:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c01079dd:	00 
c01079de:	c7 04 24 80 de 10 c0 	movl   $0xc010de80,(%esp)
c01079e5:	e8 ea 93 ff ff       	call   c0100dd4 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01079ea:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01079f1:	eb 1e                	jmp    c0107a11 <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c01079f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01079f6:	8b 04 85 a0 2e 1b c0 	mov    -0x3fe4d160(,%eax,4),%eax
c01079fd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107a04:	00 
c0107a05:	89 04 24             	mov    %eax,(%esp)
c0107a08:	e8 8a d8 ff ff       	call   c0105297 <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107a0d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107a11:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107a15:	7e dc                	jle    c01079f3 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pa2page(pgdir[0]));
c0107a17:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107a1a:	8b 00                	mov    (%eax),%eax
c0107a1c:	89 04 24             	mov    %eax,(%esp)
c0107a1f:	e8 6b f4 ff ff       	call   c0106e8f <pa2page>
c0107a24:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107a2b:	00 
c0107a2c:	89 04 24             	mov    %eax,(%esp)
c0107a2f:	e8 63 d8 ff ff       	call   c0105297 <free_pages>
     pgdir[0] = 0;
c0107a34:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107a37:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0107a3d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107a40:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0107a47:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107a4a:	89 04 24             	mov    %eax,(%esp)
c0107a4d:	e8 d8 08 00 00       	call   c010832a <mm_destroy>
     check_mm_struct = NULL;
c0107a52:	c7 05 6c 2f 1b c0 00 	movl   $0x0,0xc01b2f6c
c0107a59:	00 00 00 
     
     nr_free = nr_free_store;
c0107a5c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107a5f:	a3 84 2e 1b c0       	mov    %eax,0xc01b2e84
     free_list = free_list_store;
c0107a64:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107a67:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0107a6a:	a3 7c 2e 1b c0       	mov    %eax,0xc01b2e7c
c0107a6f:	89 15 80 2e 1b c0    	mov    %edx,0xc01b2e80

     
     le = &free_list;
c0107a75:	c7 45 e8 7c 2e 1b c0 	movl   $0xc01b2e7c,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107a7c:	eb 1d                	jmp    c0107a9b <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c0107a7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a81:	83 e8 0c             	sub    $0xc,%eax
c0107a84:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c0107a87:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0107a8b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107a8e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107a91:	8b 40 08             	mov    0x8(%eax),%eax
c0107a94:	29 c2                	sub    %eax,%edx
c0107a96:	89 d0                	mov    %edx,%eax
c0107a98:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107a9b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a9e:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107aa1:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107aa4:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0107aa7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107aaa:	81 7d e8 7c 2e 1b c0 	cmpl   $0xc01b2e7c,-0x18(%ebp)
c0107ab1:	75 cb                	jne    c0107a7e <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0107ab3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ab6:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107aba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107abd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107ac1:	c7 04 24 05 e2 10 c0 	movl   $0xc010e205,(%esp)
c0107ac8:	e8 8b 88 ff ff       	call   c0100358 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0107acd:	c7 04 24 1f e2 10 c0 	movl   $0xc010e21f,(%esp)
c0107ad4:	e8 7f 88 ff ff       	call   c0100358 <cprintf>
}
c0107ad9:	83 c4 74             	add    $0x74,%esp
c0107adc:	5b                   	pop    %ebx
c0107add:	5d                   	pop    %ebp
c0107ade:	c3                   	ret    

c0107adf <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0107adf:	55                   	push   %ebp
c0107ae0:	89 e5                	mov    %esp,%ebp
c0107ae2:	83 ec 10             	sub    $0x10,%esp
c0107ae5:	c7 45 fc 64 2f 1b c0 	movl   $0xc01b2f64,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107aec:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107aef:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107af2:	89 50 04             	mov    %edx,0x4(%eax)
c0107af5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107af8:	8b 50 04             	mov    0x4(%eax),%edx
c0107afb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107afe:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0107b00:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b03:	c7 40 14 64 2f 1b c0 	movl   $0xc01b2f64,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0107b0a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107b0f:	c9                   	leave  
c0107b10:	c3                   	ret    

c0107b11 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107b11:	55                   	push   %ebp
c0107b12:	89 e5                	mov    %esp,%ebp
c0107b14:	83 ec 38             	sub    $0x38,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107b17:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b1a:	8b 40 14             	mov    0x14(%eax),%eax
c0107b1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0107b20:	8b 45 10             	mov    0x10(%ebp),%eax
c0107b23:	83 c0 14             	add    $0x14,%eax
c0107b26:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0107b29:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107b2d:	74 06                	je     c0107b35 <_fifo_map_swappable+0x24>
c0107b2f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107b33:	75 24                	jne    c0107b59 <_fifo_map_swappable+0x48>
c0107b35:	c7 44 24 0c 38 e2 10 	movl   $0xc010e238,0xc(%esp)
c0107b3c:	c0 
c0107b3d:	c7 44 24 08 56 e2 10 	movl   $0xc010e256,0x8(%esp)
c0107b44:	c0 
c0107b45:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0107b4c:	00 
c0107b4d:	c7 04 24 6b e2 10 c0 	movl   $0xc010e26b,(%esp)
c0107b54:	e8 7b 92 ff ff       	call   c0100dd4 <__panic>
c0107b59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b5c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107b5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b62:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0107b65:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107b68:	8b 40 04             	mov    0x4(%eax),%eax
c0107b6b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107b6e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107b71:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107b74:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0107b77:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107b7a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107b7d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107b80:	89 10                	mov    %edx,(%eax)
c0107b82:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107b85:	8b 10                	mov    (%eax),%edx
c0107b87:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107b8a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107b8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107b90:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107b93:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107b96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107b99:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107b9c:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add_after(head, entry);
    return 0;
c0107b9e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107ba3:	c9                   	leave  
c0107ba4:	c3                   	ret    

c0107ba5 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0107ba5:	55                   	push   %ebp
c0107ba6:	89 e5                	mov    %esp,%ebp
c0107ba8:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107bab:	8b 45 08             	mov    0x8(%ebp),%eax
c0107bae:	8b 40 14             	mov    0x14(%eax),%eax
c0107bb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0107bb4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107bb8:	75 24                	jne    c0107bde <_fifo_swap_out_victim+0x39>
c0107bba:	c7 44 24 0c 7f e2 10 	movl   $0xc010e27f,0xc(%esp)
c0107bc1:	c0 
c0107bc2:	c7 44 24 08 56 e2 10 	movl   $0xc010e256,0x8(%esp)
c0107bc9:	c0 
c0107bca:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0107bd1:	00 
c0107bd2:	c7 04 24 6b e2 10 c0 	movl   $0xc010e26b,(%esp)
c0107bd9:	e8 f6 91 ff ff       	call   c0100dd4 <__panic>
     assert(in_tick==0);
c0107bde:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107be2:	74 24                	je     c0107c08 <_fifo_swap_out_victim+0x63>
c0107be4:	c7 44 24 0c 8c e2 10 	movl   $0xc010e28c,0xc(%esp)
c0107beb:	c0 
c0107bec:	c7 44 24 08 56 e2 10 	movl   $0xc010e256,0x8(%esp)
c0107bf3:	c0 
c0107bf4:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0107bfb:	00 
c0107bfc:	c7 04 24 6b e2 10 c0 	movl   $0xc010e26b,(%esp)
c0107c03:	e8 cc 91 ff ff       	call   c0100dd4 <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     list_entry_t* tar = head->prev;
c0107c08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107c0b:	8b 00                	mov    (%eax),%eax
c0107c0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(tar != head);
c0107c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107c13:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0107c16:	75 24                	jne    c0107c3c <_fifo_swap_out_victim+0x97>
c0107c18:	c7 44 24 0c 97 e2 10 	movl   $0xc010e297,0xc(%esp)
c0107c1f:	c0 
c0107c20:	c7 44 24 08 56 e2 10 	movl   $0xc010e256,0x8(%esp)
c0107c27:	c0 
c0107c28:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c0107c2f:	00 
c0107c30:	c7 04 24 6b e2 10 c0 	movl   $0xc010e26b,(%esp)
c0107c37:	e8 98 91 ff ff       	call   c0100dd4 <__panic>
     struct Page* p = le2page(tar, pra_page_link);
c0107c3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107c3f:	83 e8 14             	sub    $0x14,%eax
c0107c42:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107c45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107c48:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107c4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107c4e:	8b 40 04             	mov    0x4(%eax),%eax
c0107c51:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107c54:	8b 12                	mov    (%edx),%edx
c0107c56:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107c59:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107c5c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107c5f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107c62:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107c65:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107c68:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107c6b:	89 10                	mov    %edx,(%eax)
     list_del(tar);
     assert(p != NULL);
c0107c6d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107c71:	75 24                	jne    c0107c97 <_fifo_swap_out_victim+0xf2>
c0107c73:	c7 44 24 0c a3 e2 10 	movl   $0xc010e2a3,0xc(%esp)
c0107c7a:	c0 
c0107c7b:	c7 44 24 08 56 e2 10 	movl   $0xc010e256,0x8(%esp)
c0107c82:	c0 
c0107c83:	c7 44 24 04 4b 00 00 	movl   $0x4b,0x4(%esp)
c0107c8a:	00 
c0107c8b:	c7 04 24 6b e2 10 c0 	movl   $0xc010e26b,(%esp)
c0107c92:	e8 3d 91 ff ff       	call   c0100dd4 <__panic>
     *ptr_page = p;
c0107c97:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c9a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107c9d:	89 10                	mov    %edx,(%eax)
     return 0;
c0107c9f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107ca4:	c9                   	leave  
c0107ca5:	c3                   	ret    

c0107ca6 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107ca6:	55                   	push   %ebp
c0107ca7:	89 e5                	mov    %esp,%ebp
c0107ca9:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107cac:	c7 04 24 b0 e2 10 c0 	movl   $0xc010e2b0,(%esp)
c0107cb3:	e8 a0 86 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107cb8:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107cbd:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107cc0:	a1 18 0e 1b c0       	mov    0xc01b0e18,%eax
c0107cc5:	83 f8 04             	cmp    $0x4,%eax
c0107cc8:	74 24                	je     c0107cee <_fifo_check_swap+0x48>
c0107cca:	c7 44 24 0c d6 e2 10 	movl   $0xc010e2d6,0xc(%esp)
c0107cd1:	c0 
c0107cd2:	c7 44 24 08 56 e2 10 	movl   $0xc010e256,0x8(%esp)
c0107cd9:	c0 
c0107cda:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c0107ce1:	00 
c0107ce2:	c7 04 24 6b e2 10 c0 	movl   $0xc010e26b,(%esp)
c0107ce9:	e8 e6 90 ff ff       	call   c0100dd4 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107cee:	c7 04 24 e8 e2 10 c0 	movl   $0xc010e2e8,(%esp)
c0107cf5:	e8 5e 86 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107cfa:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107cff:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0107d02:	a1 18 0e 1b c0       	mov    0xc01b0e18,%eax
c0107d07:	83 f8 04             	cmp    $0x4,%eax
c0107d0a:	74 24                	je     c0107d30 <_fifo_check_swap+0x8a>
c0107d0c:	c7 44 24 0c d6 e2 10 	movl   $0xc010e2d6,0xc(%esp)
c0107d13:	c0 
c0107d14:	c7 44 24 08 56 e2 10 	movl   $0xc010e256,0x8(%esp)
c0107d1b:	c0 
c0107d1c:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0107d23:	00 
c0107d24:	c7 04 24 6b e2 10 c0 	movl   $0xc010e26b,(%esp)
c0107d2b:	e8 a4 90 ff ff       	call   c0100dd4 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107d30:	c7 04 24 10 e3 10 c0 	movl   $0xc010e310,(%esp)
c0107d37:	e8 1c 86 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107d3c:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107d41:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0107d44:	a1 18 0e 1b c0       	mov    0xc01b0e18,%eax
c0107d49:	83 f8 04             	cmp    $0x4,%eax
c0107d4c:	74 24                	je     c0107d72 <_fifo_check_swap+0xcc>
c0107d4e:	c7 44 24 0c d6 e2 10 	movl   $0xc010e2d6,0xc(%esp)
c0107d55:	c0 
c0107d56:	c7 44 24 08 56 e2 10 	movl   $0xc010e256,0x8(%esp)
c0107d5d:	c0 
c0107d5e:	c7 44 24 04 5a 00 00 	movl   $0x5a,0x4(%esp)
c0107d65:	00 
c0107d66:	c7 04 24 6b e2 10 c0 	movl   $0xc010e26b,(%esp)
c0107d6d:	e8 62 90 ff ff       	call   c0100dd4 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107d72:	c7 04 24 38 e3 10 c0 	movl   $0xc010e338,(%esp)
c0107d79:	e8 da 85 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107d7e:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107d83:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107d86:	a1 18 0e 1b c0       	mov    0xc01b0e18,%eax
c0107d8b:	83 f8 04             	cmp    $0x4,%eax
c0107d8e:	74 24                	je     c0107db4 <_fifo_check_swap+0x10e>
c0107d90:	c7 44 24 0c d6 e2 10 	movl   $0xc010e2d6,0xc(%esp)
c0107d97:	c0 
c0107d98:	c7 44 24 08 56 e2 10 	movl   $0xc010e256,0x8(%esp)
c0107d9f:	c0 
c0107da0:	c7 44 24 04 5d 00 00 	movl   $0x5d,0x4(%esp)
c0107da7:	00 
c0107da8:	c7 04 24 6b e2 10 c0 	movl   $0xc010e26b,(%esp)
c0107daf:	e8 20 90 ff ff       	call   c0100dd4 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107db4:	c7 04 24 60 e3 10 c0 	movl   $0xc010e360,(%esp)
c0107dbb:	e8 98 85 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107dc0:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107dc5:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107dc8:	a1 18 0e 1b c0       	mov    0xc01b0e18,%eax
c0107dcd:	83 f8 05             	cmp    $0x5,%eax
c0107dd0:	74 24                	je     c0107df6 <_fifo_check_swap+0x150>
c0107dd2:	c7 44 24 0c 86 e3 10 	movl   $0xc010e386,0xc(%esp)
c0107dd9:	c0 
c0107dda:	c7 44 24 08 56 e2 10 	movl   $0xc010e256,0x8(%esp)
c0107de1:	c0 
c0107de2:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c0107de9:	00 
c0107dea:	c7 04 24 6b e2 10 c0 	movl   $0xc010e26b,(%esp)
c0107df1:	e8 de 8f ff ff       	call   c0100dd4 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107df6:	c7 04 24 38 e3 10 c0 	movl   $0xc010e338,(%esp)
c0107dfd:	e8 56 85 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107e02:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107e07:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0107e0a:	a1 18 0e 1b c0       	mov    0xc01b0e18,%eax
c0107e0f:	83 f8 05             	cmp    $0x5,%eax
c0107e12:	74 24                	je     c0107e38 <_fifo_check_swap+0x192>
c0107e14:	c7 44 24 0c 86 e3 10 	movl   $0xc010e386,0xc(%esp)
c0107e1b:	c0 
c0107e1c:	c7 44 24 08 56 e2 10 	movl   $0xc010e256,0x8(%esp)
c0107e23:	c0 
c0107e24:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c0107e2b:	00 
c0107e2c:	c7 04 24 6b e2 10 c0 	movl   $0xc010e26b,(%esp)
c0107e33:	e8 9c 8f ff ff       	call   c0100dd4 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107e38:	c7 04 24 e8 e2 10 c0 	movl   $0xc010e2e8,(%esp)
c0107e3f:	e8 14 85 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107e44:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107e49:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0107e4c:	a1 18 0e 1b c0       	mov    0xc01b0e18,%eax
c0107e51:	83 f8 06             	cmp    $0x6,%eax
c0107e54:	74 24                	je     c0107e7a <_fifo_check_swap+0x1d4>
c0107e56:	c7 44 24 0c 95 e3 10 	movl   $0xc010e395,0xc(%esp)
c0107e5d:	c0 
c0107e5e:	c7 44 24 08 56 e2 10 	movl   $0xc010e256,0x8(%esp)
c0107e65:	c0 
c0107e66:	c7 44 24 04 66 00 00 	movl   $0x66,0x4(%esp)
c0107e6d:	00 
c0107e6e:	c7 04 24 6b e2 10 c0 	movl   $0xc010e26b,(%esp)
c0107e75:	e8 5a 8f ff ff       	call   c0100dd4 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107e7a:	c7 04 24 38 e3 10 c0 	movl   $0xc010e338,(%esp)
c0107e81:	e8 d2 84 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107e86:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107e8b:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107e8e:	a1 18 0e 1b c0       	mov    0xc01b0e18,%eax
c0107e93:	83 f8 07             	cmp    $0x7,%eax
c0107e96:	74 24                	je     c0107ebc <_fifo_check_swap+0x216>
c0107e98:	c7 44 24 0c a4 e3 10 	movl   $0xc010e3a4,0xc(%esp)
c0107e9f:	c0 
c0107ea0:	c7 44 24 08 56 e2 10 	movl   $0xc010e256,0x8(%esp)
c0107ea7:	c0 
c0107ea8:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
c0107eaf:	00 
c0107eb0:	c7 04 24 6b e2 10 c0 	movl   $0xc010e26b,(%esp)
c0107eb7:	e8 18 8f ff ff       	call   c0100dd4 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107ebc:	c7 04 24 b0 e2 10 c0 	movl   $0xc010e2b0,(%esp)
c0107ec3:	e8 90 84 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107ec8:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107ecd:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107ed0:	a1 18 0e 1b c0       	mov    0xc01b0e18,%eax
c0107ed5:	83 f8 08             	cmp    $0x8,%eax
c0107ed8:	74 24                	je     c0107efe <_fifo_check_swap+0x258>
c0107eda:	c7 44 24 0c b3 e3 10 	movl   $0xc010e3b3,0xc(%esp)
c0107ee1:	c0 
c0107ee2:	c7 44 24 08 56 e2 10 	movl   $0xc010e256,0x8(%esp)
c0107ee9:	c0 
c0107eea:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0107ef1:	00 
c0107ef2:	c7 04 24 6b e2 10 c0 	movl   $0xc010e26b,(%esp)
c0107ef9:	e8 d6 8e ff ff       	call   c0100dd4 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107efe:	c7 04 24 10 e3 10 c0 	movl   $0xc010e310,(%esp)
c0107f05:	e8 4e 84 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107f0a:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107f0f:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107f12:	a1 18 0e 1b c0       	mov    0xc01b0e18,%eax
c0107f17:	83 f8 09             	cmp    $0x9,%eax
c0107f1a:	74 24                	je     c0107f40 <_fifo_check_swap+0x29a>
c0107f1c:	c7 44 24 0c c2 e3 10 	movl   $0xc010e3c2,0xc(%esp)
c0107f23:	c0 
c0107f24:	c7 44 24 08 56 e2 10 	movl   $0xc010e256,0x8(%esp)
c0107f2b:	c0 
c0107f2c:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c0107f33:	00 
c0107f34:	c7 04 24 6b e2 10 c0 	movl   $0xc010e26b,(%esp)
c0107f3b:	e8 94 8e ff ff       	call   c0100dd4 <__panic>
    return 0;
c0107f40:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107f45:	c9                   	leave  
c0107f46:	c3                   	ret    

c0107f47 <_fifo_init>:


static int
_fifo_init(void)
{
c0107f47:	55                   	push   %ebp
c0107f48:	89 e5                	mov    %esp,%ebp
    return 0;
c0107f4a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107f4f:	5d                   	pop    %ebp
c0107f50:	c3                   	ret    

c0107f51 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107f51:	55                   	push   %ebp
c0107f52:	89 e5                	mov    %esp,%ebp
    return 0;
c0107f54:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107f59:	5d                   	pop    %ebp
c0107f5a:	c3                   	ret    

c0107f5b <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0107f5b:	55                   	push   %ebp
c0107f5c:	89 e5                	mov    %esp,%ebp
c0107f5e:	b8 00 00 00 00       	mov    $0x0,%eax
c0107f63:	5d                   	pop    %ebp
c0107f64:	c3                   	ret    

c0107f65 <lock_init>:
#define local_intr_restore(x)   __intr_restore(x);

typedef volatile bool lock_t;

static inline void
lock_init(lock_t *lock) {
c0107f65:	55                   	push   %ebp
c0107f66:	89 e5                	mov    %esp,%ebp
    *lock = 0;
c0107f68:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f6b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c0107f71:	5d                   	pop    %ebp
c0107f72:	c3                   	ret    

c0107f73 <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c0107f73:	55                   	push   %ebp
c0107f74:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0107f76:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f79:	8b 40 18             	mov    0x18(%eax),%eax
}
c0107f7c:	5d                   	pop    %ebp
c0107f7d:	c3                   	ret    

c0107f7e <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0107f7e:	55                   	push   %ebp
c0107f7f:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0107f81:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f84:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107f87:	89 50 18             	mov    %edx,0x18(%eax)
}
c0107f8a:	5d                   	pop    %ebp
c0107f8b:	c3                   	ret    

c0107f8c <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0107f8c:	55                   	push   %ebp
c0107f8d:	89 e5                	mov    %esp,%ebp
c0107f8f:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0107f92:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f95:	c1 e8 0c             	shr    $0xc,%eax
c0107f98:	89 c2                	mov    %eax,%edx
c0107f9a:	a1 80 0d 1b c0       	mov    0xc01b0d80,%eax
c0107f9f:	39 c2                	cmp    %eax,%edx
c0107fa1:	72 1c                	jb     c0107fbf <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0107fa3:	c7 44 24 08 e4 e3 10 	movl   $0xc010e3e4,0x8(%esp)
c0107faa:	c0 
c0107fab:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107fb2:	00 
c0107fb3:	c7 04 24 03 e4 10 c0 	movl   $0xc010e403,(%esp)
c0107fba:	e8 15 8e ff ff       	call   c0100dd4 <__panic>
    }
    return &pages[PPN(pa)];
c0107fbf:	a1 90 2e 1b c0       	mov    0xc01b2e90,%eax
c0107fc4:	8b 55 08             	mov    0x8(%ebp),%edx
c0107fc7:	c1 ea 0c             	shr    $0xc,%edx
c0107fca:	c1 e2 05             	shl    $0x5,%edx
c0107fcd:	01 d0                	add    %edx,%eax
}
c0107fcf:	c9                   	leave  
c0107fd0:	c3                   	ret    

c0107fd1 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0107fd1:	55                   	push   %ebp
c0107fd2:	89 e5                	mov    %esp,%ebp
c0107fd4:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0107fd7:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0107fde:	e8 d4 cd ff ff       	call   c0104db7 <kmalloc>
c0107fe3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0107fe6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107fea:	74 79                	je     c0108065 <mm_create+0x94>
        list_init(&(mm->mmap_list));
c0107fec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fef:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107ff2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ff5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107ff8:	89 50 04             	mov    %edx,0x4(%eax)
c0107ffb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ffe:	8b 50 04             	mov    0x4(%eax),%edx
c0108001:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108004:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0108006:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108009:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0108010:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108013:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c010801a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010801d:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0108024:	a1 0c 0e 1b c0       	mov    0xc01b0e0c,%eax
c0108029:	85 c0                	test   %eax,%eax
c010802b:	74 0d                	je     c010803a <mm_create+0x69>
c010802d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108030:	89 04 24             	mov    %eax,(%esp)
c0108033:	e8 6a ef ff ff       	call   c0106fa2 <swap_init_mm>
c0108038:	eb 0a                	jmp    c0108044 <mm_create+0x73>
        else mm->sm_priv = NULL;
c010803a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010803d:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0108044:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010804b:	00 
c010804c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010804f:	89 04 24             	mov    %eax,(%esp)
c0108052:	e8 27 ff ff ff       	call   c0107f7e <set_mm_count>
        lock_init(&(mm->mm_lock));
c0108057:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010805a:	83 c0 1c             	add    $0x1c,%eax
c010805d:	89 04 24             	mov    %eax,(%esp)
c0108060:	e8 00 ff ff ff       	call   c0107f65 <lock_init>
    }    
    return mm;
c0108065:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108068:	c9                   	leave  
c0108069:	c3                   	ret    

c010806a <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c010806a:	55                   	push   %ebp
c010806b:	89 e5                	mov    %esp,%ebp
c010806d:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0108070:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0108077:	e8 3b cd ff ff       	call   c0104db7 <kmalloc>
c010807c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c010807f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108083:	74 1b                	je     c01080a0 <vma_create+0x36>
        vma->vm_start = vm_start;
c0108085:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108088:	8b 55 08             	mov    0x8(%ebp),%edx
c010808b:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c010808e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108091:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108094:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0108097:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010809a:	8b 55 10             	mov    0x10(%ebp),%edx
c010809d:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c01080a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01080a3:	c9                   	leave  
c01080a4:	c3                   	ret    

c01080a5 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c01080a5:	55                   	push   %ebp
c01080a6:	89 e5                	mov    %esp,%ebp
c01080a8:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c01080ab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c01080b2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01080b6:	0f 84 95 00 00 00    	je     c0108151 <find_vma+0xac>
        vma = mm->mmap_cache;
c01080bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01080bf:	8b 40 08             	mov    0x8(%eax),%eax
c01080c2:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c01080c5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01080c9:	74 16                	je     c01080e1 <find_vma+0x3c>
c01080cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01080ce:	8b 40 04             	mov    0x4(%eax),%eax
c01080d1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01080d4:	77 0b                	ja     c01080e1 <find_vma+0x3c>
c01080d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01080d9:	8b 40 08             	mov    0x8(%eax),%eax
c01080dc:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01080df:	77 61                	ja     c0108142 <find_vma+0x9d>
                bool found = 0;
c01080e1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c01080e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01080eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01080ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01080f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c01080f4:	eb 28                	jmp    c010811e <find_vma+0x79>
                    vma = le2vma(le, list_link);
c01080f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080f9:	83 e8 10             	sub    $0x10,%eax
c01080fc:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c01080ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108102:	8b 40 04             	mov    0x4(%eax),%eax
c0108105:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108108:	77 14                	ja     c010811e <find_vma+0x79>
c010810a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010810d:	8b 40 08             	mov    0x8(%eax),%eax
c0108110:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108113:	76 09                	jbe    c010811e <find_vma+0x79>
                        found = 1;
c0108115:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c010811c:	eb 17                	jmp    c0108135 <find_vma+0x90>
c010811e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108121:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108124:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108127:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c010812a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010812d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108130:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108133:	75 c1                	jne    c01080f6 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c0108135:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0108139:	75 07                	jne    c0108142 <find_vma+0x9d>
                    vma = NULL;
c010813b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0108142:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0108146:	74 09                	je     c0108151 <find_vma+0xac>
            mm->mmap_cache = vma;
c0108148:	8b 45 08             	mov    0x8(%ebp),%eax
c010814b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010814e:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c0108151:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0108154:	c9                   	leave  
c0108155:	c3                   	ret    

c0108156 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0108156:	55                   	push   %ebp
c0108157:	89 e5                	mov    %esp,%ebp
c0108159:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c010815c:	8b 45 08             	mov    0x8(%ebp),%eax
c010815f:	8b 50 04             	mov    0x4(%eax),%edx
c0108162:	8b 45 08             	mov    0x8(%ebp),%eax
c0108165:	8b 40 08             	mov    0x8(%eax),%eax
c0108168:	39 c2                	cmp    %eax,%edx
c010816a:	72 24                	jb     c0108190 <check_vma_overlap+0x3a>
c010816c:	c7 44 24 0c 11 e4 10 	movl   $0xc010e411,0xc(%esp)
c0108173:	c0 
c0108174:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c010817b:	c0 
c010817c:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0108183:	00 
c0108184:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c010818b:	e8 44 8c ff ff       	call   c0100dd4 <__panic>
    assert(prev->vm_end <= next->vm_start);
c0108190:	8b 45 08             	mov    0x8(%ebp),%eax
c0108193:	8b 50 08             	mov    0x8(%eax),%edx
c0108196:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108199:	8b 40 04             	mov    0x4(%eax),%eax
c010819c:	39 c2                	cmp    %eax,%edx
c010819e:	76 24                	jbe    c01081c4 <check_vma_overlap+0x6e>
c01081a0:	c7 44 24 0c 54 e4 10 	movl   $0xc010e454,0xc(%esp)
c01081a7:	c0 
c01081a8:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c01081af:	c0 
c01081b0:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c01081b7:	00 
c01081b8:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c01081bf:	e8 10 8c ff ff       	call   c0100dd4 <__panic>
    assert(next->vm_start < next->vm_end);
c01081c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081c7:	8b 50 04             	mov    0x4(%eax),%edx
c01081ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081cd:	8b 40 08             	mov    0x8(%eax),%eax
c01081d0:	39 c2                	cmp    %eax,%edx
c01081d2:	72 24                	jb     c01081f8 <check_vma_overlap+0xa2>
c01081d4:	c7 44 24 0c 73 e4 10 	movl   $0xc010e473,0xc(%esp)
c01081db:	c0 
c01081dc:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c01081e3:	c0 
c01081e4:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c01081eb:	00 
c01081ec:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c01081f3:	e8 dc 8b ff ff       	call   c0100dd4 <__panic>
}
c01081f8:	c9                   	leave  
c01081f9:	c3                   	ret    

c01081fa <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c01081fa:	55                   	push   %ebp
c01081fb:	89 e5                	mov    %esp,%ebp
c01081fd:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c0108200:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108203:	8b 50 04             	mov    0x4(%eax),%edx
c0108206:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108209:	8b 40 08             	mov    0x8(%eax),%eax
c010820c:	39 c2                	cmp    %eax,%edx
c010820e:	72 24                	jb     c0108234 <insert_vma_struct+0x3a>
c0108210:	c7 44 24 0c 91 e4 10 	movl   $0xc010e491,0xc(%esp)
c0108217:	c0 
c0108218:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c010821f:	c0 
c0108220:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0108227:	00 
c0108228:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c010822f:	e8 a0 8b ff ff       	call   c0100dd4 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c0108234:	8b 45 08             	mov    0x8(%ebp),%eax
c0108237:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c010823a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010823d:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c0108240:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108243:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0108246:	eb 21                	jmp    c0108269 <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0108248:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010824b:	83 e8 10             	sub    $0x10,%eax
c010824e:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c0108251:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108254:	8b 50 04             	mov    0x4(%eax),%edx
c0108257:	8b 45 0c             	mov    0xc(%ebp),%eax
c010825a:	8b 40 04             	mov    0x4(%eax),%eax
c010825d:	39 c2                	cmp    %eax,%edx
c010825f:	76 02                	jbe    c0108263 <insert_vma_struct+0x69>
                break;
c0108261:	eb 1d                	jmp    c0108280 <insert_vma_struct+0x86>
            }
            le_prev = le;
c0108263:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108266:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108269:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010826c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010826f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108272:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c0108275:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108278:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010827b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010827e:	75 c8                	jne    c0108248 <insert_vma_struct+0x4e>
c0108280:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108283:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108286:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108289:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c010828c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c010828f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108292:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108295:	74 15                	je     c01082ac <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c0108297:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010829a:	8d 50 f0             	lea    -0x10(%eax),%edx
c010829d:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082a0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01082a4:	89 14 24             	mov    %edx,(%esp)
c01082a7:	e8 aa fe ff ff       	call   c0108156 <check_vma_overlap>
    }
    if (le_next != list) {
c01082ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01082af:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01082b2:	74 15                	je     c01082c9 <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c01082b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01082b7:	83 e8 10             	sub    $0x10,%eax
c01082ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c01082be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082c1:	89 04 24             	mov    %eax,(%esp)
c01082c4:	e8 8d fe ff ff       	call   c0108156 <check_vma_overlap>
    }

    vma->vm_mm = mm;
c01082c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082cc:	8b 55 08             	mov    0x8(%ebp),%edx
c01082cf:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c01082d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082d4:	8d 50 10             	lea    0x10(%eax),%edx
c01082d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082da:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01082dd:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01082e0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01082e3:	8b 40 04             	mov    0x4(%eax),%eax
c01082e6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01082e9:	89 55 d0             	mov    %edx,-0x30(%ebp)
c01082ec:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01082ef:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01082f2:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01082f5:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01082f8:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01082fb:	89 10                	mov    %edx,(%eax)
c01082fd:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0108300:	8b 10                	mov    (%eax),%edx
c0108302:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108305:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108308:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010830b:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010830e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0108311:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108314:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0108317:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c0108319:	8b 45 08             	mov    0x8(%ebp),%eax
c010831c:	8b 40 10             	mov    0x10(%eax),%eax
c010831f:	8d 50 01             	lea    0x1(%eax),%edx
c0108322:	8b 45 08             	mov    0x8(%ebp),%eax
c0108325:	89 50 10             	mov    %edx,0x10(%eax)
}
c0108328:	c9                   	leave  
c0108329:	c3                   	ret    

c010832a <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c010832a:	55                   	push   %ebp
c010832b:	89 e5                	mov    %esp,%ebp
c010832d:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c0108330:	8b 45 08             	mov    0x8(%ebp),%eax
c0108333:	89 04 24             	mov    %eax,(%esp)
c0108336:	e8 38 fc ff ff       	call   c0107f73 <mm_count>
c010833b:	85 c0                	test   %eax,%eax
c010833d:	74 24                	je     c0108363 <mm_destroy+0x39>
c010833f:	c7 44 24 0c ad e4 10 	movl   $0xc010e4ad,0xc(%esp)
c0108346:	c0 
c0108347:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c010834e:	c0 
c010834f:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0108356:	00 
c0108357:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c010835e:	e8 71 8a ff ff       	call   c0100dd4 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c0108363:	8b 45 08             	mov    0x8(%ebp),%eax
c0108366:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0108369:	eb 36                	jmp    c01083a1 <mm_destroy+0x77>
c010836b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010836e:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0108371:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108374:	8b 40 04             	mov    0x4(%eax),%eax
c0108377:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010837a:	8b 12                	mov    (%edx),%edx
c010837c:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010837f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0108382:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108385:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108388:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010838b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010838e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108391:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c0108393:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108396:	83 e8 10             	sub    $0x10,%eax
c0108399:	89 04 24             	mov    %eax,(%esp)
c010839c:	e8 31 ca ff ff       	call   c0104dd2 <kfree>
c01083a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01083a4:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01083a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01083aa:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c01083ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01083b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01083b3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01083b6:	75 b3                	jne    c010836b <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c01083b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01083bb:	89 04 24             	mov    %eax,(%esp)
c01083be:	e8 0f ca ff ff       	call   c0104dd2 <kfree>
    mm=NULL;
c01083c3:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c01083ca:	c9                   	leave  
c01083cb:	c3                   	ret    

c01083cc <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c01083cc:	55                   	push   %ebp
c01083cd:	89 e5                	mov    %esp,%ebp
c01083cf:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c01083d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01083d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01083d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01083db:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01083e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01083e3:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c01083ea:	8b 45 10             	mov    0x10(%ebp),%eax
c01083ed:	8b 55 0c             	mov    0xc(%ebp),%edx
c01083f0:	01 c2                	add    %eax,%edx
c01083f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01083f5:	01 d0                	add    %edx,%eax
c01083f7:	83 e8 01             	sub    $0x1,%eax
c01083fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01083fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108400:	ba 00 00 00 00       	mov    $0x0,%edx
c0108405:	f7 75 e8             	divl   -0x18(%ebp)
c0108408:	89 d0                	mov    %edx,%eax
c010840a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010840d:	29 c2                	sub    %eax,%edx
c010840f:	89 d0                	mov    %edx,%eax
c0108411:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c0108414:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c010841b:	76 11                	jbe    c010842e <mm_map+0x62>
c010841d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108420:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108423:	73 09                	jae    c010842e <mm_map+0x62>
c0108425:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c010842c:	76 0a                	jbe    c0108438 <mm_map+0x6c>
        return -E_INVAL;
c010842e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0108433:	e9 ae 00 00 00       	jmp    c01084e6 <mm_map+0x11a>
    }

    assert(mm != NULL);
c0108438:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010843c:	75 24                	jne    c0108462 <mm_map+0x96>
c010843e:	c7 44 24 0c bf e4 10 	movl   $0xc010e4bf,0xc(%esp)
c0108445:	c0 
c0108446:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c010844d:	c0 
c010844e:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c0108455:	00 
c0108456:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c010845d:	e8 72 89 ff ff       	call   c0100dd4 <__panic>

    int ret = -E_INVAL;
c0108462:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0108469:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010846c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108470:	8b 45 08             	mov    0x8(%ebp),%eax
c0108473:	89 04 24             	mov    %eax,(%esp)
c0108476:	e8 2a fc ff ff       	call   c01080a5 <find_vma>
c010847b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010847e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108482:	74 0d                	je     c0108491 <mm_map+0xc5>
c0108484:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108487:	8b 40 04             	mov    0x4(%eax),%eax
c010848a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010848d:	73 02                	jae    c0108491 <mm_map+0xc5>
        goto out;
c010848f:	eb 52                	jmp    c01084e3 <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c0108491:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0108498:	8b 45 14             	mov    0x14(%ebp),%eax
c010849b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010849f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01084a2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01084a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084a9:	89 04 24             	mov    %eax,(%esp)
c01084ac:	e8 b9 fb ff ff       	call   c010806a <vma_create>
c01084b1:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01084b4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01084b8:	75 02                	jne    c01084bc <mm_map+0xf0>
        goto out;
c01084ba:	eb 27                	jmp    c01084e3 <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c01084bc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01084bf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01084c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01084c6:	89 04 24             	mov    %eax,(%esp)
c01084c9:	e8 2c fd ff ff       	call   c01081fa <insert_vma_struct>
    if (vma_store != NULL) {
c01084ce:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01084d2:	74 08                	je     c01084dc <mm_map+0x110>
        *vma_store = vma;
c01084d4:	8b 45 18             	mov    0x18(%ebp),%eax
c01084d7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01084da:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c01084dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c01084e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01084e6:	c9                   	leave  
c01084e7:	c3                   	ret    

c01084e8 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c01084e8:	55                   	push   %ebp
c01084e9:	89 e5                	mov    %esp,%ebp
c01084eb:	56                   	push   %esi
c01084ec:	53                   	push   %ebx
c01084ed:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c01084f0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01084f4:	74 06                	je     c01084fc <dup_mmap+0x14>
c01084f6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01084fa:	75 24                	jne    c0108520 <dup_mmap+0x38>
c01084fc:	c7 44 24 0c ca e4 10 	movl   $0xc010e4ca,0xc(%esp)
c0108503:	c0 
c0108504:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c010850b:	c0 
c010850c:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c0108513:	00 
c0108514:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c010851b:	e8 b4 88 ff ff       	call   c0100dd4 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c0108520:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108523:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108526:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108529:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c010852c:	e9 92 00 00 00       	jmp    c01085c3 <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c0108531:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108534:	83 e8 10             	sub    $0x10,%eax
c0108537:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c010853a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010853d:	8b 48 0c             	mov    0xc(%eax),%ecx
c0108540:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108543:	8b 50 08             	mov    0x8(%eax),%edx
c0108546:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108549:	8b 40 04             	mov    0x4(%eax),%eax
c010854c:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108550:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108554:	89 04 24             	mov    %eax,(%esp)
c0108557:	e8 0e fb ff ff       	call   c010806a <vma_create>
c010855c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c010855f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108563:	75 07                	jne    c010856c <dup_mmap+0x84>
            return -E_NO_MEM;
c0108565:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010856a:	eb 76                	jmp    c01085e2 <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c010856c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010856f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108573:	8b 45 08             	mov    0x8(%ebp),%eax
c0108576:	89 04 24             	mov    %eax,(%esp)
c0108579:	e8 7c fc ff ff       	call   c01081fa <insert_vma_struct>

        bool share = 0;
c010857e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0108585:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108588:	8b 58 08             	mov    0x8(%eax),%ebx
c010858b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010858e:	8b 48 04             	mov    0x4(%eax),%ecx
c0108591:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108594:	8b 50 0c             	mov    0xc(%eax),%edx
c0108597:	8b 45 08             	mov    0x8(%ebp),%eax
c010859a:	8b 40 0c             	mov    0xc(%eax),%eax
c010859d:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c01085a0:	89 74 24 10          	mov    %esi,0x10(%esp)
c01085a4:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01085a8:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01085ac:	89 54 24 04          	mov    %edx,0x4(%esp)
c01085b0:	89 04 24             	mov    %eax,(%esp)
c01085b3:	e8 cd d7 ff ff       	call   c0105d85 <copy_range>
c01085b8:	85 c0                	test   %eax,%eax
c01085ba:	74 07                	je     c01085c3 <dup_mmap+0xdb>
            return -E_NO_MEM;
c01085bc:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01085c1:	eb 1f                	jmp    c01085e2 <dup_mmap+0xfa>
c01085c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085c6:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c01085c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01085cc:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c01085ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01085d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085d4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01085d7:	0f 85 54 ff ff ff    	jne    c0108531 <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c01085dd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01085e2:	83 c4 40             	add    $0x40,%esp
c01085e5:	5b                   	pop    %ebx
c01085e6:	5e                   	pop    %esi
c01085e7:	5d                   	pop    %ebp
c01085e8:	c3                   	ret    

c01085e9 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c01085e9:	55                   	push   %ebp
c01085ea:	89 e5                	mov    %esp,%ebp
c01085ec:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c01085ef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01085f3:	74 0f                	je     c0108604 <exit_mmap+0x1b>
c01085f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01085f8:	89 04 24             	mov    %eax,(%esp)
c01085fb:	e8 73 f9 ff ff       	call   c0107f73 <mm_count>
c0108600:	85 c0                	test   %eax,%eax
c0108602:	74 24                	je     c0108628 <exit_mmap+0x3f>
c0108604:	c7 44 24 0c e8 e4 10 	movl   $0xc010e4e8,0xc(%esp)
c010860b:	c0 
c010860c:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c0108613:	c0 
c0108614:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c010861b:	00 
c010861c:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c0108623:	e8 ac 87 ff ff       	call   c0100dd4 <__panic>
    pde_t *pgdir = mm->pgdir;
c0108628:	8b 45 08             	mov    0x8(%ebp),%eax
c010862b:	8b 40 0c             	mov    0xc(%eax),%eax
c010862e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c0108631:	8b 45 08             	mov    0x8(%ebp),%eax
c0108634:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108637:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010863a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010863d:	eb 28                	jmp    c0108667 <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c010863f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108642:	83 e8 10             	sub    $0x10,%eax
c0108645:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0108648:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010864b:	8b 50 08             	mov    0x8(%eax),%edx
c010864e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108651:	8b 40 04             	mov    0x4(%eax),%eax
c0108654:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108658:	89 44 24 04          	mov    %eax,0x4(%esp)
c010865c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010865f:	89 04 24             	mov    %eax,(%esp)
c0108662:	e8 23 d5 ff ff       	call   c0105b8a <unmap_range>
c0108667:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010866a:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010866d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108670:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c0108673:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108676:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108679:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010867c:	75 c1                	jne    c010863f <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c010867e:	eb 28                	jmp    c01086a8 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c0108680:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108683:	83 e8 10             	sub    $0x10,%eax
c0108686:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0108689:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010868c:	8b 50 08             	mov    0x8(%eax),%edx
c010868f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108692:	8b 40 04             	mov    0x4(%eax),%eax
c0108695:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108699:	89 44 24 04          	mov    %eax,0x4(%esp)
c010869d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01086a0:	89 04 24             	mov    %eax,(%esp)
c01086a3:	e8 d6 d5 ff ff       	call   c0105c7e <exit_range>
c01086a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086ab:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01086ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01086b1:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c01086b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01086b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086ba:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01086bd:	75 c1                	jne    c0108680 <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c01086bf:	c9                   	leave  
c01086c0:	c3                   	ret    

c01086c1 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c01086c1:	55                   	push   %ebp
c01086c2:	89 e5                	mov    %esp,%ebp
c01086c4:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c01086c7:	8b 45 10             	mov    0x10(%ebp),%eax
c01086ca:	8b 55 18             	mov    0x18(%ebp),%edx
c01086cd:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01086d1:	8b 55 14             	mov    0x14(%ebp),%edx
c01086d4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01086d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01086df:	89 04 24             	mov    %eax,(%esp)
c01086e2:	e8 b5 09 00 00       	call   c010909c <user_mem_check>
c01086e7:	85 c0                	test   %eax,%eax
c01086e9:	75 07                	jne    c01086f2 <copy_from_user+0x31>
        return 0;
c01086eb:	b8 00 00 00 00       	mov    $0x0,%eax
c01086f0:	eb 1e                	jmp    c0108710 <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c01086f2:	8b 45 14             	mov    0x14(%ebp),%eax
c01086f5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01086f9:	8b 45 10             	mov    0x10(%ebp),%eax
c01086fc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108700:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108703:	89 04 24             	mov    %eax,(%esp)
c0108706:	e8 c7 41 00 00       	call   c010c8d2 <memcpy>
    return 1;
c010870b:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0108710:	c9                   	leave  
c0108711:	c3                   	ret    

c0108712 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0108712:	55                   	push   %ebp
c0108713:	89 e5                	mov    %esp,%ebp
c0108715:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0108718:	8b 45 0c             	mov    0xc(%ebp),%eax
c010871b:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0108722:	00 
c0108723:	8b 55 14             	mov    0x14(%ebp),%edx
c0108726:	89 54 24 08          	mov    %edx,0x8(%esp)
c010872a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010872e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108731:	89 04 24             	mov    %eax,(%esp)
c0108734:	e8 63 09 00 00       	call   c010909c <user_mem_check>
c0108739:	85 c0                	test   %eax,%eax
c010873b:	75 07                	jne    c0108744 <copy_to_user+0x32>
        return 0;
c010873d:	b8 00 00 00 00       	mov    $0x0,%eax
c0108742:	eb 1e                	jmp    c0108762 <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c0108744:	8b 45 14             	mov    0x14(%ebp),%eax
c0108747:	89 44 24 08          	mov    %eax,0x8(%esp)
c010874b:	8b 45 10             	mov    0x10(%ebp),%eax
c010874e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108752:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108755:	89 04 24             	mov    %eax,(%esp)
c0108758:	e8 75 41 00 00       	call   c010c8d2 <memcpy>
    return 1;
c010875d:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0108762:	c9                   	leave  
c0108763:	c3                   	ret    

c0108764 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0108764:	55                   	push   %ebp
c0108765:	89 e5                	mov    %esp,%ebp
c0108767:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c010876a:	e8 02 00 00 00       	call   c0108771 <check_vmm>
}
c010876f:	c9                   	leave  
c0108770:	c3                   	ret    

c0108771 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0108771:	55                   	push   %ebp
c0108772:	89 e5                	mov    %esp,%ebp
c0108774:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108777:	e8 4d cb ff ff       	call   c01052c9 <nr_free_pages>
c010877c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c010877f:	e8 13 00 00 00       	call   c0108797 <check_vma_struct>
    check_pgfault();
c0108784:	e8 a7 04 00 00       	call   c0108c30 <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0108789:	c7 04 24 08 e5 10 c0 	movl   $0xc010e508,(%esp)
c0108790:	e8 c3 7b ff ff       	call   c0100358 <cprintf>
}
c0108795:	c9                   	leave  
c0108796:	c3                   	ret    

c0108797 <check_vma_struct>:

static void
check_vma_struct(void) {
c0108797:	55                   	push   %ebp
c0108798:	89 e5                	mov    %esp,%ebp
c010879a:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010879d:	e8 27 cb ff ff       	call   c01052c9 <nr_free_pages>
c01087a2:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c01087a5:	e8 27 f8 ff ff       	call   c0107fd1 <mm_create>
c01087aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c01087ad:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01087b1:	75 24                	jne    c01087d7 <check_vma_struct+0x40>
c01087b3:	c7 44 24 0c bf e4 10 	movl   $0xc010e4bf,0xc(%esp)
c01087ba:	c0 
c01087bb:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c01087c2:	c0 
c01087c3:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c01087ca:	00 
c01087cb:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c01087d2:	e8 fd 85 ff ff       	call   c0100dd4 <__panic>

    int step1 = 10, step2 = step1 * 10;
c01087d7:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c01087de:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01087e1:	89 d0                	mov    %edx,%eax
c01087e3:	c1 e0 02             	shl    $0x2,%eax
c01087e6:	01 d0                	add    %edx,%eax
c01087e8:	01 c0                	add    %eax,%eax
c01087ea:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c01087ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01087f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01087f3:	eb 70                	jmp    c0108865 <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c01087f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01087f8:	89 d0                	mov    %edx,%eax
c01087fa:	c1 e0 02             	shl    $0x2,%eax
c01087fd:	01 d0                	add    %edx,%eax
c01087ff:	83 c0 02             	add    $0x2,%eax
c0108802:	89 c1                	mov    %eax,%ecx
c0108804:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108807:	89 d0                	mov    %edx,%eax
c0108809:	c1 e0 02             	shl    $0x2,%eax
c010880c:	01 d0                	add    %edx,%eax
c010880e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108815:	00 
c0108816:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010881a:	89 04 24             	mov    %eax,(%esp)
c010881d:	e8 48 f8 ff ff       	call   c010806a <vma_create>
c0108822:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0108825:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108829:	75 24                	jne    c010884f <check_vma_struct+0xb8>
c010882b:	c7 44 24 0c 20 e5 10 	movl   $0xc010e520,0xc(%esp)
c0108832:	c0 
c0108833:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c010883a:	c0 
c010883b:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c0108842:	00 
c0108843:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c010884a:	e8 85 85 ff ff       	call   c0100dd4 <__panic>
        insert_vma_struct(mm, vma);
c010884f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108852:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108856:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108859:	89 04 24             	mov    %eax,(%esp)
c010885c:	e8 99 f9 ff ff       	call   c01081fa <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c0108861:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108865:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108869:	7f 8a                	jg     c01087f5 <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c010886b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010886e:	83 c0 01             	add    $0x1,%eax
c0108871:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108874:	eb 70                	jmp    c01088e6 <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108876:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108879:	89 d0                	mov    %edx,%eax
c010887b:	c1 e0 02             	shl    $0x2,%eax
c010887e:	01 d0                	add    %edx,%eax
c0108880:	83 c0 02             	add    $0x2,%eax
c0108883:	89 c1                	mov    %eax,%ecx
c0108885:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108888:	89 d0                	mov    %edx,%eax
c010888a:	c1 e0 02             	shl    $0x2,%eax
c010888d:	01 d0                	add    %edx,%eax
c010888f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108896:	00 
c0108897:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010889b:	89 04 24             	mov    %eax,(%esp)
c010889e:	e8 c7 f7 ff ff       	call   c010806a <vma_create>
c01088a3:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c01088a6:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01088aa:	75 24                	jne    c01088d0 <check_vma_struct+0x139>
c01088ac:	c7 44 24 0c 20 e5 10 	movl   $0xc010e520,0xc(%esp)
c01088b3:	c0 
c01088b4:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c01088bb:	c0 
c01088bc:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c01088c3:	00 
c01088c4:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c01088cb:	e8 04 85 ff ff       	call   c0100dd4 <__panic>
        insert_vma_struct(mm, vma);
c01088d0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01088d3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01088d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088da:	89 04 24             	mov    %eax,(%esp)
c01088dd:	e8 18 f9 ff ff       	call   c01081fa <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c01088e2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01088e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088e9:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01088ec:	7e 88                	jle    c0108876 <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c01088ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088f1:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01088f4:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01088f7:	8b 40 04             	mov    0x4(%eax),%eax
c01088fa:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c01088fd:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0108904:	e9 97 00 00 00       	jmp    c01089a0 <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c0108909:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010890c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010890f:	75 24                	jne    c0108935 <check_vma_struct+0x19e>
c0108911:	c7 44 24 0c 2c e5 10 	movl   $0xc010e52c,0xc(%esp)
c0108918:	c0 
c0108919:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c0108920:	c0 
c0108921:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c0108928:	00 
c0108929:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c0108930:	e8 9f 84 ff ff       	call   c0100dd4 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0108935:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108938:	83 e8 10             	sub    $0x10,%eax
c010893b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c010893e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108941:	8b 48 04             	mov    0x4(%eax),%ecx
c0108944:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108947:	89 d0                	mov    %edx,%eax
c0108949:	c1 e0 02             	shl    $0x2,%eax
c010894c:	01 d0                	add    %edx,%eax
c010894e:	39 c1                	cmp    %eax,%ecx
c0108950:	75 17                	jne    c0108969 <check_vma_struct+0x1d2>
c0108952:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108955:	8b 48 08             	mov    0x8(%eax),%ecx
c0108958:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010895b:	89 d0                	mov    %edx,%eax
c010895d:	c1 e0 02             	shl    $0x2,%eax
c0108960:	01 d0                	add    %edx,%eax
c0108962:	83 c0 02             	add    $0x2,%eax
c0108965:	39 c1                	cmp    %eax,%ecx
c0108967:	74 24                	je     c010898d <check_vma_struct+0x1f6>
c0108969:	c7 44 24 0c 44 e5 10 	movl   $0xc010e544,0xc(%esp)
c0108970:	c0 
c0108971:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c0108978:	c0 
c0108979:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0108980:	00 
c0108981:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c0108988:	e8 47 84 ff ff       	call   c0100dd4 <__panic>
c010898d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108990:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0108993:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0108996:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0108999:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c010899c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01089a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089a3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01089a6:	0f 8e 5d ff ff ff    	jle    c0108909 <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c01089ac:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c01089b3:	e9 cd 01 00 00       	jmp    c0108b85 <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c01089b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089bb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089c2:	89 04 24             	mov    %eax,(%esp)
c01089c5:	e8 db f6 ff ff       	call   c01080a5 <find_vma>
c01089ca:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c01089cd:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c01089d1:	75 24                	jne    c01089f7 <check_vma_struct+0x260>
c01089d3:	c7 44 24 0c 79 e5 10 	movl   $0xc010e579,0xc(%esp)
c01089da:	c0 
c01089db:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c01089e2:	c0 
c01089e3:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c01089ea:	00 
c01089eb:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c01089f2:	e8 dd 83 ff ff       	call   c0100dd4 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c01089f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089fa:	83 c0 01             	add    $0x1,%eax
c01089fd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a01:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a04:	89 04 24             	mov    %eax,(%esp)
c0108a07:	e8 99 f6 ff ff       	call   c01080a5 <find_vma>
c0108a0c:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c0108a0f:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0108a13:	75 24                	jne    c0108a39 <check_vma_struct+0x2a2>
c0108a15:	c7 44 24 0c 86 e5 10 	movl   $0xc010e586,0xc(%esp)
c0108a1c:	c0 
c0108a1d:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c0108a24:	c0 
c0108a25:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c0108a2c:	00 
c0108a2d:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c0108a34:	e8 9b 83 ff ff       	call   c0100dd4 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0108a39:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a3c:	83 c0 02             	add    $0x2,%eax
c0108a3f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a43:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a46:	89 04 24             	mov    %eax,(%esp)
c0108a49:	e8 57 f6 ff ff       	call   c01080a5 <find_vma>
c0108a4e:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c0108a51:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0108a55:	74 24                	je     c0108a7b <check_vma_struct+0x2e4>
c0108a57:	c7 44 24 0c 93 e5 10 	movl   $0xc010e593,0xc(%esp)
c0108a5e:	c0 
c0108a5f:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c0108a66:	c0 
c0108a67:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c0108a6e:	00 
c0108a6f:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c0108a76:	e8 59 83 ff ff       	call   c0100dd4 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0108a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a7e:	83 c0 03             	add    $0x3,%eax
c0108a81:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a85:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a88:	89 04 24             	mov    %eax,(%esp)
c0108a8b:	e8 15 f6 ff ff       	call   c01080a5 <find_vma>
c0108a90:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c0108a93:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0108a97:	74 24                	je     c0108abd <check_vma_struct+0x326>
c0108a99:	c7 44 24 0c a0 e5 10 	movl   $0xc010e5a0,0xc(%esp)
c0108aa0:	c0 
c0108aa1:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c0108aa8:	c0 
c0108aa9:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0108ab0:	00 
c0108ab1:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c0108ab8:	e8 17 83 ff ff       	call   c0100dd4 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0108abd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ac0:	83 c0 04             	add    $0x4,%eax
c0108ac3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ac7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108aca:	89 04 24             	mov    %eax,(%esp)
c0108acd:	e8 d3 f5 ff ff       	call   c01080a5 <find_vma>
c0108ad2:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c0108ad5:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0108ad9:	74 24                	je     c0108aff <check_vma_struct+0x368>
c0108adb:	c7 44 24 0c ad e5 10 	movl   $0xc010e5ad,0xc(%esp)
c0108ae2:	c0 
c0108ae3:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c0108aea:	c0 
c0108aeb:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0108af2:	00 
c0108af3:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c0108afa:	e8 d5 82 ff ff       	call   c0100dd4 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0108aff:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108b02:	8b 50 04             	mov    0x4(%eax),%edx
c0108b05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b08:	39 c2                	cmp    %eax,%edx
c0108b0a:	75 10                	jne    c0108b1c <check_vma_struct+0x385>
c0108b0c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108b0f:	8b 50 08             	mov    0x8(%eax),%edx
c0108b12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b15:	83 c0 02             	add    $0x2,%eax
c0108b18:	39 c2                	cmp    %eax,%edx
c0108b1a:	74 24                	je     c0108b40 <check_vma_struct+0x3a9>
c0108b1c:	c7 44 24 0c bc e5 10 	movl   $0xc010e5bc,0xc(%esp)
c0108b23:	c0 
c0108b24:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c0108b2b:	c0 
c0108b2c:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0108b33:	00 
c0108b34:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c0108b3b:	e8 94 82 ff ff       	call   c0100dd4 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0108b40:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108b43:	8b 50 04             	mov    0x4(%eax),%edx
c0108b46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b49:	39 c2                	cmp    %eax,%edx
c0108b4b:	75 10                	jne    c0108b5d <check_vma_struct+0x3c6>
c0108b4d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108b50:	8b 50 08             	mov    0x8(%eax),%edx
c0108b53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b56:	83 c0 02             	add    $0x2,%eax
c0108b59:	39 c2                	cmp    %eax,%edx
c0108b5b:	74 24                	je     c0108b81 <check_vma_struct+0x3ea>
c0108b5d:	c7 44 24 0c ec e5 10 	movl   $0xc010e5ec,0xc(%esp)
c0108b64:	c0 
c0108b65:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c0108b6c:	c0 
c0108b6d:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c0108b74:	00 
c0108b75:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c0108b7c:	e8 53 82 ff ff       	call   c0100dd4 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108b81:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0108b85:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108b88:	89 d0                	mov    %edx,%eax
c0108b8a:	c1 e0 02             	shl    $0x2,%eax
c0108b8d:	01 d0                	add    %edx,%eax
c0108b8f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108b92:	0f 8d 20 fe ff ff    	jge    c01089b8 <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108b98:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0108b9f:	eb 70                	jmp    c0108c11 <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0108ba1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ba4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ba8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108bab:	89 04 24             	mov    %eax,(%esp)
c0108bae:	e8 f2 f4 ff ff       	call   c01080a5 <find_vma>
c0108bb3:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0108bb6:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108bba:	74 27                	je     c0108be3 <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0108bbc:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108bbf:	8b 50 08             	mov    0x8(%eax),%edx
c0108bc2:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108bc5:	8b 40 04             	mov    0x4(%eax),%eax
c0108bc8:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108bcc:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108bd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108bd3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108bd7:	c7 04 24 1c e6 10 c0 	movl   $0xc010e61c,(%esp)
c0108bde:	e8 75 77 ff ff       	call   c0100358 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0108be3:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108be7:	74 24                	je     c0108c0d <check_vma_struct+0x476>
c0108be9:	c7 44 24 0c 41 e6 10 	movl   $0xc010e641,0xc(%esp)
c0108bf0:	c0 
c0108bf1:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c0108bf8:	c0 
c0108bf9:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c0108c00:	00 
c0108c01:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c0108c08:	e8 c7 81 ff ff       	call   c0100dd4 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108c0d:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108c11:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108c15:	79 8a                	jns    c0108ba1 <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0108c17:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c1a:	89 04 24             	mov    %eax,(%esp)
c0108c1d:	e8 08 f7 ff ff       	call   c010832a <mm_destroy>

    cprintf("check_vma_struct() succeeded!\n");
c0108c22:	c7 04 24 58 e6 10 c0 	movl   $0xc010e658,(%esp)
c0108c29:	e8 2a 77 ff ff       	call   c0100358 <cprintf>
}
c0108c2e:	c9                   	leave  
c0108c2f:	c3                   	ret    

c0108c30 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0108c30:	55                   	push   %ebp
c0108c31:	89 e5                	mov    %esp,%ebp
c0108c33:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108c36:	e8 8e c6 ff ff       	call   c01052c9 <nr_free_pages>
c0108c3b:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0108c3e:	e8 8e f3 ff ff       	call   c0107fd1 <mm_create>
c0108c43:	a3 6c 2f 1b c0       	mov    %eax,0xc01b2f6c
    assert(check_mm_struct != NULL);
c0108c48:	a1 6c 2f 1b c0       	mov    0xc01b2f6c,%eax
c0108c4d:	85 c0                	test   %eax,%eax
c0108c4f:	75 24                	jne    c0108c75 <check_pgfault+0x45>
c0108c51:	c7 44 24 0c 77 e6 10 	movl   $0xc010e677,0xc(%esp)
c0108c58:	c0 
c0108c59:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c0108c60:	c0 
c0108c61:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c0108c68:	00 
c0108c69:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c0108c70:	e8 5f 81 ff ff       	call   c0100dd4 <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108c75:	a1 6c 2f 1b c0       	mov    0xc01b2f6c,%eax
c0108c7a:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108c7d:	8b 15 84 0d 1b c0    	mov    0xc01b0d84,%edx
c0108c83:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c86:	89 50 0c             	mov    %edx,0xc(%eax)
c0108c89:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c8c:	8b 40 0c             	mov    0xc(%eax),%eax
c0108c8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108c92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108c95:	8b 00                	mov    (%eax),%eax
c0108c97:	85 c0                	test   %eax,%eax
c0108c99:	74 24                	je     c0108cbf <check_pgfault+0x8f>
c0108c9b:	c7 44 24 0c 8f e6 10 	movl   $0xc010e68f,0xc(%esp)
c0108ca2:	c0 
c0108ca3:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c0108caa:	c0 
c0108cab:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108cb2:	00 
c0108cb3:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c0108cba:	e8 15 81 ff ff       	call   c0100dd4 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108cbf:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108cc6:	00 
c0108cc7:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108cce:	00 
c0108ccf:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108cd6:	e8 8f f3 ff ff       	call   c010806a <vma_create>
c0108cdb:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0108cde:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108ce2:	75 24                	jne    c0108d08 <check_pgfault+0xd8>
c0108ce4:	c7 44 24 0c 20 e5 10 	movl   $0xc010e520,0xc(%esp)
c0108ceb:	c0 
c0108cec:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c0108cf3:	c0 
c0108cf4:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
c0108cfb:	00 
c0108cfc:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c0108d03:	e8 cc 80 ff ff       	call   c0100dd4 <__panic>

    insert_vma_struct(mm, vma);
c0108d08:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108d0b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d0f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d12:	89 04 24             	mov    %eax,(%esp)
c0108d15:	e8 e0 f4 ff ff       	call   c01081fa <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108d1a:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0108d21:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108d24:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d28:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d2b:	89 04 24             	mov    %eax,(%esp)
c0108d2e:	e8 72 f3 ff ff       	call   c01080a5 <find_vma>
c0108d33:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108d36:	74 24                	je     c0108d5c <check_pgfault+0x12c>
c0108d38:	c7 44 24 0c 9d e6 10 	movl   $0xc010e69d,0xc(%esp)
c0108d3f:	c0 
c0108d40:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c0108d47:	c0 
c0108d48:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c0108d4f:	00 
c0108d50:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c0108d57:	e8 78 80 ff ff       	call   c0100dd4 <__panic>

    int i, sum = 0;
c0108d5c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108d63:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108d6a:	eb 17                	jmp    c0108d83 <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c0108d6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108d6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108d72:	01 d0                	add    %edx,%eax
c0108d74:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108d77:	88 10                	mov    %dl,(%eax)
        sum += i;
c0108d79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d7c:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0108d7f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108d83:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108d87:	7e e3                	jle    c0108d6c <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108d89:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108d90:	eb 15                	jmp    c0108da7 <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c0108d92:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108d95:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108d98:	01 d0                	add    %edx,%eax
c0108d9a:	0f b6 00             	movzbl (%eax),%eax
c0108d9d:	0f be c0             	movsbl %al,%eax
c0108da0:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108da3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108da7:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108dab:	7e e5                	jle    c0108d92 <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0108dad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108db1:	74 24                	je     c0108dd7 <check_pgfault+0x1a7>
c0108db3:	c7 44 24 0c b7 e6 10 	movl   $0xc010e6b7,0xc(%esp)
c0108dba:	c0 
c0108dbb:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c0108dc2:	c0 
c0108dc3:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c0108dca:	00 
c0108dcb:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c0108dd2:	e8 fd 7f ff ff       	call   c0100dd4 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0108dd7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108dda:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108ddd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108de0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108de5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108de9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108dec:	89 04 24             	mov    %eax,(%esp)
c0108def:	e8 b4 d1 ff ff       	call   c0105fa8 <page_remove>
    free_page(pa2page(pgdir[0]));
c0108df4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108df7:	8b 00                	mov    (%eax),%eax
c0108df9:	89 04 24             	mov    %eax,(%esp)
c0108dfc:	e8 8b f1 ff ff       	call   c0107f8c <pa2page>
c0108e01:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108e08:	00 
c0108e09:	89 04 24             	mov    %eax,(%esp)
c0108e0c:	e8 86 c4 ff ff       	call   c0105297 <free_pages>
    pgdir[0] = 0;
c0108e11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108e14:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0108e1a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108e1d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0108e24:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108e27:	89 04 24             	mov    %eax,(%esp)
c0108e2a:	e8 fb f4 ff ff       	call   c010832a <mm_destroy>
    check_mm_struct = NULL;
c0108e2f:	c7 05 6c 2f 1b c0 00 	movl   $0x0,0xc01b2f6c
c0108e36:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0108e39:	e8 8b c4 ff ff       	call   c01052c9 <nr_free_pages>
c0108e3e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108e41:	74 24                	je     c0108e67 <check_pgfault+0x237>
c0108e43:	c7 44 24 0c c0 e6 10 	movl   $0xc010e6c0,0xc(%esp)
c0108e4a:	c0 
c0108e4b:	c7 44 24 08 2f e4 10 	movl   $0xc010e42f,0x8(%esp)
c0108e52:	c0 
c0108e53:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0108e5a:	00 
c0108e5b:	c7 04 24 44 e4 10 c0 	movl   $0xc010e444,(%esp)
c0108e62:	e8 6d 7f ff ff       	call   c0100dd4 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0108e67:	c7 04 24 e7 e6 10 c0 	movl   $0xc010e6e7,(%esp)
c0108e6e:	e8 e5 74 ff ff       	call   c0100358 <cprintf>
}
c0108e73:	c9                   	leave  
c0108e74:	c3                   	ret    

c0108e75 <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0108e75:	55                   	push   %ebp
c0108e76:	89 e5                	mov    %esp,%ebp
c0108e78:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0108e7b:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0108e82:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e85:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e89:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e8c:	89 04 24             	mov    %eax,(%esp)
c0108e8f:	e8 11 f2 ff ff       	call   c01080a5 <find_vma>
c0108e94:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0108e97:	a1 18 0e 1b c0       	mov    0xc01b0e18,%eax
c0108e9c:	83 c0 01             	add    $0x1,%eax
c0108e9f:	a3 18 0e 1b c0       	mov    %eax,0xc01b0e18
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0108ea4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108ea8:	74 0b                	je     c0108eb5 <do_pgfault+0x40>
c0108eaa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108ead:	8b 40 04             	mov    0x4(%eax),%eax
c0108eb0:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108eb3:	76 18                	jbe    c0108ecd <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0108eb5:	8b 45 10             	mov    0x10(%ebp),%eax
c0108eb8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ebc:	c7 04 24 04 e7 10 c0 	movl   $0xc010e704,(%esp)
c0108ec3:	e8 90 74 ff ff       	call   c0100358 <cprintf>
        goto failed;
c0108ec8:	e9 ca 01 00 00       	jmp    c0109097 <do_pgfault+0x222>
    }
    //check the error_code
    switch (error_code & 3) {
c0108ecd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108ed0:	83 e0 03             	and    $0x3,%eax
c0108ed3:	85 c0                	test   %eax,%eax
c0108ed5:	74 36                	je     c0108f0d <do_pgfault+0x98>
c0108ed7:	83 f8 01             	cmp    $0x1,%eax
c0108eda:	74 20                	je     c0108efc <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0108edc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108edf:	8b 40 0c             	mov    0xc(%eax),%eax
c0108ee2:	83 e0 02             	and    $0x2,%eax
c0108ee5:	85 c0                	test   %eax,%eax
c0108ee7:	75 11                	jne    c0108efa <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0108ee9:	c7 04 24 34 e7 10 c0 	movl   $0xc010e734,(%esp)
c0108ef0:	e8 63 74 ff ff       	call   c0100358 <cprintf>
            goto failed;
c0108ef5:	e9 9d 01 00 00       	jmp    c0109097 <do_pgfault+0x222>
        }
        break;
c0108efa:	eb 2f                	jmp    c0108f2b <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0108efc:	c7 04 24 94 e7 10 c0 	movl   $0xc010e794,(%esp)
c0108f03:	e8 50 74 ff ff       	call   c0100358 <cprintf>
        goto failed;
c0108f08:	e9 8a 01 00 00       	jmp    c0109097 <do_pgfault+0x222>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0108f0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f10:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f13:	83 e0 05             	and    $0x5,%eax
c0108f16:	85 c0                	test   %eax,%eax
c0108f18:	75 11                	jne    c0108f2b <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0108f1a:	c7 04 24 cc e7 10 c0 	movl   $0xc010e7cc,(%esp)
c0108f21:	e8 32 74 ff ff       	call   c0100358 <cprintf>
            goto failed;
c0108f26:	e9 6c 01 00 00       	jmp    c0109097 <do_pgfault+0x222>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0108f2b:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0108f32:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f35:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f38:	83 e0 02             	and    $0x2,%eax
c0108f3b:	85 c0                	test   %eax,%eax
c0108f3d:	74 04                	je     c0108f43 <do_pgfault+0xce>
        perm |= PTE_W;
c0108f3f:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0108f43:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f46:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108f49:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108f4c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108f51:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0108f54:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0108f5b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    if (*ptep == 0) {
                            //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
#endif
    /*LAB3 EXERCISE 1: YOUR CODE*/
    //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    if((ptep = get_pte(mm->pgdir, addr, 1)) == NULL)
c0108f62:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f65:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f68:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108f6f:	00 
c0108f70:	8b 55 10             	mov    0x10(%ebp),%edx
c0108f73:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108f77:	89 04 24             	mov    %eax,(%esp)
c0108f7a:	e8 14 ca ff ff       	call   c0105993 <get_pte>
c0108f7f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108f82:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108f86:	75 11                	jne    c0108f99 <do_pgfault+0x124>
    {
    	cprintf("get_pte in do_pgfault failed\n");
c0108f88:	c7 04 24 2f e8 10 c0 	movl   $0xc010e82f,(%esp)
c0108f8f:	e8 c4 73 ff ff       	call   c0100358 <cprintf>
    	goto failed;
c0108f94:	e9 fe 00 00 00       	jmp    c0109097 <do_pgfault+0x222>
    }
    //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
    if (*ptep == 0)
c0108f99:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f9c:	8b 00                	mov    (%eax),%eax
c0108f9e:	85 c0                	test   %eax,%eax
c0108fa0:	75 35                	jne    c0108fd7 <do_pgfault+0x162>
    {
    	if(pgdir_alloc_page(mm->pgdir, addr, perm) == NULL)
c0108fa2:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fa5:	8b 40 0c             	mov    0xc(%eax),%eax
c0108fa8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108fab:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108faf:	8b 55 10             	mov    0x10(%ebp),%edx
c0108fb2:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108fb6:	89 04 24             	mov    %eax,(%esp)
c0108fb9:	e8 44 d1 ff ff       	call   c0106102 <pgdir_alloc_page>
c0108fbe:	85 c0                	test   %eax,%eax
c0108fc0:	0f 85 ca 00 00 00    	jne    c0109090 <do_pgfault+0x21b>
    	{
    		cprintf("pgdir_alloc_page in do_pgfault failed\n");
c0108fc6:	c7 04 24 50 e8 10 c0 	movl   $0xc010e850,(%esp)
c0108fcd:	e8 86 73 ff ff       	call   c0100358 <cprintf>
    		goto failed;
c0108fd2:	e9 c0 00 00 00       	jmp    c0109097 <do_pgfault+0x222>
		     If the vma includes this addr is writable, then we can set the page writable by rewrite the *ptep.
		     This method could be used to implement the Copy on Write (COW) thchnology(a fast fork process method).
		  2) *ptep & PTE_P == 0 & but *ptep!=0, it means this pte is a  swap entry.
		     We should add the LAB3's results here.
     */
        if(swap_init_ok) {
c0108fd7:	a1 0c 0e 1b c0       	mov    0xc01b0e0c,%eax
c0108fdc:	85 c0                	test   %eax,%eax
c0108fde:	0f 84 95 00 00 00    	je     c0109079 <do_pgfault+0x204>
            struct Page *page=NULL;
c0108fe4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            //(1）According to the mm AND addr, try to load the content of right disk page into the memory which page managed.
            if((ret = swap_in(mm, addr, &page)) != 0)
c0108feb:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0108fee:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108ff2:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ff5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ff9:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ffc:	89 04 24             	mov    %eax,(%esp)
c0108fff:	e8 97 e1 ff ff       	call   c010719b <swap_in>
c0109004:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109007:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010900b:	74 0e                	je     c010901b <do_pgfault+0x1a6>
            {
            	cprintf("swap_in in do_pgfault failed\n");
c010900d:	c7 04 24 77 e8 10 c0 	movl   $0xc010e877,(%esp)
c0109014:	e8 3f 73 ff ff       	call   c0100358 <cprintf>
            	goto failed;
c0109019:	eb 7c                	jmp    c0109097 <do_pgfault+0x222>
            }
            //(2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
            if((ret = page_insert(mm->pgdir, page, addr, perm)) != 0)
c010901b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010901e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109021:	8b 40 0c             	mov    0xc(%eax),%eax
c0109024:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0109027:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010902b:	8b 4d 10             	mov    0x10(%ebp),%ecx
c010902e:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0109032:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109036:	89 04 24             	mov    %eax,(%esp)
c0109039:	e8 ae cf ff ff       	call   c0105fec <page_insert>
c010903e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109041:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109045:	74 0f                	je     c0109056 <do_pgfault+0x1e1>
            {
            	cprintf("page_insert in do_pgfault failed\n");
c0109047:	c7 04 24 98 e8 10 c0 	movl   $0xc010e898,(%esp)
c010904e:	e8 05 73 ff ff       	call   c0100358 <cprintf>
            	goto failed;
c0109053:	90                   	nop
c0109054:	eb 41                	jmp    c0109097 <do_pgfault+0x222>
            }
            //(3) make the page swappable.
            swap_map_swappable(mm, addr, page, 1);
c0109056:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109059:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109060:	00 
c0109061:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109065:	8b 45 10             	mov    0x10(%ebp),%eax
c0109068:	89 44 24 04          	mov    %eax,0x4(%esp)
c010906c:	8b 45 08             	mov    0x8(%ebp),%eax
c010906f:	89 04 24             	mov    %eax,(%esp)
c0109072:	e8 5b df ff ff       	call   c0106fd2 <swap_map_swappable>
c0109077:	eb 17                	jmp    c0109090 <do_pgfault+0x21b>
        }
        else
        {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0109079:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010907c:	8b 00                	mov    (%eax),%eax
c010907e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109082:	c7 04 24 bc e8 10 c0 	movl   $0xc010e8bc,(%esp)
c0109089:	e8 ca 72 ff ff       	call   c0100358 <cprintf>
            goto failed;
c010908e:	eb 07                	jmp    c0109097 <do_pgfault+0x222>
        }
   }
   ret = 0;
c0109090:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0109097:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010909a:	c9                   	leave  
c010909b:	c3                   	ret    

c010909c <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c010909c:	55                   	push   %ebp
c010909d:	89 e5                	mov    %esp,%ebp
c010909f:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c01090a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01090a6:	0f 84 e0 00 00 00    	je     c010918c <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c01090ac:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c01090b3:	76 1c                	jbe    c01090d1 <user_mem_check+0x35>
c01090b5:	8b 45 10             	mov    0x10(%ebp),%eax
c01090b8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01090bb:	01 d0                	add    %edx,%eax
c01090bd:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01090c0:	76 0f                	jbe    c01090d1 <user_mem_check+0x35>
c01090c2:	8b 45 10             	mov    0x10(%ebp),%eax
c01090c5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01090c8:	01 d0                	add    %edx,%eax
c01090ca:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c01090cf:	76 0a                	jbe    c01090db <user_mem_check+0x3f>
            return 0;
c01090d1:	b8 00 00 00 00       	mov    $0x0,%eax
c01090d6:	e9 e2 00 00 00       	jmp    c01091bd <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c01090db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01090de:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01090e1:	8b 45 10             	mov    0x10(%ebp),%eax
c01090e4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01090e7:	01 d0                	add    %edx,%eax
c01090e9:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c01090ec:	e9 88 00 00 00       	jmp    c0109179 <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c01090f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01090f4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01090fb:	89 04 24             	mov    %eax,(%esp)
c01090fe:	e8 a2 ef ff ff       	call   c01080a5 <find_vma>
c0109103:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109106:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010910a:	74 0b                	je     c0109117 <user_mem_check+0x7b>
c010910c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010910f:	8b 40 04             	mov    0x4(%eax),%eax
c0109112:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109115:	76 0a                	jbe    c0109121 <user_mem_check+0x85>
                return 0;
c0109117:	b8 00 00 00 00       	mov    $0x0,%eax
c010911c:	e9 9c 00 00 00       	jmp    c01091bd <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0109121:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109124:	8b 50 0c             	mov    0xc(%eax),%edx
c0109127:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010912b:	74 07                	je     c0109134 <user_mem_check+0x98>
c010912d:	b8 02 00 00 00       	mov    $0x2,%eax
c0109132:	eb 05                	jmp    c0109139 <user_mem_check+0x9d>
c0109134:	b8 01 00 00 00       	mov    $0x1,%eax
c0109139:	21 d0                	and    %edx,%eax
c010913b:	85 c0                	test   %eax,%eax
c010913d:	75 07                	jne    c0109146 <user_mem_check+0xaa>
                return 0;
c010913f:	b8 00 00 00 00       	mov    $0x0,%eax
c0109144:	eb 77                	jmp    c01091bd <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0109146:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010914a:	74 24                	je     c0109170 <user_mem_check+0xd4>
c010914c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010914f:	8b 40 0c             	mov    0xc(%eax),%eax
c0109152:	83 e0 08             	and    $0x8,%eax
c0109155:	85 c0                	test   %eax,%eax
c0109157:	74 17                	je     c0109170 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0109159:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010915c:	8b 40 04             	mov    0x4(%eax),%eax
c010915f:	05 00 10 00 00       	add    $0x1000,%eax
c0109164:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109167:	76 07                	jbe    c0109170 <user_mem_check+0xd4>
                    return 0;
c0109169:	b8 00 00 00 00       	mov    $0x0,%eax
c010916e:	eb 4d                	jmp    c01091bd <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c0109170:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109173:	8b 40 08             	mov    0x8(%eax),%eax
c0109176:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0109179:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010917c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010917f:	0f 82 6c ff ff ff    	jb     c01090f1 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0109185:	b8 01 00 00 00       	mov    $0x1,%eax
c010918a:	eb 31                	jmp    c01091bd <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c010918c:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0109193:	76 23                	jbe    c01091b8 <user_mem_check+0x11c>
c0109195:	8b 45 10             	mov    0x10(%ebp),%eax
c0109198:	8b 55 0c             	mov    0xc(%ebp),%edx
c010919b:	01 d0                	add    %edx,%eax
c010919d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01091a0:	76 16                	jbe    c01091b8 <user_mem_check+0x11c>
c01091a2:	8b 45 10             	mov    0x10(%ebp),%eax
c01091a5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01091a8:	01 d0                	add    %edx,%eax
c01091aa:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c01091af:	77 07                	ja     c01091b8 <user_mem_check+0x11c>
c01091b1:	b8 01 00 00 00       	mov    $0x1,%eax
c01091b6:	eb 05                	jmp    c01091bd <user_mem_check+0x121>
c01091b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01091bd:	c9                   	leave  
c01091be:	c3                   	ret    

c01091bf <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01091bf:	55                   	push   %ebp
c01091c0:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01091c2:	8b 55 08             	mov    0x8(%ebp),%edx
c01091c5:	a1 90 2e 1b c0       	mov    0xc01b2e90,%eax
c01091ca:	29 c2                	sub    %eax,%edx
c01091cc:	89 d0                	mov    %edx,%eax
c01091ce:	c1 f8 05             	sar    $0x5,%eax
}
c01091d1:	5d                   	pop    %ebp
c01091d2:	c3                   	ret    

c01091d3 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01091d3:	55                   	push   %ebp
c01091d4:	89 e5                	mov    %esp,%ebp
c01091d6:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01091d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01091dc:	89 04 24             	mov    %eax,(%esp)
c01091df:	e8 db ff ff ff       	call   c01091bf <page2ppn>
c01091e4:	c1 e0 0c             	shl    $0xc,%eax
}
c01091e7:	c9                   	leave  
c01091e8:	c3                   	ret    

c01091e9 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c01091e9:	55                   	push   %ebp
c01091ea:	89 e5                	mov    %esp,%ebp
c01091ec:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c01091ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01091f2:	89 04 24             	mov    %eax,(%esp)
c01091f5:	e8 d9 ff ff ff       	call   c01091d3 <page2pa>
c01091fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01091fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109200:	c1 e8 0c             	shr    $0xc,%eax
c0109203:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109206:	a1 80 0d 1b c0       	mov    0xc01b0d80,%eax
c010920b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010920e:	72 23                	jb     c0109233 <page2kva+0x4a>
c0109210:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109213:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109217:	c7 44 24 08 e4 e8 10 	movl   $0xc010e8e4,0x8(%esp)
c010921e:	c0 
c010921f:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0109226:	00 
c0109227:	c7 04 24 07 e9 10 c0 	movl   $0xc010e907,(%esp)
c010922e:	e8 a1 7b ff ff       	call   c0100dd4 <__panic>
c0109233:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109236:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010923b:	c9                   	leave  
c010923c:	c3                   	ret    

c010923d <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010923d:	55                   	push   %ebp
c010923e:	89 e5                	mov    %esp,%ebp
c0109240:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c0109243:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010924a:	e8 d5 88 ff ff       	call   c0101b24 <ide_device_valid>
c010924f:	85 c0                	test   %eax,%eax
c0109251:	75 1c                	jne    c010926f <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c0109253:	c7 44 24 08 15 e9 10 	movl   $0xc010e915,0x8(%esp)
c010925a:	c0 
c010925b:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c0109262:	00 
c0109263:	c7 04 24 2f e9 10 c0 	movl   $0xc010e92f,(%esp)
c010926a:	e8 65 7b ff ff       	call   c0100dd4 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010926f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109276:	e8 e8 88 ff ff       	call   c0101b63 <ide_device_size>
c010927b:	c1 e8 03             	shr    $0x3,%eax
c010927e:	a3 3c 2f 1b c0       	mov    %eax,0xc01b2f3c
}
c0109283:	c9                   	leave  
c0109284:	c3                   	ret    

c0109285 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c0109285:	55                   	push   %ebp
c0109286:	89 e5                	mov    %esp,%ebp
c0109288:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010928b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010928e:	89 04 24             	mov    %eax,(%esp)
c0109291:	e8 53 ff ff ff       	call   c01091e9 <page2kva>
c0109296:	8b 55 08             	mov    0x8(%ebp),%edx
c0109299:	c1 ea 08             	shr    $0x8,%edx
c010929c:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010929f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01092a3:	74 0b                	je     c01092b0 <swapfs_read+0x2b>
c01092a5:	8b 15 3c 2f 1b c0    	mov    0xc01b2f3c,%edx
c01092ab:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c01092ae:	72 23                	jb     c01092d3 <swapfs_read+0x4e>
c01092b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01092b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01092b7:	c7 44 24 08 40 e9 10 	movl   $0xc010e940,0x8(%esp)
c01092be:	c0 
c01092bf:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c01092c6:	00 
c01092c7:	c7 04 24 2f e9 10 c0 	movl   $0xc010e92f,(%esp)
c01092ce:	e8 01 7b ff ff       	call   c0100dd4 <__panic>
c01092d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01092d6:	c1 e2 03             	shl    $0x3,%edx
c01092d9:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c01092e0:	00 
c01092e1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01092e5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01092e9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01092f0:	e8 ad 88 ff ff       	call   c0101ba2 <ide_read_secs>
}
c01092f5:	c9                   	leave  
c01092f6:	c3                   	ret    

c01092f7 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c01092f7:	55                   	push   %ebp
c01092f8:	89 e5                	mov    %esp,%ebp
c01092fa:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c01092fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109300:	89 04 24             	mov    %eax,(%esp)
c0109303:	e8 e1 fe ff ff       	call   c01091e9 <page2kva>
c0109308:	8b 55 08             	mov    0x8(%ebp),%edx
c010930b:	c1 ea 08             	shr    $0x8,%edx
c010930e:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109311:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109315:	74 0b                	je     c0109322 <swapfs_write+0x2b>
c0109317:	8b 15 3c 2f 1b c0    	mov    0xc01b2f3c,%edx
c010931d:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c0109320:	72 23                	jb     c0109345 <swapfs_write+0x4e>
c0109322:	8b 45 08             	mov    0x8(%ebp),%eax
c0109325:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109329:	c7 44 24 08 40 e9 10 	movl   $0xc010e940,0x8(%esp)
c0109330:	c0 
c0109331:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0109338:	00 
c0109339:	c7 04 24 2f e9 10 c0 	movl   $0xc010e92f,(%esp)
c0109340:	e8 8f 7a ff ff       	call   c0100dd4 <__panic>
c0109345:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109348:	c1 e2 03             	shl    $0x3,%edx
c010934b:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c0109352:	00 
c0109353:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109357:	89 54 24 04          	mov    %edx,0x4(%esp)
c010935b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109362:	e8 7d 8a ff ff       	call   c0101de4 <ide_write_secs>
}
c0109367:	c9                   	leave  
c0109368:	c3                   	ret    

c0109369 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c0109369:	52                   	push   %edx
    call *%ebx              # call fn
c010936a:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010936c:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010936d:	e8 e9 0c 00 00       	call   c010a05b <do_exit>

c0109372 <test_and_set_bit>:
 * test_and_set_bit - Atomically set a bit and return its old value
 * @nr:     the bit to set
 * @addr:   the address to count from
 * */
static inline bool
test_and_set_bit(int nr, volatile void *addr) {
c0109372:	55                   	push   %ebp
c0109373:	89 e5                	mov    %esp,%ebp
c0109375:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btsl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c0109378:	8b 55 0c             	mov    0xc(%ebp),%edx
c010937b:	8b 45 08             	mov    0x8(%ebp),%eax
c010937e:	0f ab 02             	bts    %eax,(%edx)
c0109381:	19 c0                	sbb    %eax,%eax
c0109383:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c0109386:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010938a:	0f 95 c0             	setne  %al
c010938d:	0f b6 c0             	movzbl %al,%eax
}
c0109390:	c9                   	leave  
c0109391:	c3                   	ret    

c0109392 <test_and_clear_bit>:
 * test_and_clear_bit - Atomically clear a bit and return its old value
 * @nr:     the bit to clear
 * @addr:   the address to count from
 * */
static inline bool
test_and_clear_bit(int nr, volatile void *addr) {
c0109392:	55                   	push   %ebp
c0109393:	89 e5                	mov    %esp,%ebp
c0109395:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btrl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c0109398:	8b 55 0c             	mov    0xc(%ebp),%edx
c010939b:	8b 45 08             	mov    0x8(%ebp),%eax
c010939e:	0f b3 02             	btr    %eax,(%edx)
c01093a1:	19 c0                	sbb    %eax,%eax
c01093a3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c01093a6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01093aa:	0f 95 c0             	setne  %al
c01093ad:	0f b6 c0             	movzbl %al,%eax
}
c01093b0:	c9                   	leave  
c01093b1:	c3                   	ret    

c01093b2 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01093b2:	55                   	push   %ebp
c01093b3:	89 e5                	mov    %esp,%ebp
c01093b5:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01093b8:	9c                   	pushf  
c01093b9:	58                   	pop    %eax
c01093ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01093bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01093c0:	25 00 02 00 00       	and    $0x200,%eax
c01093c5:	85 c0                	test   %eax,%eax
c01093c7:	74 0c                	je     c01093d5 <__intr_save+0x23>
        intr_disable();
c01093c9:	e8 5e 8c ff ff       	call   c010202c <intr_disable>
        return 1;
c01093ce:	b8 01 00 00 00       	mov    $0x1,%eax
c01093d3:	eb 05                	jmp    c01093da <__intr_save+0x28>
    }
    return 0;
c01093d5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01093da:	c9                   	leave  
c01093db:	c3                   	ret    

c01093dc <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01093dc:	55                   	push   %ebp
c01093dd:	89 e5                	mov    %esp,%ebp
c01093df:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01093e2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01093e6:	74 05                	je     c01093ed <__intr_restore+0x11>
        intr_enable();
c01093e8:	e8 39 8c ff ff       	call   c0102026 <intr_enable>
    }
}
c01093ed:	c9                   	leave  
c01093ee:	c3                   	ret    

c01093ef <try_lock>:
lock_init(lock_t *lock) {
    *lock = 0;
}

static inline bool
try_lock(lock_t *lock) {
c01093ef:	55                   	push   %ebp
c01093f0:	89 e5                	mov    %esp,%ebp
c01093f2:	83 ec 08             	sub    $0x8,%esp
    return !test_and_set_bit(0, lock);
c01093f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01093f8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01093fc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0109403:	e8 6a ff ff ff       	call   c0109372 <test_and_set_bit>
c0109408:	85 c0                	test   %eax,%eax
c010940a:	0f 94 c0             	sete   %al
c010940d:	0f b6 c0             	movzbl %al,%eax
}
c0109410:	c9                   	leave  
c0109411:	c3                   	ret    

c0109412 <lock>:

static inline void
lock(lock_t *lock) {
c0109412:	55                   	push   %ebp
c0109413:	89 e5                	mov    %esp,%ebp
c0109415:	83 ec 18             	sub    $0x18,%esp
    while (!try_lock(lock)) {
c0109418:	eb 05                	jmp    c010941f <lock+0xd>
        schedule();
c010941a:	e8 39 23 00 00       	call   c010b758 <schedule>
    return !test_and_set_bit(0, lock);
}

static inline void
lock(lock_t *lock) {
    while (!try_lock(lock)) {
c010941f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109422:	89 04 24             	mov    %eax,(%esp)
c0109425:	e8 c5 ff ff ff       	call   c01093ef <try_lock>
c010942a:	85 c0                	test   %eax,%eax
c010942c:	74 ec                	je     c010941a <lock+0x8>
        schedule();
    }
}
c010942e:	c9                   	leave  
c010942f:	c3                   	ret    

c0109430 <unlock>:

static inline void
unlock(lock_t *lock) {
c0109430:	55                   	push   %ebp
c0109431:	89 e5                	mov    %esp,%ebp
c0109433:	83 ec 18             	sub    $0x18,%esp
    if (!test_and_clear_bit(0, lock)) {
c0109436:	8b 45 08             	mov    0x8(%ebp),%eax
c0109439:	89 44 24 04          	mov    %eax,0x4(%esp)
c010943d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0109444:	e8 49 ff ff ff       	call   c0109392 <test_and_clear_bit>
c0109449:	85 c0                	test   %eax,%eax
c010944b:	75 1c                	jne    c0109469 <unlock+0x39>
        panic("Unlock failed.\n");
c010944d:	c7 44 24 08 60 e9 10 	movl   $0xc010e960,0x8(%esp)
c0109454:	c0 
c0109455:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
c010945c:	00 
c010945d:	c7 04 24 70 e9 10 c0 	movl   $0xc010e970,(%esp)
c0109464:	e8 6b 79 ff ff       	call   c0100dd4 <__panic>
    }
}
c0109469:	c9                   	leave  
c010946a:	c3                   	ret    

c010946b <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010946b:	55                   	push   %ebp
c010946c:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010946e:	8b 55 08             	mov    0x8(%ebp),%edx
c0109471:	a1 90 2e 1b c0       	mov    0xc01b2e90,%eax
c0109476:	29 c2                	sub    %eax,%edx
c0109478:	89 d0                	mov    %edx,%eax
c010947a:	c1 f8 05             	sar    $0x5,%eax
}
c010947d:	5d                   	pop    %ebp
c010947e:	c3                   	ret    

c010947f <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010947f:	55                   	push   %ebp
c0109480:	89 e5                	mov    %esp,%ebp
c0109482:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0109485:	8b 45 08             	mov    0x8(%ebp),%eax
c0109488:	89 04 24             	mov    %eax,(%esp)
c010948b:	e8 db ff ff ff       	call   c010946b <page2ppn>
c0109490:	c1 e0 0c             	shl    $0xc,%eax
}
c0109493:	c9                   	leave  
c0109494:	c3                   	ret    

c0109495 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0109495:	55                   	push   %ebp
c0109496:	89 e5                	mov    %esp,%ebp
c0109498:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010949b:	8b 45 08             	mov    0x8(%ebp),%eax
c010949e:	c1 e8 0c             	shr    $0xc,%eax
c01094a1:	89 c2                	mov    %eax,%edx
c01094a3:	a1 80 0d 1b c0       	mov    0xc01b0d80,%eax
c01094a8:	39 c2                	cmp    %eax,%edx
c01094aa:	72 1c                	jb     c01094c8 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c01094ac:	c7 44 24 08 84 e9 10 	movl   $0xc010e984,0x8(%esp)
c01094b3:	c0 
c01094b4:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c01094bb:	00 
c01094bc:	c7 04 24 a3 e9 10 c0 	movl   $0xc010e9a3,(%esp)
c01094c3:	e8 0c 79 ff ff       	call   c0100dd4 <__panic>
    }
    return &pages[PPN(pa)];
c01094c8:	a1 90 2e 1b c0       	mov    0xc01b2e90,%eax
c01094cd:	8b 55 08             	mov    0x8(%ebp),%edx
c01094d0:	c1 ea 0c             	shr    $0xc,%edx
c01094d3:	c1 e2 05             	shl    $0x5,%edx
c01094d6:	01 d0                	add    %edx,%eax
}
c01094d8:	c9                   	leave  
c01094d9:	c3                   	ret    

c01094da <page2kva>:

static inline void *
page2kva(struct Page *page) {
c01094da:	55                   	push   %ebp
c01094db:	89 e5                	mov    %esp,%ebp
c01094dd:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c01094e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01094e3:	89 04 24             	mov    %eax,(%esp)
c01094e6:	e8 94 ff ff ff       	call   c010947f <page2pa>
c01094eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01094ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094f1:	c1 e8 0c             	shr    $0xc,%eax
c01094f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01094f7:	a1 80 0d 1b c0       	mov    0xc01b0d80,%eax
c01094fc:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01094ff:	72 23                	jb     c0109524 <page2kva+0x4a>
c0109501:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109504:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109508:	c7 44 24 08 b4 e9 10 	movl   $0xc010e9b4,0x8(%esp)
c010950f:	c0 
c0109510:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0109517:	00 
c0109518:	c7 04 24 a3 e9 10 c0 	movl   $0xc010e9a3,(%esp)
c010951f:	e8 b0 78 ff ff       	call   c0100dd4 <__panic>
c0109524:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109527:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010952c:	c9                   	leave  
c010952d:	c3                   	ret    

c010952e <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010952e:	55                   	push   %ebp
c010952f:	89 e5                	mov    %esp,%ebp
c0109531:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c0109534:	8b 45 08             	mov    0x8(%ebp),%eax
c0109537:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010953a:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0109541:	77 23                	ja     c0109566 <kva2page+0x38>
c0109543:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109546:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010954a:	c7 44 24 08 d8 e9 10 	movl   $0xc010e9d8,0x8(%esp)
c0109551:	c0 
c0109552:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0109559:	00 
c010955a:	c7 04 24 a3 e9 10 c0 	movl   $0xc010e9a3,(%esp)
c0109561:	e8 6e 78 ff ff       	call   c0100dd4 <__panic>
c0109566:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109569:	05 00 00 00 40       	add    $0x40000000,%eax
c010956e:	89 04 24             	mov    %eax,(%esp)
c0109571:	e8 1f ff ff ff       	call   c0109495 <pa2page>
}
c0109576:	c9                   	leave  
c0109577:	c3                   	ret    

c0109578 <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c0109578:	55                   	push   %ebp
c0109579:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010957b:	8b 45 08             	mov    0x8(%ebp),%eax
c010957e:	8b 40 18             	mov    0x18(%eax),%eax
c0109581:	8d 50 01             	lea    0x1(%eax),%edx
c0109584:	8b 45 08             	mov    0x8(%ebp),%eax
c0109587:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010958a:	8b 45 08             	mov    0x8(%ebp),%eax
c010958d:	8b 40 18             	mov    0x18(%eax),%eax
}
c0109590:	5d                   	pop    %ebp
c0109591:	c3                   	ret    

c0109592 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c0109592:	55                   	push   %ebp
c0109593:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c0109595:	8b 45 08             	mov    0x8(%ebp),%eax
c0109598:	8b 40 18             	mov    0x18(%eax),%eax
c010959b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010959e:	8b 45 08             	mov    0x8(%ebp),%eax
c01095a1:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c01095a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01095a7:	8b 40 18             	mov    0x18(%eax),%eax
}
c01095aa:	5d                   	pop    %ebp
c01095ab:	c3                   	ret    

c01095ac <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c01095ac:	55                   	push   %ebp
c01095ad:	89 e5                	mov    %esp,%ebp
c01095af:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c01095b2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01095b6:	74 0e                	je     c01095c6 <lock_mm+0x1a>
        lock(&(mm->mm_lock));
c01095b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01095bb:	83 c0 1c             	add    $0x1c,%eax
c01095be:	89 04 24             	mov    %eax,(%esp)
c01095c1:	e8 4c fe ff ff       	call   c0109412 <lock>
    }
}
c01095c6:	c9                   	leave  
c01095c7:	c3                   	ret    

c01095c8 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c01095c8:	55                   	push   %ebp
c01095c9:	89 e5                	mov    %esp,%ebp
c01095cb:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c01095ce:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01095d2:	74 0e                	je     c01095e2 <unlock_mm+0x1a>
        unlock(&(mm->mm_lock));
c01095d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01095d7:	83 c0 1c             	add    $0x1c,%eax
c01095da:	89 04 24             	mov    %eax,(%esp)
c01095dd:	e8 4e fe ff ff       	call   c0109430 <unlock>
    }
}
c01095e2:	c9                   	leave  
c01095e3:	c3                   	ret    

c01095e4 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c01095e4:	55                   	push   %ebp
c01095e5:	89 e5                	mov    %esp,%ebp
c01095e7:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c01095ea:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
c01095f1:	e8 c1 b7 ff ff       	call   c0104db7 <kmalloc>
c01095f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c01095f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01095fd:	0f 84 4a 01 00 00    	je     c010974d <alloc_proc+0x169>
     *       struct trapframe *tf;                       // Trap frame for current interrupt
     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
     *       uint32_t flags;                             // Process flag
     *       char name[PROC_NAME_LEN + 1];               // Process name
     */
    proc->state = PROC_UNINIT;
c0109603:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109606:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    proc->pid = -1;
c010960c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010960f:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
    proc->runs = 0;
c0109616:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109619:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    proc->kstack = 0;
c0109620:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109623:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    proc->need_resched = 0;
c010962a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010962d:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    proc->parent = NULL;
c0109634:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109637:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    proc->mm = NULL;
c010963e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109641:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    memset(&(proc->context), 0, sizeof(struct context));
c0109648:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010964b:	83 c0 1c             	add    $0x1c,%eax
c010964e:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c0109655:	00 
c0109656:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010965d:	00 
c010965e:	89 04 24             	mov    %eax,(%esp)
c0109661:	e8 8a 31 00 00       	call   c010c7f0 <memset>
    proc->tf = NULL;
c0109666:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109669:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
    proc->cr3 = boot_cr3;
c0109670:	8b 15 8c 2e 1b c0    	mov    0xc01b2e8c,%edx
c0109676:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109679:	89 50 40             	mov    %edx,0x40(%eax)
    proc->flags = 0;
c010967c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010967f:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
    memset(proc->name, 0, PROC_NAME_LEN);		
c0109686:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109689:	83 c0 48             	add    $0x48,%eax
c010968c:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
c0109693:	00 
c0109694:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010969b:	00 
c010969c:	89 04 24             	mov    %eax,(%esp)
c010969f:	e8 4c 31 00 00       	call   c010c7f0 <memset>
    /*
     * below fields(add in LAB5) in proc_struct need to be initialized	
     *       uint32_t wait_state;                        // waiting state
     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
	 */
	proc->wait_state = 0;
c01096a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096a7:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
    proc->cptr = NULL;
c01096ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096b1:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
    proc->yptr = NULL;
c01096b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096bb:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
    proc->optr = NULL;
c01096c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096c5:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)
     *     int time_slice;                             // time slice for occupying the CPU
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
    proc->rq = NULL;
c01096cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096cf:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
    proc->run_link.prev = proc->run_link.next = NULL;
c01096d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096d9:	c7 80 84 00 00 00 00 	movl   $0x0,0x84(%eax)
c01096e0:	00 00 00 
c01096e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096e6:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
c01096ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096ef:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    proc->time_slice = 0;
c01096f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096f8:	c7 80 88 00 00 00 00 	movl   $0x0,0x88(%eax)
c01096ff:	00 00 00 
    proc->lab6_run_pool.left = proc->lab6_run_pool.parent = proc->lab6_run_pool.right = NULL;
c0109702:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109705:	c7 80 94 00 00 00 00 	movl   $0x0,0x94(%eax)
c010970c:	00 00 00 
c010970f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109712:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c0109718:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010971b:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
c0109721:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109724:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010972a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010972d:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    proc->lab6_stride = 0;
c0109733:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109736:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010973d:	00 00 00 
    proc->lab6_priority = 0;
c0109740:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109743:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
c010974a:	00 00 00 

    }
    return proc;
c010974d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109750:	c9                   	leave  
c0109751:	c3                   	ret    

c0109752 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c0109752:	55                   	push   %ebp
c0109753:	89 e5                	mov    %esp,%ebp
c0109755:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c0109758:	8b 45 08             	mov    0x8(%ebp),%eax
c010975b:	83 c0 48             	add    $0x48,%eax
c010975e:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0109765:	00 
c0109766:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010976d:	00 
c010976e:	89 04 24             	mov    %eax,(%esp)
c0109771:	e8 7a 30 00 00       	call   c010c7f0 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c0109776:	8b 45 08             	mov    0x8(%ebp),%eax
c0109779:	8d 50 48             	lea    0x48(%eax),%edx
c010977c:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
c0109783:	00 
c0109784:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109787:	89 44 24 04          	mov    %eax,0x4(%esp)
c010978b:	89 14 24             	mov    %edx,(%esp)
c010978e:	e8 3f 31 00 00       	call   c010c8d2 <memcpy>
}
c0109793:	c9                   	leave  
c0109794:	c3                   	ret    

c0109795 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c0109795:	55                   	push   %ebp
c0109796:	89 e5                	mov    %esp,%ebp
c0109798:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010979b:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01097a2:	00 
c01097a3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01097aa:	00 
c01097ab:	c7 04 24 44 2e 1b c0 	movl   $0xc01b2e44,(%esp)
c01097b2:	e8 39 30 00 00       	call   c010c7f0 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c01097b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01097ba:	83 c0 48             	add    $0x48,%eax
c01097bd:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
c01097c4:	00 
c01097c5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01097c9:	c7 04 24 44 2e 1b c0 	movl   $0xc01b2e44,(%esp)
c01097d0:	e8 fd 30 00 00       	call   c010c8d2 <memcpy>
}
c01097d5:	c9                   	leave  
c01097d6:	c3                   	ret    

c01097d7 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c01097d7:	55                   	push   %ebp
c01097d8:	89 e5                	mov    %esp,%ebp
c01097da:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c01097dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01097e0:	83 c0 58             	add    $0x58,%eax
c01097e3:	c7 45 fc 70 2f 1b c0 	movl   $0xc01b2f70,-0x4(%ebp)
c01097ea:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01097ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01097f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01097f3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01097f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01097f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097fc:	8b 40 04             	mov    0x4(%eax),%eax
c01097ff:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109802:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0109805:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109808:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010980b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010980e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109811:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109814:	89 10                	mov    %edx,(%eax)
c0109816:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109819:	8b 10                	mov    (%eax),%edx
c010981b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010981e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109821:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109824:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109827:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010982a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010982d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109830:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c0109832:	8b 45 08             	mov    0x8(%ebp),%eax
c0109835:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010983c:	8b 45 08             	mov    0x8(%ebp),%eax
c010983f:	8b 40 14             	mov    0x14(%eax),%eax
c0109842:	8b 50 70             	mov    0x70(%eax),%edx
c0109845:	8b 45 08             	mov    0x8(%ebp),%eax
c0109848:	89 50 78             	mov    %edx,0x78(%eax)
c010984b:	8b 45 08             	mov    0x8(%ebp),%eax
c010984e:	8b 40 78             	mov    0x78(%eax),%eax
c0109851:	85 c0                	test   %eax,%eax
c0109853:	74 0c                	je     c0109861 <set_links+0x8a>
        proc->optr->yptr = proc;
c0109855:	8b 45 08             	mov    0x8(%ebp),%eax
c0109858:	8b 40 78             	mov    0x78(%eax),%eax
c010985b:	8b 55 08             	mov    0x8(%ebp),%edx
c010985e:	89 50 74             	mov    %edx,0x74(%eax)
    }
    proc->parent->cptr = proc;
c0109861:	8b 45 08             	mov    0x8(%ebp),%eax
c0109864:	8b 40 14             	mov    0x14(%eax),%eax
c0109867:	8b 55 08             	mov    0x8(%ebp),%edx
c010986a:	89 50 70             	mov    %edx,0x70(%eax)
    nr_process ++;
c010986d:	a1 40 2e 1b c0       	mov    0xc01b2e40,%eax
c0109872:	83 c0 01             	add    $0x1,%eax
c0109875:	a3 40 2e 1b c0       	mov    %eax,0xc01b2e40
}
c010987a:	c9                   	leave  
c010987b:	c3                   	ret    

c010987c <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010987c:	55                   	push   %ebp
c010987d:	89 e5                	mov    %esp,%ebp
c010987f:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c0109882:	8b 45 08             	mov    0x8(%ebp),%eax
c0109885:	83 c0 58             	add    $0x58,%eax
c0109888:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010988b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010988e:	8b 40 04             	mov    0x4(%eax),%eax
c0109891:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109894:	8b 12                	mov    (%edx),%edx
c0109896:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0109899:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010989c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010989f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01098a2:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01098a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098a8:	8b 55 f8             	mov    -0x8(%ebp),%edx
c01098ab:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c01098ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01098b0:	8b 40 78             	mov    0x78(%eax),%eax
c01098b3:	85 c0                	test   %eax,%eax
c01098b5:	74 0f                	je     c01098c6 <remove_links+0x4a>
        proc->optr->yptr = proc->yptr;
c01098b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01098ba:	8b 40 78             	mov    0x78(%eax),%eax
c01098bd:	8b 55 08             	mov    0x8(%ebp),%edx
c01098c0:	8b 52 74             	mov    0x74(%edx),%edx
c01098c3:	89 50 74             	mov    %edx,0x74(%eax)
    }
    if (proc->yptr != NULL) {
c01098c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01098c9:	8b 40 74             	mov    0x74(%eax),%eax
c01098cc:	85 c0                	test   %eax,%eax
c01098ce:	74 11                	je     c01098e1 <remove_links+0x65>
        proc->yptr->optr = proc->optr;
c01098d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01098d3:	8b 40 74             	mov    0x74(%eax),%eax
c01098d6:	8b 55 08             	mov    0x8(%ebp),%edx
c01098d9:	8b 52 78             	mov    0x78(%edx),%edx
c01098dc:	89 50 78             	mov    %edx,0x78(%eax)
c01098df:	eb 0f                	jmp    c01098f0 <remove_links+0x74>
    }
    else {
       proc->parent->cptr = proc->optr;
c01098e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01098e4:	8b 40 14             	mov    0x14(%eax),%eax
c01098e7:	8b 55 08             	mov    0x8(%ebp),%edx
c01098ea:	8b 52 78             	mov    0x78(%edx),%edx
c01098ed:	89 50 70             	mov    %edx,0x70(%eax)
    }
    nr_process --;
c01098f0:	a1 40 2e 1b c0       	mov    0xc01b2e40,%eax
c01098f5:	83 e8 01             	sub    $0x1,%eax
c01098f8:	a3 40 2e 1b c0       	mov    %eax,0xc01b2e40
}
c01098fd:	c9                   	leave  
c01098fe:	c3                   	ret    

c01098ff <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c01098ff:	55                   	push   %ebp
c0109900:	89 e5                	mov    %esp,%ebp
c0109902:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c0109905:	c7 45 f8 70 2f 1b c0 	movl   $0xc01b2f70,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010990c:	a1 80 ea 12 c0       	mov    0xc012ea80,%eax
c0109911:	83 c0 01             	add    $0x1,%eax
c0109914:	a3 80 ea 12 c0       	mov    %eax,0xc012ea80
c0109919:	a1 80 ea 12 c0       	mov    0xc012ea80,%eax
c010991e:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c0109923:	7e 0c                	jle    c0109931 <get_pid+0x32>
        last_pid = 1;
c0109925:	c7 05 80 ea 12 c0 01 	movl   $0x1,0xc012ea80
c010992c:	00 00 00 
        goto inside;
c010992f:	eb 13                	jmp    c0109944 <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c0109931:	8b 15 80 ea 12 c0    	mov    0xc012ea80,%edx
c0109937:	a1 84 ea 12 c0       	mov    0xc012ea84,%eax
c010993c:	39 c2                	cmp    %eax,%edx
c010993e:	0f 8c ac 00 00 00    	jl     c01099f0 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c0109944:	c7 05 84 ea 12 c0 00 	movl   $0x2000,0xc012ea84
c010994b:	20 00 00 
    repeat:
        le = list;
c010994e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109951:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c0109954:	eb 7f                	jmp    c01099d5 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c0109956:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109959:	83 e8 58             	sub    $0x58,%eax
c010995c:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010995f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109962:	8b 50 04             	mov    0x4(%eax),%edx
c0109965:	a1 80 ea 12 c0       	mov    0xc012ea80,%eax
c010996a:	39 c2                	cmp    %eax,%edx
c010996c:	75 3e                	jne    c01099ac <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010996e:	a1 80 ea 12 c0       	mov    0xc012ea80,%eax
c0109973:	83 c0 01             	add    $0x1,%eax
c0109976:	a3 80 ea 12 c0       	mov    %eax,0xc012ea80
c010997b:	8b 15 80 ea 12 c0    	mov    0xc012ea80,%edx
c0109981:	a1 84 ea 12 c0       	mov    0xc012ea84,%eax
c0109986:	39 c2                	cmp    %eax,%edx
c0109988:	7c 4b                	jl     c01099d5 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010998a:	a1 80 ea 12 c0       	mov    0xc012ea80,%eax
c010998f:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c0109994:	7e 0a                	jle    c01099a0 <get_pid+0xa1>
                        last_pid = 1;
c0109996:	c7 05 80 ea 12 c0 01 	movl   $0x1,0xc012ea80
c010999d:	00 00 00 
                    }
                    next_safe = MAX_PID;
c01099a0:	c7 05 84 ea 12 c0 00 	movl   $0x2000,0xc012ea84
c01099a7:	20 00 00 
                    goto repeat;
c01099aa:	eb a2                	jmp    c010994e <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c01099ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099af:	8b 50 04             	mov    0x4(%eax),%edx
c01099b2:	a1 80 ea 12 c0       	mov    0xc012ea80,%eax
c01099b7:	39 c2                	cmp    %eax,%edx
c01099b9:	7e 1a                	jle    c01099d5 <get_pid+0xd6>
c01099bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099be:	8b 50 04             	mov    0x4(%eax),%edx
c01099c1:	a1 84 ea 12 c0       	mov    0xc012ea84,%eax
c01099c6:	39 c2                	cmp    %eax,%edx
c01099c8:	7d 0b                	jge    c01099d5 <get_pid+0xd6>
                next_safe = proc->pid;
c01099ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099cd:	8b 40 04             	mov    0x4(%eax),%eax
c01099d0:	a3 84 ea 12 c0       	mov    %eax,0xc012ea84
c01099d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01099d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01099db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01099de:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c01099e1:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01099e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01099e7:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01099ea:	0f 85 66 ff ff ff    	jne    c0109956 <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c01099f0:	a1 80 ea 12 c0       	mov    0xc012ea80,%eax
}
c01099f5:	c9                   	leave  
c01099f6:	c3                   	ret    

c01099f7 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c01099f7:	55                   	push   %ebp
c01099f8:	89 e5                	mov    %esp,%ebp
c01099fa:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c01099fd:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c0109a02:	39 45 08             	cmp    %eax,0x8(%ebp)
c0109a05:	74 63                	je     c0109a6a <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c0109a07:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c0109a0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109a0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a12:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c0109a15:	e8 98 f9 ff ff       	call   c01093b2 <__intr_save>
c0109a1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c0109a1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a20:	a3 28 0e 1b c0       	mov    %eax,0xc01b0e28
            load_esp0(next->kstack + KSTACKSIZE);
c0109a25:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a28:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a2b:	05 00 20 00 00       	add    $0x2000,%eax
c0109a30:	89 04 24             	mov    %eax,(%esp)
c0109a33:	e8 a6 b6 ff ff       	call   c01050de <load_esp0>
            lcr3(next->cr3);
c0109a38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a3b:	8b 40 40             	mov    0x40(%eax),%eax
c0109a3e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c0109a41:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109a44:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c0109a47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a4a:	8d 50 1c             	lea    0x1c(%eax),%edx
c0109a4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a50:	83 c0 1c             	add    $0x1c,%eax
c0109a53:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109a57:	89 04 24             	mov    %eax,(%esp)
c0109a5a:	e8 93 15 00 00       	call   c010aff2 <switch_to>
        }
        local_intr_restore(intr_flag);
c0109a5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a62:	89 04 24             	mov    %eax,(%esp)
c0109a65:	e8 72 f9 ff ff       	call   c01093dc <__intr_restore>
    }
}
c0109a6a:	c9                   	leave  
c0109a6b:	c3                   	ret    

c0109a6c <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c0109a6c:	55                   	push   %ebp
c0109a6d:	89 e5                	mov    %esp,%ebp
c0109a6f:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c0109a72:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c0109a77:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109a7a:	89 04 24             	mov    %eax,(%esp)
c0109a7d:	e8 a0 91 ff ff       	call   c0102c22 <forkrets>
}
c0109a82:	c9                   	leave  
c0109a83:	c3                   	ret    

c0109a84 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c0109a84:	55                   	push   %ebp
c0109a85:	89 e5                	mov    %esp,%ebp
c0109a87:	53                   	push   %ebx
c0109a88:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c0109a8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a8e:	8d 58 60             	lea    0x60(%eax),%ebx
c0109a91:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a94:	8b 40 04             	mov    0x4(%eax),%eax
c0109a97:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c0109a9e:	00 
c0109a9f:	89 04 24             	mov    %eax,(%esp)
c0109aa2:	e8 9c 22 00 00       	call   c010bd43 <hash32>
c0109aa7:	c1 e0 03             	shl    $0x3,%eax
c0109aaa:	05 40 0e 1b c0       	add    $0xc01b0e40,%eax
c0109aaf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109ab2:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c0109ab5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ab8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109abb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109abe:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0109ac1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ac4:	8b 40 04             	mov    0x4(%eax),%eax
c0109ac7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109aca:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0109acd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109ad0:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0109ad3:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109ad6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109ad9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109adc:	89 10                	mov    %edx,(%eax)
c0109ade:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109ae1:	8b 10                	mov    (%eax),%edx
c0109ae3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109ae6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109ae9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109aec:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0109aef:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109af2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109af5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109af8:	89 10                	mov    %edx,(%eax)
}
c0109afa:	83 c4 34             	add    $0x34,%esp
c0109afd:	5b                   	pop    %ebx
c0109afe:	5d                   	pop    %ebp
c0109aff:	c3                   	ret    

c0109b00 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c0109b00:	55                   	push   %ebp
c0109b01:	89 e5                	mov    %esp,%ebp
c0109b03:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c0109b06:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b09:	83 c0 60             	add    $0x60,%eax
c0109b0c:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109b0f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109b12:	8b 40 04             	mov    0x4(%eax),%eax
c0109b15:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109b18:	8b 12                	mov    (%edx),%edx
c0109b1a:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0109b1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109b20:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109b23:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109b26:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109b29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b2c:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0109b2f:	89 10                	mov    %edx,(%eax)
}
c0109b31:	c9                   	leave  
c0109b32:	c3                   	ret    

c0109b33 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c0109b33:	55                   	push   %ebp
c0109b34:	89 e5                	mov    %esp,%ebp
c0109b36:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c0109b39:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109b3d:	7e 5f                	jle    c0109b9e <find_proc+0x6b>
c0109b3f:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c0109b46:	7f 56                	jg     c0109b9e <find_proc+0x6b>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c0109b48:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b4b:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c0109b52:	00 
c0109b53:	89 04 24             	mov    %eax,(%esp)
c0109b56:	e8 e8 21 00 00       	call   c010bd43 <hash32>
c0109b5b:	c1 e0 03             	shl    $0x3,%eax
c0109b5e:	05 40 0e 1b c0       	add    $0xc01b0e40,%eax
c0109b63:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109b66:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b69:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c0109b6c:	eb 19                	jmp    c0109b87 <find_proc+0x54>
            struct proc_struct *proc = le2proc(le, hash_link);
c0109b6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b71:	83 e8 60             	sub    $0x60,%eax
c0109b74:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c0109b77:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109b7a:	8b 40 04             	mov    0x4(%eax),%eax
c0109b7d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109b80:	75 05                	jne    c0109b87 <find_proc+0x54>
                return proc;
c0109b82:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109b85:	eb 1c                	jmp    c0109ba3 <find_proc+0x70>
c0109b87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b8a:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109b8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109b90:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c0109b93:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109b96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b99:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0109b9c:	75 d0                	jne    c0109b6e <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c0109b9e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109ba3:	c9                   	leave  
c0109ba4:	c3                   	ret    

c0109ba5 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c0109ba5:	55                   	push   %ebp
c0109ba6:	89 e5                	mov    %esp,%ebp
c0109ba8:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c0109bab:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c0109bb2:	00 
c0109bb3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109bba:	00 
c0109bbb:	8d 45 ac             	lea    -0x54(%ebp),%eax
c0109bbe:	89 04 24             	mov    %eax,(%esp)
c0109bc1:	e8 2a 2c 00 00       	call   c010c7f0 <memset>
    tf.tf_cs = KERNEL_CS;
c0109bc6:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c0109bcc:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c0109bd2:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0109bd6:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c0109bda:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c0109bde:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c0109be2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109be5:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c0109be8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109beb:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c0109bee:	b8 69 93 10 c0       	mov    $0xc0109369,%eax
c0109bf3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c0109bf6:	8b 45 10             	mov    0x10(%ebp),%eax
c0109bf9:	80 cc 01             	or     $0x1,%ah
c0109bfc:	89 c2                	mov    %eax,%edx
c0109bfe:	8d 45 ac             	lea    -0x54(%ebp),%eax
c0109c01:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109c05:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109c0c:	00 
c0109c0d:	89 14 24             	mov    %edx,(%esp)
c0109c10:	e8 25 03 00 00       	call   c0109f3a <do_fork>
}
c0109c15:	c9                   	leave  
c0109c16:	c3                   	ret    

c0109c17 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c0109c17:	55                   	push   %ebp
c0109c18:	89 e5                	mov    %esp,%ebp
c0109c1a:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c0109c1d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0109c24:	e8 03 b6 ff ff       	call   c010522c <alloc_pages>
c0109c29:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0109c2c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109c30:	74 1a                	je     c0109c4c <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c0109c32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c35:	89 04 24             	mov    %eax,(%esp)
c0109c38:	e8 9d f8 ff ff       	call   c01094da <page2kva>
c0109c3d:	89 c2                	mov    %eax,%edx
c0109c3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c42:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c0109c45:	b8 00 00 00 00       	mov    $0x0,%eax
c0109c4a:	eb 05                	jmp    c0109c51 <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c0109c4c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0109c51:	c9                   	leave  
c0109c52:	c3                   	ret    

c0109c53 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c0109c53:	55                   	push   %ebp
c0109c54:	89 e5                	mov    %esp,%ebp
c0109c56:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c0109c59:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c5c:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c5f:	89 04 24             	mov    %eax,(%esp)
c0109c62:	e8 c7 f8 ff ff       	call   c010952e <kva2page>
c0109c67:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0109c6e:	00 
c0109c6f:	89 04 24             	mov    %eax,(%esp)
c0109c72:	e8 20 b6 ff ff       	call   c0105297 <free_pages>
}
c0109c77:	c9                   	leave  
c0109c78:	c3                   	ret    

c0109c79 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c0109c79:	55                   	push   %ebp
c0109c7a:	89 e5                	mov    %esp,%ebp
c0109c7c:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c0109c7f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109c86:	e8 a1 b5 ff ff       	call   c010522c <alloc_pages>
c0109c8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109c8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109c92:	75 0a                	jne    c0109c9e <setup_pgdir+0x25>
        return -E_NO_MEM;
c0109c94:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0109c99:	e9 80 00 00 00       	jmp    c0109d1e <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c0109c9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ca1:	89 04 24             	mov    %eax,(%esp)
c0109ca4:	e8 31 f8 ff ff       	call   c01094da <page2kva>
c0109ca9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c0109cac:	a1 84 0d 1b c0       	mov    0xc01b0d84,%eax
c0109cb1:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0109cb8:	00 
c0109cb9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109cbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cc0:	89 04 24             	mov    %eax,(%esp)
c0109cc3:	e8 0a 2c 00 00       	call   c010c8d2 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c0109cc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ccb:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0109cd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cd4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109cd7:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c0109cde:	77 23                	ja     c0109d03 <setup_pgdir+0x8a>
c0109ce0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ce3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109ce7:	c7 44 24 08 d8 e9 10 	movl   $0xc010e9d8,0x8(%esp)
c0109cee:	c0 
c0109cef:	c7 44 24 04 41 01 00 	movl   $0x141,0x4(%esp)
c0109cf6:	00 
c0109cf7:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c0109cfe:	e8 d1 70 ff ff       	call   c0100dd4 <__panic>
c0109d03:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109d06:	05 00 00 00 40       	add    $0x40000000,%eax
c0109d0b:	83 c8 03             	or     $0x3,%eax
c0109d0e:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c0109d10:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d13:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109d16:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c0109d19:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109d1e:	c9                   	leave  
c0109d1f:	c3                   	ret    

c0109d20 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c0109d20:	55                   	push   %ebp
c0109d21:	89 e5                	mov    %esp,%ebp
c0109d23:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c0109d26:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d29:	8b 40 0c             	mov    0xc(%eax),%eax
c0109d2c:	89 04 24             	mov    %eax,(%esp)
c0109d2f:	e8 fa f7 ff ff       	call   c010952e <kva2page>
c0109d34:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109d3b:	00 
c0109d3c:	89 04 24             	mov    %eax,(%esp)
c0109d3f:	e8 53 b5 ff ff       	call   c0105297 <free_pages>
}
c0109d44:	c9                   	leave  
c0109d45:	c3                   	ret    

c0109d46 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c0109d46:	55                   	push   %ebp
c0109d47:	89 e5                	mov    %esp,%ebp
c0109d49:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c0109d4c:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c0109d51:	8b 40 18             	mov    0x18(%eax),%eax
c0109d54:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c0109d57:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109d5b:	75 0a                	jne    c0109d67 <copy_mm+0x21>
        return 0;
c0109d5d:	b8 00 00 00 00       	mov    $0x0,%eax
c0109d62:	e9 f9 00 00 00       	jmp    c0109e60 <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c0109d67:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d6a:	25 00 01 00 00       	and    $0x100,%eax
c0109d6f:	85 c0                	test   %eax,%eax
c0109d71:	74 08                	je     c0109d7b <copy_mm+0x35>
        mm = oldmm;
c0109d73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109d76:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c0109d79:	eb 78                	jmp    c0109df3 <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c0109d7b:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c0109d82:	e8 4a e2 ff ff       	call   c0107fd1 <mm_create>
c0109d87:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109d8a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109d8e:	75 05                	jne    c0109d95 <copy_mm+0x4f>
        goto bad_mm;
c0109d90:	e9 c8 00 00 00       	jmp    c0109e5d <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c0109d95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d98:	89 04 24             	mov    %eax,(%esp)
c0109d9b:	e8 d9 fe ff ff       	call   c0109c79 <setup_pgdir>
c0109da0:	85 c0                	test   %eax,%eax
c0109da2:	74 05                	je     c0109da9 <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c0109da4:	e9 a9 00 00 00       	jmp    c0109e52 <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c0109da9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109dac:	89 04 24             	mov    %eax,(%esp)
c0109daf:	e8 f8 f7 ff ff       	call   c01095ac <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c0109db4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109db7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109dbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109dbe:	89 04 24             	mov    %eax,(%esp)
c0109dc1:	e8 22 e7 ff ff       	call   c01084e8 <dup_mmap>
c0109dc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c0109dc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109dcc:	89 04 24             	mov    %eax,(%esp)
c0109dcf:	e8 f4 f7 ff ff       	call   c01095c8 <unlock_mm>

    if (ret != 0) {
c0109dd4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109dd8:	74 19                	je     c0109df3 <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c0109dda:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c0109ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109dde:	89 04 24             	mov    %eax,(%esp)
c0109de1:	e8 03 e8 ff ff       	call   c01085e9 <exit_mmap>
    put_pgdir(mm);
c0109de6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109de9:	89 04 24             	mov    %eax,(%esp)
c0109dec:	e8 2f ff ff ff       	call   c0109d20 <put_pgdir>
c0109df1:	eb 5f                	jmp    c0109e52 <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c0109df3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109df6:	89 04 24             	mov    %eax,(%esp)
c0109df9:	e8 7a f7 ff ff       	call   c0109578 <mm_count_inc>
    proc->mm = mm;
c0109dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e01:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109e04:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c0109e07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e0a:	8b 40 0c             	mov    0xc(%eax),%eax
c0109e0d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109e10:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c0109e17:	77 23                	ja     c0109e3c <copy_mm+0xf6>
c0109e19:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e1c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109e20:	c7 44 24 08 d8 e9 10 	movl   $0xc010e9d8,0x8(%esp)
c0109e27:	c0 
c0109e28:	c7 44 24 04 70 01 00 	movl   $0x170,0x4(%esp)
c0109e2f:	00 
c0109e30:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c0109e37:	e8 98 6f ff ff       	call   c0100dd4 <__panic>
c0109e3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e3f:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c0109e45:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e48:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c0109e4b:	b8 00 00 00 00       	mov    $0x0,%eax
c0109e50:	eb 0e                	jmp    c0109e60 <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c0109e52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e55:	89 04 24             	mov    %eax,(%esp)
c0109e58:	e8 cd e4 ff ff       	call   c010832a <mm_destroy>
bad_mm:
    return ret;
c0109e5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0109e60:	c9                   	leave  
c0109e61:	c3                   	ret    

c0109e62 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c0109e62:	55                   	push   %ebp
c0109e63:	89 e5                	mov    %esp,%ebp
c0109e65:	57                   	push   %edi
c0109e66:	56                   	push   %esi
c0109e67:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c0109e68:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e6b:	8b 40 0c             	mov    0xc(%eax),%eax
c0109e6e:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c0109e73:	89 c2                	mov    %eax,%edx
c0109e75:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e78:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c0109e7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e7e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109e81:	8b 55 10             	mov    0x10(%ebp),%edx
c0109e84:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c0109e89:	89 c1                	mov    %eax,%ecx
c0109e8b:	83 e1 01             	and    $0x1,%ecx
c0109e8e:	85 c9                	test   %ecx,%ecx
c0109e90:	74 0e                	je     c0109ea0 <copy_thread+0x3e>
c0109e92:	0f b6 0a             	movzbl (%edx),%ecx
c0109e95:	88 08                	mov    %cl,(%eax)
c0109e97:	83 c0 01             	add    $0x1,%eax
c0109e9a:	83 c2 01             	add    $0x1,%edx
c0109e9d:	83 eb 01             	sub    $0x1,%ebx
c0109ea0:	89 c1                	mov    %eax,%ecx
c0109ea2:	83 e1 02             	and    $0x2,%ecx
c0109ea5:	85 c9                	test   %ecx,%ecx
c0109ea7:	74 0f                	je     c0109eb8 <copy_thread+0x56>
c0109ea9:	0f b7 0a             	movzwl (%edx),%ecx
c0109eac:	66 89 08             	mov    %cx,(%eax)
c0109eaf:	83 c0 02             	add    $0x2,%eax
c0109eb2:	83 c2 02             	add    $0x2,%edx
c0109eb5:	83 eb 02             	sub    $0x2,%ebx
c0109eb8:	89 d9                	mov    %ebx,%ecx
c0109eba:	c1 e9 02             	shr    $0x2,%ecx
c0109ebd:	89 c7                	mov    %eax,%edi
c0109ebf:	89 d6                	mov    %edx,%esi
c0109ec1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0109ec3:	89 f2                	mov    %esi,%edx
c0109ec5:	89 f8                	mov    %edi,%eax
c0109ec7:	b9 00 00 00 00       	mov    $0x0,%ecx
c0109ecc:	89 de                	mov    %ebx,%esi
c0109ece:	83 e6 02             	and    $0x2,%esi
c0109ed1:	85 f6                	test   %esi,%esi
c0109ed3:	74 0b                	je     c0109ee0 <copy_thread+0x7e>
c0109ed5:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c0109ed9:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c0109edd:	83 c1 02             	add    $0x2,%ecx
c0109ee0:	83 e3 01             	and    $0x1,%ebx
c0109ee3:	85 db                	test   %ebx,%ebx
c0109ee5:	74 07                	je     c0109eee <copy_thread+0x8c>
c0109ee7:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c0109eeb:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c0109eee:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ef1:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109ef4:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c0109efb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109efe:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109f01:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109f04:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c0109f07:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f0a:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109f0d:	8b 55 08             	mov    0x8(%ebp),%edx
c0109f10:	8b 52 3c             	mov    0x3c(%edx),%edx
c0109f13:	8b 52 40             	mov    0x40(%edx),%edx
c0109f16:	80 ce 02             	or     $0x2,%dh
c0109f19:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c0109f1c:	ba 6c 9a 10 c0       	mov    $0xc0109a6c,%edx
c0109f21:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f24:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c0109f27:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f2a:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109f2d:	89 c2                	mov    %eax,%edx
c0109f2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f32:	89 50 20             	mov    %edx,0x20(%eax)
}
c0109f35:	5b                   	pop    %ebx
c0109f36:	5e                   	pop    %esi
c0109f37:	5f                   	pop    %edi
c0109f38:	5d                   	pop    %ebp
c0109f39:	c3                   	ret    

c0109f3a <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c0109f3a:	55                   	push   %ebp
c0109f3b:	89 e5                	mov    %esp,%ebp
c0109f3d:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c0109f40:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c0109f47:	a1 40 2e 1b c0       	mov    0xc01b2e40,%eax
c0109f4c:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0109f51:	7e 05                	jle    c0109f58 <do_fork+0x1e>
        goto fork_out;
c0109f53:	e9 ef 00 00 00       	jmp    c010a047 <do_fork+0x10d>
    }
    ret = -E_NO_MEM;
c0109f58:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
     *   proc_list:    the process set's list
     *   nr_process:   the number of process set
     */

    //    1. call alloc_proc to allocate a proc_struct
    if((proc = alloc_proc()) == NULL)
c0109f5f:	e8 80 f6 ff ff       	call   c01095e4 <alloc_proc>
c0109f64:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109f67:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109f6b:	75 05                	jne    c0109f72 <do_fork+0x38>
    {
    	goto fork_out;
c0109f6d:	e9 d5 00 00 00       	jmp    c010a047 <do_fork+0x10d>
    }
    proc->parent = current;
c0109f72:	8b 15 28 0e 1b c0    	mov    0xc01b0e28,%edx
c0109f78:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f7b:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c0109f7e:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c0109f83:	8b 40 6c             	mov    0x6c(%eax),%eax
c0109f86:	85 c0                	test   %eax,%eax
c0109f88:	74 24                	je     c0109fae <do_fork+0x74>
c0109f8a:	c7 44 24 0c 10 ea 10 	movl   $0xc010ea10,0xc(%esp)
c0109f91:	c0 
c0109f92:	c7 44 24 08 29 ea 10 	movl   $0xc010ea29,0x8(%esp)
c0109f99:	c0 
c0109f9a:	c7 44 24 04 ae 01 00 	movl   $0x1ae,0x4(%esp)
c0109fa1:	00 
c0109fa2:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c0109fa9:	e8 26 6e ff ff       	call   c0100dd4 <__panic>
    //    2. call setup_kstack to allocate a kernel stack for child process
    if(setup_kstack(proc) != 0)
c0109fae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109fb1:	89 04 24             	mov    %eax,(%esp)
c0109fb4:	e8 5e fc ff ff       	call   c0109c17 <setup_kstack>
c0109fb9:	85 c0                	test   %eax,%eax
c0109fbb:	74 05                	je     c0109fc2 <do_fork+0x88>
    {
    	goto bad_fork_cleanup_proc;
c0109fbd:	e9 8a 00 00 00       	jmp    c010a04c <do_fork+0x112>
    }
    //    3. call copy_mm to dup OR share mm according clone_flag
    if(copy_mm(clone_flags, proc) != 0)
c0109fc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109fc5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109fc9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fcc:	89 04 24             	mov    %eax,(%esp)
c0109fcf:	e8 72 fd ff ff       	call   c0109d46 <copy_mm>
c0109fd4:	85 c0                	test   %eax,%eax
c0109fd6:	74 0e                	je     c0109fe6 <do_fork+0xac>
    {
    	goto bad_fork_cleanup_kstack;
c0109fd8:	90                   	nop
    ret = proc->pid;
fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c0109fd9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109fdc:	89 04 24             	mov    %eax,(%esp)
c0109fdf:	e8 6f fc ff ff       	call   c0109c53 <put_kstack>
c0109fe4:	eb 66                	jmp    c010a04c <do_fork+0x112>
    if(copy_mm(clone_flags, proc) != 0)
    {
    	goto bad_fork_cleanup_kstack;
    }
    //    4. call copy_thread to setup tf & context in proc_struct
    copy_thread(proc, stack, tf);
c0109fe6:	8b 45 10             	mov    0x10(%ebp),%eax
c0109fe9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109fed:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ff0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ff4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ff7:	89 04 24             	mov    %eax,(%esp)
c0109ffa:	e8 63 fe ff ff       	call   c0109e62 <copy_thread>
    //    5. insert proc_struct into hash_list && proc_list
    bool intr_flag;
    local_intr_save(intr_flag);
c0109fff:	e8 ae f3 ff ff       	call   c01093b2 <__intr_save>
c010a004:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
		proc->pid = get_pid();
c010a007:	e8 f3 f8 ff ff       	call   c01098ff <get_pid>
c010a00c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a00f:	89 42 04             	mov    %eax,0x4(%edx)
		hash_proc(proc);
c010a012:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a015:	89 04 24             	mov    %eax,(%esp)
c010a018:	e8 67 fa ff ff       	call   c0109a84 <hash_proc>
		set_links(proc);
c010a01d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a020:	89 04 24             	mov    %eax,(%esp)
c010a023:	e8 af f7 ff ff       	call   c01097d7 <set_links>
    }
    local_intr_restore(intr_flag);
c010a028:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a02b:	89 04 24             	mov    %eax,(%esp)
c010a02e:	e8 a9 f3 ff ff       	call   c01093dc <__intr_restore>
    //    6. call wakup_proc to make the new child process RUNNABLE
    wakeup_proc(proc);
c010a033:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a036:	89 04 24             	mov    %eax,(%esp)
c010a039:	e8 81 16 00 00       	call   c010b6bf <wakeup_proc>
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
c010a03e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a041:	8b 40 04             	mov    0x4(%eax),%eax
c010a044:	89 45 f4             	mov    %eax,-0xc(%ebp)
fork_out:
    return ret;
c010a047:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a04a:	eb 0d                	jmp    c010a059 <do_fork+0x11f>

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c010a04c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a04f:	89 04 24             	mov    %eax,(%esp)
c010a052:	e8 7b ad ff ff       	call   c0104dd2 <kfree>
    goto fork_out;
c010a057:	eb ee                	jmp    c010a047 <do_fork+0x10d>
}
c010a059:	c9                   	leave  
c010a05a:	c3                   	ret    

c010a05b <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010a05b:	55                   	push   %ebp
c010a05c:	89 e5                	mov    %esp,%ebp
c010a05e:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010a061:	8b 15 28 0e 1b c0    	mov    0xc01b0e28,%edx
c010a067:	a1 20 0e 1b c0       	mov    0xc01b0e20,%eax
c010a06c:	39 c2                	cmp    %eax,%edx
c010a06e:	75 1c                	jne    c010a08c <do_exit+0x31>
        panic("idleproc exit.\n");
c010a070:	c7 44 24 08 3e ea 10 	movl   $0xc010ea3e,0x8(%esp)
c010a077:	c0 
c010a078:	c7 44 24 04 d9 01 00 	movl   $0x1d9,0x4(%esp)
c010a07f:	00 
c010a080:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010a087:	e8 48 6d ff ff       	call   c0100dd4 <__panic>
    }
    if (current == initproc) {
c010a08c:	8b 15 28 0e 1b c0    	mov    0xc01b0e28,%edx
c010a092:	a1 24 0e 1b c0       	mov    0xc01b0e24,%eax
c010a097:	39 c2                	cmp    %eax,%edx
c010a099:	75 1c                	jne    c010a0b7 <do_exit+0x5c>
        panic("initproc exit.\n");
c010a09b:	c7 44 24 08 4e ea 10 	movl   $0xc010ea4e,0x8(%esp)
c010a0a2:	c0 
c010a0a3:	c7 44 24 04 dc 01 00 	movl   $0x1dc,0x4(%esp)
c010a0aa:	00 
c010a0ab:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010a0b2:	e8 1d 6d ff ff       	call   c0100dd4 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010a0b7:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010a0bc:	8b 40 18             	mov    0x18(%eax),%eax
c010a0bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010a0c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a0c6:	74 4a                	je     c010a112 <do_exit+0xb7>
        lcr3(boot_cr3);
c010a0c8:	a1 8c 2e 1b c0       	mov    0xc01b2e8c,%eax
c010a0cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010a0d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a0d3:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010a0d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0d9:	89 04 24             	mov    %eax,(%esp)
c010a0dc:	e8 b1 f4 ff ff       	call   c0109592 <mm_count_dec>
c010a0e1:	85 c0                	test   %eax,%eax
c010a0e3:	75 21                	jne    c010a106 <do_exit+0xab>
            exit_mmap(mm);
c010a0e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0e8:	89 04 24             	mov    %eax,(%esp)
c010a0eb:	e8 f9 e4 ff ff       	call   c01085e9 <exit_mmap>
            put_pgdir(mm);
c010a0f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0f3:	89 04 24             	mov    %eax,(%esp)
c010a0f6:	e8 25 fc ff ff       	call   c0109d20 <put_pgdir>
            mm_destroy(mm);
c010a0fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0fe:	89 04 24             	mov    %eax,(%esp)
c010a101:	e8 24 e2 ff ff       	call   c010832a <mm_destroy>
        }
        current->mm = NULL;
c010a106:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010a10b:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c010a112:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010a117:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010a11d:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010a122:	8b 55 08             	mov    0x8(%ebp),%edx
c010a125:	89 50 68             	mov    %edx,0x68(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010a128:	e8 85 f2 ff ff       	call   c01093b2 <__intr_save>
c010a12d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010a130:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010a135:	8b 40 14             	mov    0x14(%eax),%eax
c010a138:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010a13b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a13e:	8b 40 6c             	mov    0x6c(%eax),%eax
c010a141:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010a146:	75 10                	jne    c010a158 <do_exit+0xfd>
            wakeup_proc(proc);
c010a148:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a14b:	89 04 24             	mov    %eax,(%esp)
c010a14e:	e8 6c 15 00 00       	call   c010b6bf <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010a153:	e9 8b 00 00 00       	jmp    c010a1e3 <do_exit+0x188>
c010a158:	e9 86 00 00 00       	jmp    c010a1e3 <do_exit+0x188>
            proc = current->cptr;
c010a15d:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010a162:	8b 40 70             	mov    0x70(%eax),%eax
c010a165:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010a168:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010a16d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a170:	8b 52 78             	mov    0x78(%edx),%edx
c010a173:	89 50 70             	mov    %edx,0x70(%eax)
    
            proc->yptr = NULL;
c010a176:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a179:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
            if ((proc->optr = initproc->cptr) != NULL) {
c010a180:	a1 24 0e 1b c0       	mov    0xc01b0e24,%eax
c010a185:	8b 50 70             	mov    0x70(%eax),%edx
c010a188:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a18b:	89 50 78             	mov    %edx,0x78(%eax)
c010a18e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a191:	8b 40 78             	mov    0x78(%eax),%eax
c010a194:	85 c0                	test   %eax,%eax
c010a196:	74 0e                	je     c010a1a6 <do_exit+0x14b>
                initproc->cptr->yptr = proc;
c010a198:	a1 24 0e 1b c0       	mov    0xc01b0e24,%eax
c010a19d:	8b 40 70             	mov    0x70(%eax),%eax
c010a1a0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a1a3:	89 50 74             	mov    %edx,0x74(%eax)
            }
            proc->parent = initproc;
c010a1a6:	8b 15 24 0e 1b c0    	mov    0xc01b0e24,%edx
c010a1ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a1af:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010a1b2:	a1 24 0e 1b c0       	mov    0xc01b0e24,%eax
c010a1b7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a1ba:	89 50 70             	mov    %edx,0x70(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010a1bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a1c0:	8b 00                	mov    (%eax),%eax
c010a1c2:	83 f8 03             	cmp    $0x3,%eax
c010a1c5:	75 1c                	jne    c010a1e3 <do_exit+0x188>
                if (initproc->wait_state == WT_CHILD) {
c010a1c7:	a1 24 0e 1b c0       	mov    0xc01b0e24,%eax
c010a1cc:	8b 40 6c             	mov    0x6c(%eax),%eax
c010a1cf:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010a1d4:	75 0d                	jne    c010a1e3 <do_exit+0x188>
                    wakeup_proc(initproc);
c010a1d6:	a1 24 0e 1b c0       	mov    0xc01b0e24,%eax
c010a1db:	89 04 24             	mov    %eax,(%esp)
c010a1de:	e8 dc 14 00 00       	call   c010b6bf <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010a1e3:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010a1e8:	8b 40 70             	mov    0x70(%eax),%eax
c010a1eb:	85 c0                	test   %eax,%eax
c010a1ed:	0f 85 6a ff ff ff    	jne    c010a15d <do_exit+0x102>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010a1f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a1f6:	89 04 24             	mov    %eax,(%esp)
c010a1f9:	e8 de f1 ff ff       	call   c01093dc <__intr_restore>
    
    schedule();
c010a1fe:	e8 55 15 00 00       	call   c010b758 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010a203:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010a208:	8b 40 04             	mov    0x4(%eax),%eax
c010a20b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a20f:	c7 44 24 08 60 ea 10 	movl   $0xc010ea60,0x8(%esp)
c010a216:	c0 
c010a217:	c7 44 24 04 08 02 00 	movl   $0x208,0x4(%esp)
c010a21e:	00 
c010a21f:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010a226:	e8 a9 6b ff ff       	call   c0100dd4 <__panic>

c010a22b <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010a22b:	55                   	push   %ebp
c010a22c:	89 e5                	mov    %esp,%ebp
c010a22e:	83 ec 78             	sub    $0x78,%esp
    if (current->mm != NULL) {
c010a231:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010a236:	8b 40 18             	mov    0x18(%eax),%eax
c010a239:	85 c0                	test   %eax,%eax
c010a23b:	74 1c                	je     c010a259 <load_icode+0x2e>
        panic("load_icode: current->mm must be empty.\n");
c010a23d:	c7 44 24 08 80 ea 10 	movl   $0xc010ea80,0x8(%esp)
c010a244:	c0 
c010a245:	c7 44 24 04 12 02 00 	movl   $0x212,0x4(%esp)
c010a24c:	00 
c010a24d:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010a254:	e8 7b 6b ff ff       	call   c0100dd4 <__panic>
    }

    int ret = -E_NO_MEM;
c010a259:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010a260:	e8 6c dd ff ff       	call   c0107fd1 <mm_create>
c010a265:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010a268:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010a26c:	75 06                	jne    c010a274 <load_icode+0x49>
        goto bad_mm;
c010a26e:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010a26f:	e9 ef 05 00 00       	jmp    c010a863 <load_icode+0x638>
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010a274:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a277:	89 04 24             	mov    %eax,(%esp)
c010a27a:	e8 fa f9 ff ff       	call   c0109c79 <setup_pgdir>
c010a27f:	85 c0                	test   %eax,%eax
c010a281:	74 05                	je     c010a288 <load_icode+0x5d>
        goto bad_pgdir_cleanup_mm;
c010a283:	e9 f6 05 00 00       	jmp    c010a87e <load_icode+0x653>
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010a288:	8b 45 08             	mov    0x8(%ebp),%eax
c010a28b:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010a28e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a291:	8b 50 1c             	mov    0x1c(%eax),%edx
c010a294:	8b 45 08             	mov    0x8(%ebp),%eax
c010a297:	01 d0                	add    %edx,%eax
c010a299:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010a29c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a29f:	8b 00                	mov    (%eax),%eax
c010a2a1:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010a2a6:	74 0c                	je     c010a2b4 <load_icode+0x89>
        ret = -E_INVAL_ELF;
c010a2a8:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010a2af:	e9 bf 05 00 00       	jmp    c010a873 <load_icode+0x648>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010a2b4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a2b7:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010a2bb:	0f b7 c0             	movzwl %ax,%eax
c010a2be:	c1 e0 05             	shl    $0x5,%eax
c010a2c1:	89 c2                	mov    %eax,%edx
c010a2c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2c6:	01 d0                	add    %edx,%eax
c010a2c8:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010a2cb:	e9 13 03 00 00       	jmp    c010a5e3 <load_icode+0x3b8>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010a2d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2d3:	8b 00                	mov    (%eax),%eax
c010a2d5:	83 f8 01             	cmp    $0x1,%eax
c010a2d8:	74 05                	je     c010a2df <load_icode+0xb4>
            continue ;
c010a2da:	e9 00 03 00 00       	jmp    c010a5df <load_icode+0x3b4>
        }
        if (ph->p_filesz > ph->p_memsz) {
c010a2df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2e2:	8b 50 10             	mov    0x10(%eax),%edx
c010a2e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2e8:	8b 40 14             	mov    0x14(%eax),%eax
c010a2eb:	39 c2                	cmp    %eax,%edx
c010a2ed:	76 0c                	jbe    c010a2fb <load_icode+0xd0>
            ret = -E_INVAL_ELF;
c010a2ef:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010a2f6:	e9 6d 05 00 00       	jmp    c010a868 <load_icode+0x63d>
        }
        if (ph->p_filesz == 0) {
c010a2fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2fe:	8b 40 10             	mov    0x10(%eax),%eax
c010a301:	85 c0                	test   %eax,%eax
c010a303:	75 05                	jne    c010a30a <load_icode+0xdf>
            continue ;
c010a305:	e9 d5 02 00 00       	jmp    c010a5df <load_icode+0x3b4>
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010a30a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010a311:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010a318:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a31b:	8b 40 18             	mov    0x18(%eax),%eax
c010a31e:	83 e0 01             	and    $0x1,%eax
c010a321:	85 c0                	test   %eax,%eax
c010a323:	74 04                	je     c010a329 <load_icode+0xfe>
c010a325:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010a329:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a32c:	8b 40 18             	mov    0x18(%eax),%eax
c010a32f:	83 e0 02             	and    $0x2,%eax
c010a332:	85 c0                	test   %eax,%eax
c010a334:	74 04                	je     c010a33a <load_icode+0x10f>
c010a336:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010a33a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a33d:	8b 40 18             	mov    0x18(%eax),%eax
c010a340:	83 e0 04             	and    $0x4,%eax
c010a343:	85 c0                	test   %eax,%eax
c010a345:	74 04                	je     c010a34b <load_icode+0x120>
c010a347:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010a34b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a34e:	83 e0 02             	and    $0x2,%eax
c010a351:	85 c0                	test   %eax,%eax
c010a353:	74 04                	je     c010a359 <load_icode+0x12e>
c010a355:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010a359:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a35c:	8b 50 14             	mov    0x14(%eax),%edx
c010a35f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a362:	8b 40 08             	mov    0x8(%eax),%eax
c010a365:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010a36c:	00 
c010a36d:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010a370:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010a374:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a378:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a37c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a37f:	89 04 24             	mov    %eax,(%esp)
c010a382:	e8 45 e0 ff ff       	call   c01083cc <mm_map>
c010a387:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a38a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a38e:	74 05                	je     c010a395 <load_icode+0x16a>
            goto bad_cleanup_mmap;
c010a390:	e9 d3 04 00 00       	jmp    c010a868 <load_icode+0x63d>
        }
        unsigned char *from = binary + ph->p_offset;
c010a395:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a398:	8b 50 04             	mov    0x4(%eax),%edx
c010a39b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a39e:	01 d0                	add    %edx,%eax
c010a3a0:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010a3a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a3a6:	8b 40 08             	mov    0x8(%eax),%eax
c010a3a9:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010a3ac:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a3af:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010a3b2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010a3b5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010a3ba:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010a3bd:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010a3c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a3c7:	8b 50 08             	mov    0x8(%eax),%edx
c010a3ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a3cd:	8b 40 10             	mov    0x10(%eax),%eax
c010a3d0:	01 d0                	add    %edx,%eax
c010a3d2:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010a3d5:	e9 90 00 00 00       	jmp    c010a46a <load_icode+0x23f>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010a3da:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a3dd:	8b 40 0c             	mov    0xc(%eax),%eax
c010a3e0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a3e3:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a3e7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010a3ea:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a3ee:	89 04 24             	mov    %eax,(%esp)
c010a3f1:	e8 0c bd ff ff       	call   c0106102 <pgdir_alloc_page>
c010a3f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a3f9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a3fd:	75 05                	jne    c010a404 <load_icode+0x1d9>
                goto bad_cleanup_mmap;
c010a3ff:	e9 64 04 00 00       	jmp    c010a868 <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010a404:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a407:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010a40a:	29 c2                	sub    %eax,%edx
c010a40c:	89 d0                	mov    %edx,%eax
c010a40e:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010a411:	b8 00 10 00 00       	mov    $0x1000,%eax
c010a416:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010a419:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010a41c:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010a423:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a426:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a429:	73 0d                	jae    c010a438 <load_icode+0x20d>
                size -= la - end;
c010a42b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a42e:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010a431:	29 c2                	sub    %eax,%edx
c010a433:	89 d0                	mov    %edx,%eax
c010a435:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010a438:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a43b:	89 04 24             	mov    %eax,(%esp)
c010a43e:	e8 97 f0 ff ff       	call   c01094da <page2kva>
c010a443:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010a446:	01 c2                	add    %eax,%edx
c010a448:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a44b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a44f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a452:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a456:	89 14 24             	mov    %edx,(%esp)
c010a459:	e8 74 24 00 00       	call   c010c8d2 <memcpy>
            start += size, from += size;
c010a45e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a461:	01 45 d8             	add    %eax,-0x28(%ebp)
c010a464:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a467:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010a46a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a46d:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a470:	0f 82 64 ff ff ff    	jb     c010a3da <load_icode+0x1af>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010a476:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a479:	8b 50 08             	mov    0x8(%eax),%edx
c010a47c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a47f:	8b 40 14             	mov    0x14(%eax),%eax
c010a482:	01 d0                	add    %edx,%eax
c010a484:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010a487:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a48a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a48d:	0f 83 b0 00 00 00    	jae    c010a543 <load_icode+0x318>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010a493:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a496:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a499:	75 05                	jne    c010a4a0 <load_icode+0x275>
                continue ;
c010a49b:	e9 3f 01 00 00       	jmp    c010a5df <load_icode+0x3b4>
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010a4a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a4a3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010a4a6:	29 c2                	sub    %eax,%edx
c010a4a8:	89 d0                	mov    %edx,%eax
c010a4aa:	05 00 10 00 00       	add    $0x1000,%eax
c010a4af:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010a4b2:	b8 00 10 00 00       	mov    $0x1000,%eax
c010a4b7:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010a4ba:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010a4bd:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a4c0:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a4c3:	73 0d                	jae    c010a4d2 <load_icode+0x2a7>
                size -= la - end;
c010a4c5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a4c8:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010a4cb:	29 c2                	sub    %eax,%edx
c010a4cd:	89 d0                	mov    %edx,%eax
c010a4cf:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010a4d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4d5:	89 04 24             	mov    %eax,(%esp)
c010a4d8:	e8 fd ef ff ff       	call   c01094da <page2kva>
c010a4dd:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010a4e0:	01 c2                	add    %eax,%edx
c010a4e2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a4e5:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a4e9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a4f0:	00 
c010a4f1:	89 14 24             	mov    %edx,(%esp)
c010a4f4:	e8 f7 22 00 00       	call   c010c7f0 <memset>
            start += size;
c010a4f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a4fc:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010a4ff:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a502:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a505:	73 08                	jae    c010a50f <load_icode+0x2e4>
c010a507:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a50a:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a50d:	74 34                	je     c010a543 <load_icode+0x318>
c010a50f:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a512:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a515:	72 08                	jb     c010a51f <load_icode+0x2f4>
c010a517:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a51a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a51d:	74 24                	je     c010a543 <load_icode+0x318>
c010a51f:	c7 44 24 0c a8 ea 10 	movl   $0xc010eaa8,0xc(%esp)
c010a526:	c0 
c010a527:	c7 44 24 08 29 ea 10 	movl   $0xc010ea29,0x8(%esp)
c010a52e:	c0 
c010a52f:	c7 44 24 04 64 02 00 	movl   $0x264,0x4(%esp)
c010a536:	00 
c010a537:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010a53e:	e8 91 68 ff ff       	call   c0100dd4 <__panic>
        }
        while (start < end) {
c010a543:	e9 8b 00 00 00       	jmp    c010a5d3 <load_icode+0x3a8>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010a548:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a54b:	8b 40 0c             	mov    0xc(%eax),%eax
c010a54e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a551:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a555:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010a558:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a55c:	89 04 24             	mov    %eax,(%esp)
c010a55f:	e8 9e bb ff ff       	call   c0106102 <pgdir_alloc_page>
c010a564:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a567:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a56b:	75 05                	jne    c010a572 <load_icode+0x347>
                goto bad_cleanup_mmap;
c010a56d:	e9 f6 02 00 00       	jmp    c010a868 <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010a572:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a575:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010a578:	29 c2                	sub    %eax,%edx
c010a57a:	89 d0                	mov    %edx,%eax
c010a57c:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010a57f:	b8 00 10 00 00       	mov    $0x1000,%eax
c010a584:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010a587:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010a58a:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010a591:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a594:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a597:	73 0d                	jae    c010a5a6 <load_icode+0x37b>
                size -= la - end;
c010a599:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a59c:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010a59f:	29 c2                	sub    %eax,%edx
c010a5a1:	89 d0                	mov    %edx,%eax
c010a5a3:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010a5a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a5a9:	89 04 24             	mov    %eax,(%esp)
c010a5ac:	e8 29 ef ff ff       	call   c01094da <page2kva>
c010a5b1:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010a5b4:	01 c2                	add    %eax,%edx
c010a5b6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a5b9:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a5bd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a5c4:	00 
c010a5c5:	89 14 24             	mov    %edx,(%esp)
c010a5c8:	e8 23 22 00 00       	call   c010c7f0 <memset>
            start += size;
c010a5cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a5d0:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010a5d3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a5d6:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a5d9:	0f 82 69 ff ff ff    	jb     c010a548 <load_icode+0x31d>
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010a5df:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010a5e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a5e6:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010a5e9:	0f 82 e1 fc ff ff    	jb     c010a2d0 <load_icode+0xa5>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010a5ef:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010a5f6:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010a5fd:	00 
c010a5fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a601:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a605:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010a60c:	00 
c010a60d:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010a614:	af 
c010a615:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a618:	89 04 24             	mov    %eax,(%esp)
c010a61b:	e8 ac dd ff ff       	call   c01083cc <mm_map>
c010a620:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a623:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a627:	74 05                	je     c010a62e <load_icode+0x403>
        goto bad_cleanup_mmap;
c010a629:	e9 3a 02 00 00       	jmp    c010a868 <load_icode+0x63d>
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010a62e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a631:	8b 40 0c             	mov    0xc(%eax),%eax
c010a634:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010a63b:	00 
c010a63c:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010a643:	af 
c010a644:	89 04 24             	mov    %eax,(%esp)
c010a647:	e8 b6 ba ff ff       	call   c0106102 <pgdir_alloc_page>
c010a64c:	85 c0                	test   %eax,%eax
c010a64e:	75 24                	jne    c010a674 <load_icode+0x449>
c010a650:	c7 44 24 0c e4 ea 10 	movl   $0xc010eae4,0xc(%esp)
c010a657:	c0 
c010a658:	c7 44 24 08 29 ea 10 	movl   $0xc010ea29,0x8(%esp)
c010a65f:	c0 
c010a660:	c7 44 24 04 77 02 00 	movl   $0x277,0x4(%esp)
c010a667:	00 
c010a668:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010a66f:	e8 60 67 ff ff       	call   c0100dd4 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010a674:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a677:	8b 40 0c             	mov    0xc(%eax),%eax
c010a67a:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010a681:	00 
c010a682:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010a689:	af 
c010a68a:	89 04 24             	mov    %eax,(%esp)
c010a68d:	e8 70 ba ff ff       	call   c0106102 <pgdir_alloc_page>
c010a692:	85 c0                	test   %eax,%eax
c010a694:	75 24                	jne    c010a6ba <load_icode+0x48f>
c010a696:	c7 44 24 0c 28 eb 10 	movl   $0xc010eb28,0xc(%esp)
c010a69d:	c0 
c010a69e:	c7 44 24 08 29 ea 10 	movl   $0xc010ea29,0x8(%esp)
c010a6a5:	c0 
c010a6a6:	c7 44 24 04 78 02 00 	movl   $0x278,0x4(%esp)
c010a6ad:	00 
c010a6ae:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010a6b5:	e8 1a 67 ff ff       	call   c0100dd4 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010a6ba:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a6bd:	8b 40 0c             	mov    0xc(%eax),%eax
c010a6c0:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010a6c7:	00 
c010a6c8:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010a6cf:	af 
c010a6d0:	89 04 24             	mov    %eax,(%esp)
c010a6d3:	e8 2a ba ff ff       	call   c0106102 <pgdir_alloc_page>
c010a6d8:	85 c0                	test   %eax,%eax
c010a6da:	75 24                	jne    c010a700 <load_icode+0x4d5>
c010a6dc:	c7 44 24 0c 6c eb 10 	movl   $0xc010eb6c,0xc(%esp)
c010a6e3:	c0 
c010a6e4:	c7 44 24 08 29 ea 10 	movl   $0xc010ea29,0x8(%esp)
c010a6eb:	c0 
c010a6ec:	c7 44 24 04 79 02 00 	movl   $0x279,0x4(%esp)
c010a6f3:	00 
c010a6f4:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010a6fb:	e8 d4 66 ff ff       	call   c0100dd4 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010a700:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a703:	8b 40 0c             	mov    0xc(%eax),%eax
c010a706:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010a70d:	00 
c010a70e:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010a715:	af 
c010a716:	89 04 24             	mov    %eax,(%esp)
c010a719:	e8 e4 b9 ff ff       	call   c0106102 <pgdir_alloc_page>
c010a71e:	85 c0                	test   %eax,%eax
c010a720:	75 24                	jne    c010a746 <load_icode+0x51b>
c010a722:	c7 44 24 0c b0 eb 10 	movl   $0xc010ebb0,0xc(%esp)
c010a729:	c0 
c010a72a:	c7 44 24 08 29 ea 10 	movl   $0xc010ea29,0x8(%esp)
c010a731:	c0 
c010a732:	c7 44 24 04 7a 02 00 	movl   $0x27a,0x4(%esp)
c010a739:	00 
c010a73a:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010a741:	e8 8e 66 ff ff       	call   c0100dd4 <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010a746:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a749:	89 04 24             	mov    %eax,(%esp)
c010a74c:	e8 27 ee ff ff       	call   c0109578 <mm_count_inc>
    current->mm = mm;
c010a751:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010a756:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010a759:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010a75c:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010a761:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010a764:	8b 52 0c             	mov    0xc(%edx),%edx
c010a767:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010a76a:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010a771:	77 23                	ja     c010a796 <load_icode+0x56b>
c010a773:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010a776:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a77a:	c7 44 24 08 d8 e9 10 	movl   $0xc010e9d8,0x8(%esp)
c010a781:	c0 
c010a782:	c7 44 24 04 7f 02 00 	movl   $0x27f,0x4(%esp)
c010a789:	00 
c010a78a:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010a791:	e8 3e 66 ff ff       	call   c0100dd4 <__panic>
c010a796:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010a799:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010a79f:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010a7a2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a7a5:	8b 40 0c             	mov    0xc(%eax),%eax
c010a7a8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010a7ab:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010a7b2:	77 23                	ja     c010a7d7 <load_icode+0x5ac>
c010a7b4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010a7b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a7bb:	c7 44 24 08 d8 e9 10 	movl   $0xc010e9d8,0x8(%esp)
c010a7c2:	c0 
c010a7c3:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
c010a7ca:	00 
c010a7cb:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010a7d2:	e8 fd 65 ff ff       	call   c0100dd4 <__panic>
c010a7d7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010a7da:	05 00 00 00 40       	add    $0x40000000,%eax
c010a7df:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010a7e2:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010a7e5:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010a7e8:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010a7ed:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a7f0:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010a7f3:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010a7fa:	00 
c010a7fb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a802:	00 
c010a803:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a806:	89 04 24             	mov    %eax,(%esp)
c010a809:	e8 e2 1f 00 00       	call   c010c7f0 <memset>
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010a80e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a811:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010a817:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a81a:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010a820:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a823:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010a827:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a82a:	66 89 50 28          	mov    %dx,0x28(%eax)
c010a82e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a831:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010a835:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a838:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = USTACKTOP;
c010a83c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a83f:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010a846:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a849:	8b 50 18             	mov    0x18(%eax),%edx
c010a84c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a84f:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010a852:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a855:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010a85c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010a863:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a866:	eb 23                	jmp    c010a88b <load_icode+0x660>
bad_cleanup_mmap:
    exit_mmap(mm);
c010a868:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a86b:	89 04 24             	mov    %eax,(%esp)
c010a86e:	e8 76 dd ff ff       	call   c01085e9 <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010a873:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a876:	89 04 24             	mov    %eax,(%esp)
c010a879:	e8 a2 f4 ff ff       	call   c0109d20 <put_pgdir>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010a87e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a881:	89 04 24             	mov    %eax,(%esp)
c010a884:	e8 a1 da ff ff       	call   c010832a <mm_destroy>
bad_mm:
    goto out;
c010a889:	eb d8                	jmp    c010a863 <load_icode+0x638>
}
c010a88b:	c9                   	leave  
c010a88c:	c3                   	ret    

c010a88d <do_execve>:

// do_execve - call exit_mmap(mm)&pug_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010a88d:	55                   	push   %ebp
c010a88e:	89 e5                	mov    %esp,%ebp
c010a890:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010a893:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010a898:	8b 40 18             	mov    0x18(%eax),%eax
c010a89b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010a89e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8a1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010a8a8:	00 
c010a8a9:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a8ac:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a8b0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a8b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8b7:	89 04 24             	mov    %eax,(%esp)
c010a8ba:	e8 dd e7 ff ff       	call   c010909c <user_mem_check>
c010a8bf:	85 c0                	test   %eax,%eax
c010a8c1:	75 0a                	jne    c010a8cd <do_execve+0x40>
        return -E_INVAL;
c010a8c3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a8c8:	e9 f4 00 00 00       	jmp    c010a9c1 <do_execve+0x134>
    }
    if (len > PROC_NAME_LEN) {
c010a8cd:	83 7d 0c 0f          	cmpl   $0xf,0xc(%ebp)
c010a8d1:	76 07                	jbe    c010a8da <do_execve+0x4d>
        len = PROC_NAME_LEN;
c010a8d3:	c7 45 0c 0f 00 00 00 	movl   $0xf,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010a8da:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c010a8e1:	00 
c010a8e2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a8e9:	00 
c010a8ea:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a8ed:	89 04 24             	mov    %eax,(%esp)
c010a8f0:	e8 fb 1e 00 00       	call   c010c7f0 <memset>
    memcpy(local_name, name, len);
c010a8f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a8f8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a8fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8ff:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a903:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a906:	89 04 24             	mov    %eax,(%esp)
c010a909:	e8 c4 1f 00 00       	call   c010c8d2 <memcpy>

    if (mm != NULL) {
c010a90e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a912:	74 4a                	je     c010a95e <do_execve+0xd1>
        lcr3(boot_cr3);
c010a914:	a1 8c 2e 1b c0       	mov    0xc01b2e8c,%eax
c010a919:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a91c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a91f:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010a922:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a925:	89 04 24             	mov    %eax,(%esp)
c010a928:	e8 65 ec ff ff       	call   c0109592 <mm_count_dec>
c010a92d:	85 c0                	test   %eax,%eax
c010a92f:	75 21                	jne    c010a952 <do_execve+0xc5>
            exit_mmap(mm);
c010a931:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a934:	89 04 24             	mov    %eax,(%esp)
c010a937:	e8 ad dc ff ff       	call   c01085e9 <exit_mmap>
            put_pgdir(mm);
c010a93c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a93f:	89 04 24             	mov    %eax,(%esp)
c010a942:	e8 d9 f3 ff ff       	call   c0109d20 <put_pgdir>
            mm_destroy(mm);
c010a947:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a94a:	89 04 24             	mov    %eax,(%esp)
c010a94d:	e8 d8 d9 ff ff       	call   c010832a <mm_destroy>
        }
        current->mm = NULL;
c010a952:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010a957:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010a95e:	8b 45 14             	mov    0x14(%ebp),%eax
c010a961:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a965:	8b 45 10             	mov    0x10(%ebp),%eax
c010a968:	89 04 24             	mov    %eax,(%esp)
c010a96b:	e8 bb f8 ff ff       	call   c010a22b <load_icode>
c010a970:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a973:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a977:	74 2f                	je     c010a9a8 <do_execve+0x11b>
        goto execve_exit;
c010a979:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010a97a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a97d:	89 04 24             	mov    %eax,(%esp)
c010a980:	e8 d6 f6 ff ff       	call   c010a05b <do_exit>
    panic("already exit: %e.\n", ret);
c010a985:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a988:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a98c:	c7 44 24 08 f3 eb 10 	movl   $0xc010ebf3,0x8(%esp)
c010a993:	c0 
c010a994:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
c010a99b:	00 
c010a99c:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010a9a3:	e8 2c 64 ff ff       	call   c0100dd4 <__panic>
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010a9a8:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010a9ad:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010a9b0:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a9b4:	89 04 24             	mov    %eax,(%esp)
c010a9b7:	e8 96 ed ff ff       	call   c0109752 <set_proc_name>
    return 0;
c010a9bc:	b8 00 00 00 00       	mov    $0x0,%eax

execve_exit:
    do_exit(ret);
    panic("already exit: %e.\n", ret);
}
c010a9c1:	c9                   	leave  
c010a9c2:	c3                   	ret    

c010a9c3 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010a9c3:	55                   	push   %ebp
c010a9c4:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010a9c6:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010a9cb:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010a9d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a9d7:	5d                   	pop    %ebp
c010a9d8:	c3                   	ret    

c010a9d9 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010a9d9:	55                   	push   %ebp
c010a9da:	89 e5                	mov    %esp,%ebp
c010a9dc:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010a9df:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010a9e4:	8b 40 18             	mov    0x18(%eax),%eax
c010a9e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010a9ea:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a9ee:	74 30                	je     c010aa20 <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010a9f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a9f3:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010a9fa:	00 
c010a9fb:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010aa02:	00 
c010aa03:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa07:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa0a:	89 04 24             	mov    %eax,(%esp)
c010aa0d:	e8 8a e6 ff ff       	call   c010909c <user_mem_check>
c010aa12:	85 c0                	test   %eax,%eax
c010aa14:	75 0a                	jne    c010aa20 <do_wait+0x47>
            return -E_INVAL;
c010aa16:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010aa1b:	e9 4b 01 00 00       	jmp    c010ab6b <do_wait+0x192>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010aa20:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010aa27:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010aa2b:	74 39                	je     c010aa66 <do_wait+0x8d>
        proc = find_proc(pid);
c010aa2d:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa30:	89 04 24             	mov    %eax,(%esp)
c010aa33:	e8 fb f0 ff ff       	call   c0109b33 <find_proc>
c010aa38:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010aa3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aa3f:	74 54                	je     c010aa95 <do_wait+0xbc>
c010aa41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa44:	8b 50 14             	mov    0x14(%eax),%edx
c010aa47:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010aa4c:	39 c2                	cmp    %eax,%edx
c010aa4e:	75 45                	jne    c010aa95 <do_wait+0xbc>
            haskid = 1;
c010aa50:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010aa57:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa5a:	8b 00                	mov    (%eax),%eax
c010aa5c:	83 f8 03             	cmp    $0x3,%eax
c010aa5f:	75 34                	jne    c010aa95 <do_wait+0xbc>
                goto found;
c010aa61:	e9 80 00 00 00       	jmp    c010aae6 <do_wait+0x10d>
            }
        }
    }
    else {
        proc = current->cptr;
c010aa66:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010aa6b:	8b 40 70             	mov    0x70(%eax),%eax
c010aa6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010aa71:	eb 1c                	jmp    c010aa8f <do_wait+0xb6>
            haskid = 1;
c010aa73:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010aa7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa7d:	8b 00                	mov    (%eax),%eax
c010aa7f:	83 f8 03             	cmp    $0x3,%eax
c010aa82:	75 02                	jne    c010aa86 <do_wait+0xad>
                goto found;
c010aa84:	eb 60                	jmp    c010aae6 <do_wait+0x10d>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010aa86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa89:	8b 40 78             	mov    0x78(%eax),%eax
c010aa8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aa8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aa93:	75 de                	jne    c010aa73 <do_wait+0x9a>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010aa95:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010aa99:	74 41                	je     c010aadc <do_wait+0x103>
        current->state = PROC_SLEEPING;
c010aa9b:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010aaa0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010aaa6:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010aaab:	c7 40 6c 01 00 00 80 	movl   $0x80000001,0x6c(%eax)
        schedule();
c010aab2:	e8 a1 0c 00 00       	call   c010b758 <schedule>
        if (current->flags & PF_EXITING) {
c010aab7:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010aabc:	8b 40 44             	mov    0x44(%eax),%eax
c010aabf:	83 e0 01             	and    $0x1,%eax
c010aac2:	85 c0                	test   %eax,%eax
c010aac4:	74 11                	je     c010aad7 <do_wait+0xfe>
            do_exit(-E_KILLED);
c010aac6:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010aacd:	e8 89 f5 ff ff       	call   c010a05b <do_exit>
        }
        goto repeat;
c010aad2:	e9 49 ff ff ff       	jmp    c010aa20 <do_wait+0x47>
c010aad7:	e9 44 ff ff ff       	jmp    c010aa20 <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010aadc:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010aae1:	e9 85 00 00 00       	jmp    c010ab6b <do_wait+0x192>

found:
    if (proc == idleproc || proc == initproc) {
c010aae6:	a1 20 0e 1b c0       	mov    0xc01b0e20,%eax
c010aaeb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010aaee:	74 0a                	je     c010aafa <do_wait+0x121>
c010aaf0:	a1 24 0e 1b c0       	mov    0xc01b0e24,%eax
c010aaf5:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010aaf8:	75 1c                	jne    c010ab16 <do_wait+0x13d>
        panic("wait idleproc or initproc.\n");
c010aafa:	c7 44 24 08 06 ec 10 	movl   $0xc010ec06,0x8(%esp)
c010ab01:	c0 
c010ab02:	c7 44 24 04 fb 02 00 	movl   $0x2fb,0x4(%esp)
c010ab09:	00 
c010ab0a:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010ab11:	e8 be 62 ff ff       	call   c0100dd4 <__panic>
    }
    if (code_store != NULL) {
c010ab16:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ab1a:	74 0b                	je     c010ab27 <do_wait+0x14e>
        *code_store = proc->exit_code;
c010ab1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab1f:	8b 50 68             	mov    0x68(%eax),%edx
c010ab22:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ab25:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010ab27:	e8 86 e8 ff ff       	call   c01093b2 <__intr_save>
c010ab2c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010ab2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab32:	89 04 24             	mov    %eax,(%esp)
c010ab35:	e8 c6 ef ff ff       	call   c0109b00 <unhash_proc>
        remove_links(proc);
c010ab3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab3d:	89 04 24             	mov    %eax,(%esp)
c010ab40:	e8 37 ed ff ff       	call   c010987c <remove_links>
    }
    local_intr_restore(intr_flag);
c010ab45:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ab48:	89 04 24             	mov    %eax,(%esp)
c010ab4b:	e8 8c e8 ff ff       	call   c01093dc <__intr_restore>
    put_kstack(proc);
c010ab50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab53:	89 04 24             	mov    %eax,(%esp)
c010ab56:	e8 f8 f0 ff ff       	call   c0109c53 <put_kstack>
    kfree(proc);
c010ab5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab5e:	89 04 24             	mov    %eax,(%esp)
c010ab61:	e8 6c a2 ff ff       	call   c0104dd2 <kfree>
    return 0;
c010ab66:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ab6b:	c9                   	leave  
c010ab6c:	c3                   	ret    

c010ab6d <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010ab6d:	55                   	push   %ebp
c010ab6e:	89 e5                	mov    %esp,%ebp
c010ab70:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010ab73:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab76:	89 04 24             	mov    %eax,(%esp)
c010ab79:	e8 b5 ef ff ff       	call   c0109b33 <find_proc>
c010ab7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ab81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ab85:	74 41                	je     c010abc8 <do_kill+0x5b>
        if (!(proc->flags & PF_EXITING)) {
c010ab87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab8a:	8b 40 44             	mov    0x44(%eax),%eax
c010ab8d:	83 e0 01             	and    $0x1,%eax
c010ab90:	85 c0                	test   %eax,%eax
c010ab92:	75 2d                	jne    c010abc1 <do_kill+0x54>
            proc->flags |= PF_EXITING;
c010ab94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab97:	8b 40 44             	mov    0x44(%eax),%eax
c010ab9a:	83 c8 01             	or     $0x1,%eax
c010ab9d:	89 c2                	mov    %eax,%edx
c010ab9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aba2:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010aba5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aba8:	8b 40 6c             	mov    0x6c(%eax),%eax
c010abab:	85 c0                	test   %eax,%eax
c010abad:	79 0b                	jns    c010abba <do_kill+0x4d>
                wakeup_proc(proc);
c010abaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abb2:	89 04 24             	mov    %eax,(%esp)
c010abb5:	e8 05 0b 00 00       	call   c010b6bf <wakeup_proc>
            }
            return 0;
c010abba:	b8 00 00 00 00       	mov    $0x0,%eax
c010abbf:	eb 0c                	jmp    c010abcd <do_kill+0x60>
        }
        return -E_KILLED;
c010abc1:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010abc6:	eb 05                	jmp    c010abcd <do_kill+0x60>
    }
    return -E_INVAL;
c010abc8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010abcd:	c9                   	leave  
c010abce:	c3                   	ret    

c010abcf <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010abcf:	55                   	push   %ebp
c010abd0:	89 e5                	mov    %esp,%ebp
c010abd2:	57                   	push   %edi
c010abd3:	56                   	push   %esi
c010abd4:	53                   	push   %ebx
c010abd5:	83 ec 2c             	sub    $0x2c,%esp
    int ret, len = strlen(name);
c010abd8:	8b 45 08             	mov    0x8(%ebp),%eax
c010abdb:	89 04 24             	mov    %eax,(%esp)
c010abde:	e8 de 18 00 00       	call   c010c4c1 <strlen>
c010abe3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010abe6:	b8 04 00 00 00       	mov    $0x4,%eax
c010abeb:	8b 55 08             	mov    0x8(%ebp),%edx
c010abee:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010abf1:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010abf4:	8b 75 10             	mov    0x10(%ebp),%esi
c010abf7:	89 f7                	mov    %esi,%edi
c010abf9:	cd 80                	int    $0x80
c010abfb:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010abfe:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010ac01:	83 c4 2c             	add    $0x2c,%esp
c010ac04:	5b                   	pop    %ebx
c010ac05:	5e                   	pop    %esi
c010ac06:	5f                   	pop    %edi
c010ac07:	5d                   	pop    %ebp
c010ac08:	c3                   	ret    

c010ac09 <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010ac09:	55                   	push   %ebp
c010ac0a:	89 e5                	mov    %esp,%ebp
c010ac0c:	83 ec 18             	sub    $0x18,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010ac0f:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010ac14:	8b 40 04             	mov    0x4(%eax),%eax
c010ac17:	c7 44 24 08 22 ec 10 	movl   $0xc010ec22,0x8(%esp)
c010ac1e:	c0 
c010ac1f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ac23:	c7 04 24 2c ec 10 c0 	movl   $0xc010ec2c,(%esp)
c010ac2a:	e8 29 57 ff ff       	call   c0100358 <cprintf>
c010ac2f:	b8 c7 79 00 00       	mov    $0x79c7,%eax
c010ac34:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ac38:	c7 44 24 04 11 25 18 	movl   $0xc0182511,0x4(%esp)
c010ac3f:	c0 
c010ac40:	c7 04 24 22 ec 10 c0 	movl   $0xc010ec22,(%esp)
c010ac47:	e8 83 ff ff ff       	call   c010abcf <kernel_execve>
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
c010ac4c:	c7 44 24 08 53 ec 10 	movl   $0xc010ec53,0x8(%esp)
c010ac53:	c0 
c010ac54:	c7 44 24 04 44 03 00 	movl   $0x344,0x4(%esp)
c010ac5b:	00 
c010ac5c:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010ac63:	e8 6c 61 ff ff       	call   c0100dd4 <__panic>

c010ac68 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010ac68:	55                   	push   %ebp
c010ac69:	89 e5                	mov    %esp,%ebp
c010ac6b:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010ac6e:	e8 56 a6 ff ff       	call   c01052c9 <nr_free_pages>
c010ac73:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010ac76:	e8 1f a0 ff ff       	call   c0104c9a <kallocated>
c010ac7b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010ac7e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010ac85:	00 
c010ac86:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ac8d:	00 
c010ac8e:	c7 04 24 09 ac 10 c0 	movl   $0xc010ac09,(%esp)
c010ac95:	e8 0b ef ff ff       	call   c0109ba5 <kernel_thread>
c010ac9a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010ac9d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010aca1:	7f 1c                	jg     c010acbf <init_main+0x57>
        panic("create user_main failed.\n");
c010aca3:	c7 44 24 08 6d ec 10 	movl   $0xc010ec6d,0x8(%esp)
c010acaa:	c0 
c010acab:	c7 44 24 04 4f 03 00 	movl   $0x34f,0x4(%esp)
c010acb2:	00 
c010acb3:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010acba:	e8 15 61 ff ff       	call   c0100dd4 <__panic>
    }

    while (do_wait(0, NULL) == 0) {
c010acbf:	eb 05                	jmp    c010acc6 <init_main+0x5e>
        schedule();
c010acc1:	e8 92 0a 00 00       	call   c010b758 <schedule>
    int pid = kernel_thread(user_main, NULL, 0);
    if (pid <= 0) {
        panic("create user_main failed.\n");
    }

    while (do_wait(0, NULL) == 0) {
c010acc6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010accd:	00 
c010acce:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010acd5:	e8 ff fc ff ff       	call   c010a9d9 <do_wait>
c010acda:	85 c0                	test   %eax,%eax
c010acdc:	74 e3                	je     c010acc1 <init_main+0x59>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010acde:	c7 04 24 88 ec 10 c0 	movl   $0xc010ec88,(%esp)
c010ace5:	e8 6e 56 ff ff       	call   c0100358 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010acea:	a1 24 0e 1b c0       	mov    0xc01b0e24,%eax
c010acef:	8b 40 70             	mov    0x70(%eax),%eax
c010acf2:	85 c0                	test   %eax,%eax
c010acf4:	75 18                	jne    c010ad0e <init_main+0xa6>
c010acf6:	a1 24 0e 1b c0       	mov    0xc01b0e24,%eax
c010acfb:	8b 40 74             	mov    0x74(%eax),%eax
c010acfe:	85 c0                	test   %eax,%eax
c010ad00:	75 0c                	jne    c010ad0e <init_main+0xa6>
c010ad02:	a1 24 0e 1b c0       	mov    0xc01b0e24,%eax
c010ad07:	8b 40 78             	mov    0x78(%eax),%eax
c010ad0a:	85 c0                	test   %eax,%eax
c010ad0c:	74 24                	je     c010ad32 <init_main+0xca>
c010ad0e:	c7 44 24 0c ac ec 10 	movl   $0xc010ecac,0xc(%esp)
c010ad15:	c0 
c010ad16:	c7 44 24 08 29 ea 10 	movl   $0xc010ea29,0x8(%esp)
c010ad1d:	c0 
c010ad1e:	c7 44 24 04 57 03 00 	movl   $0x357,0x4(%esp)
c010ad25:	00 
c010ad26:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010ad2d:	e8 a2 60 ff ff       	call   c0100dd4 <__panic>
    assert(nr_process == 2);
c010ad32:	a1 40 2e 1b c0       	mov    0xc01b2e40,%eax
c010ad37:	83 f8 02             	cmp    $0x2,%eax
c010ad3a:	74 24                	je     c010ad60 <init_main+0xf8>
c010ad3c:	c7 44 24 0c f7 ec 10 	movl   $0xc010ecf7,0xc(%esp)
c010ad43:	c0 
c010ad44:	c7 44 24 08 29 ea 10 	movl   $0xc010ea29,0x8(%esp)
c010ad4b:	c0 
c010ad4c:	c7 44 24 04 58 03 00 	movl   $0x358,0x4(%esp)
c010ad53:	00 
c010ad54:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010ad5b:	e8 74 60 ff ff       	call   c0100dd4 <__panic>
c010ad60:	c7 45 e8 70 2f 1b c0 	movl   $0xc01b2f70,-0x18(%ebp)
c010ad67:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad6a:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010ad6d:	8b 15 24 0e 1b c0    	mov    0xc01b0e24,%edx
c010ad73:	83 c2 58             	add    $0x58,%edx
c010ad76:	39 d0                	cmp    %edx,%eax
c010ad78:	74 24                	je     c010ad9e <init_main+0x136>
c010ad7a:	c7 44 24 0c 08 ed 10 	movl   $0xc010ed08,0xc(%esp)
c010ad81:	c0 
c010ad82:	c7 44 24 08 29 ea 10 	movl   $0xc010ea29,0x8(%esp)
c010ad89:	c0 
c010ad8a:	c7 44 24 04 59 03 00 	movl   $0x359,0x4(%esp)
c010ad91:	00 
c010ad92:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010ad99:	e8 36 60 ff ff       	call   c0100dd4 <__panic>
c010ad9e:	c7 45 e4 70 2f 1b c0 	movl   $0xc01b2f70,-0x1c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010ada5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ada8:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010adaa:	8b 15 24 0e 1b c0    	mov    0xc01b0e24,%edx
c010adb0:	83 c2 58             	add    $0x58,%edx
c010adb3:	39 d0                	cmp    %edx,%eax
c010adb5:	74 24                	je     c010addb <init_main+0x173>
c010adb7:	c7 44 24 0c 38 ed 10 	movl   $0xc010ed38,0xc(%esp)
c010adbe:	c0 
c010adbf:	c7 44 24 08 29 ea 10 	movl   $0xc010ea29,0x8(%esp)
c010adc6:	c0 
c010adc7:	c7 44 24 04 5a 03 00 	movl   $0x35a,0x4(%esp)
c010adce:	00 
c010adcf:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010add6:	e8 f9 5f ff ff       	call   c0100dd4 <__panic>

    cprintf("init check memory pass.\n");
c010addb:	c7 04 24 68 ed 10 c0 	movl   $0xc010ed68,(%esp)
c010ade2:	e8 71 55 ff ff       	call   c0100358 <cprintf>
    return 0;
c010ade7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010adec:	c9                   	leave  
c010aded:	c3                   	ret    

c010adee <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010adee:	55                   	push   %ebp
c010adef:	89 e5                	mov    %esp,%ebp
c010adf1:	83 ec 28             	sub    $0x28,%esp
c010adf4:	c7 45 ec 70 2f 1b c0 	movl   $0xc01b2f70,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010adfb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adfe:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ae01:	89 50 04             	mov    %edx,0x4(%eax)
c010ae04:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae07:	8b 50 04             	mov    0x4(%eax),%edx
c010ae0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae0d:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010ae0f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010ae16:	eb 26                	jmp    c010ae3e <proc_init+0x50>
        list_init(hash_list + i);
c010ae18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae1b:	c1 e0 03             	shl    $0x3,%eax
c010ae1e:	05 40 0e 1b c0       	add    $0xc01b0e40,%eax
c010ae23:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ae26:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae29:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ae2c:	89 50 04             	mov    %edx,0x4(%eax)
c010ae2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae32:	8b 50 04             	mov    0x4(%eax),%edx
c010ae35:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae38:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010ae3a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010ae3e:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010ae45:	7e d1                	jle    c010ae18 <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010ae47:	e8 98 e7 ff ff       	call   c01095e4 <alloc_proc>
c010ae4c:	a3 20 0e 1b c0       	mov    %eax,0xc01b0e20
c010ae51:	a1 20 0e 1b c0       	mov    0xc01b0e20,%eax
c010ae56:	85 c0                	test   %eax,%eax
c010ae58:	75 1c                	jne    c010ae76 <proc_init+0x88>
        panic("cannot alloc idleproc.\n");
c010ae5a:	c7 44 24 08 81 ed 10 	movl   $0xc010ed81,0x8(%esp)
c010ae61:	c0 
c010ae62:	c7 44 24 04 6c 03 00 	movl   $0x36c,0x4(%esp)
c010ae69:	00 
c010ae6a:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010ae71:	e8 5e 5f ff ff       	call   c0100dd4 <__panic>
    }

    idleproc->pid = 0;
c010ae76:	a1 20 0e 1b c0       	mov    0xc01b0e20,%eax
c010ae7b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010ae82:	a1 20 0e 1b c0       	mov    0xc01b0e20,%eax
c010ae87:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010ae8d:	a1 20 0e 1b c0       	mov    0xc01b0e20,%eax
c010ae92:	ba 00 c0 12 c0       	mov    $0xc012c000,%edx
c010ae97:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010ae9a:	a1 20 0e 1b c0       	mov    0xc01b0e20,%eax
c010ae9f:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010aea6:	a1 20 0e 1b c0       	mov    0xc01b0e20,%eax
c010aeab:	c7 44 24 04 99 ed 10 	movl   $0xc010ed99,0x4(%esp)
c010aeb2:	c0 
c010aeb3:	89 04 24             	mov    %eax,(%esp)
c010aeb6:	e8 97 e8 ff ff       	call   c0109752 <set_proc_name>
    nr_process ++;
c010aebb:	a1 40 2e 1b c0       	mov    0xc01b2e40,%eax
c010aec0:	83 c0 01             	add    $0x1,%eax
c010aec3:	a3 40 2e 1b c0       	mov    %eax,0xc01b2e40

    current = idleproc;
c010aec8:	a1 20 0e 1b c0       	mov    0xc01b0e20,%eax
c010aecd:	a3 28 0e 1b c0       	mov    %eax,0xc01b0e28

    int pid = kernel_thread(init_main, NULL, 0);
c010aed2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010aed9:	00 
c010aeda:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010aee1:	00 
c010aee2:	c7 04 24 68 ac 10 c0 	movl   $0xc010ac68,(%esp)
c010aee9:	e8 b7 ec ff ff       	call   c0109ba5 <kernel_thread>
c010aeee:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010aef1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010aef5:	7f 1c                	jg     c010af13 <proc_init+0x125>
        panic("create init_main failed.\n");
c010aef7:	c7 44 24 08 9e ed 10 	movl   $0xc010ed9e,0x8(%esp)
c010aefe:	c0 
c010aeff:	c7 44 24 04 7a 03 00 	movl   $0x37a,0x4(%esp)
c010af06:	00 
c010af07:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010af0e:	e8 c1 5e ff ff       	call   c0100dd4 <__panic>
    }

    initproc = find_proc(pid);
c010af13:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af16:	89 04 24             	mov    %eax,(%esp)
c010af19:	e8 15 ec ff ff       	call   c0109b33 <find_proc>
c010af1e:	a3 24 0e 1b c0       	mov    %eax,0xc01b0e24
    set_proc_name(initproc, "init");
c010af23:	a1 24 0e 1b c0       	mov    0xc01b0e24,%eax
c010af28:	c7 44 24 04 b8 ed 10 	movl   $0xc010edb8,0x4(%esp)
c010af2f:	c0 
c010af30:	89 04 24             	mov    %eax,(%esp)
c010af33:	e8 1a e8 ff ff       	call   c0109752 <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010af38:	a1 20 0e 1b c0       	mov    0xc01b0e20,%eax
c010af3d:	85 c0                	test   %eax,%eax
c010af3f:	74 0c                	je     c010af4d <proc_init+0x15f>
c010af41:	a1 20 0e 1b c0       	mov    0xc01b0e20,%eax
c010af46:	8b 40 04             	mov    0x4(%eax),%eax
c010af49:	85 c0                	test   %eax,%eax
c010af4b:	74 24                	je     c010af71 <proc_init+0x183>
c010af4d:	c7 44 24 0c c0 ed 10 	movl   $0xc010edc0,0xc(%esp)
c010af54:	c0 
c010af55:	c7 44 24 08 29 ea 10 	movl   $0xc010ea29,0x8(%esp)
c010af5c:	c0 
c010af5d:	c7 44 24 04 80 03 00 	movl   $0x380,0x4(%esp)
c010af64:	00 
c010af65:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010af6c:	e8 63 5e ff ff       	call   c0100dd4 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010af71:	a1 24 0e 1b c0       	mov    0xc01b0e24,%eax
c010af76:	85 c0                	test   %eax,%eax
c010af78:	74 0d                	je     c010af87 <proc_init+0x199>
c010af7a:	a1 24 0e 1b c0       	mov    0xc01b0e24,%eax
c010af7f:	8b 40 04             	mov    0x4(%eax),%eax
c010af82:	83 f8 01             	cmp    $0x1,%eax
c010af85:	74 24                	je     c010afab <proc_init+0x1bd>
c010af87:	c7 44 24 0c e8 ed 10 	movl   $0xc010ede8,0xc(%esp)
c010af8e:	c0 
c010af8f:	c7 44 24 08 29 ea 10 	movl   $0xc010ea29,0x8(%esp)
c010af96:	c0 
c010af97:	c7 44 24 04 81 03 00 	movl   $0x381,0x4(%esp)
c010af9e:	00 
c010af9f:	c7 04 24 fc e9 10 c0 	movl   $0xc010e9fc,(%esp)
c010afa6:	e8 29 5e ff ff       	call   c0100dd4 <__panic>
}
c010afab:	c9                   	leave  
c010afac:	c3                   	ret    

c010afad <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010afad:	55                   	push   %ebp
c010afae:	89 e5                	mov    %esp,%ebp
c010afb0:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010afb3:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010afb8:	8b 40 10             	mov    0x10(%eax),%eax
c010afbb:	85 c0                	test   %eax,%eax
c010afbd:	74 07                	je     c010afc6 <cpu_idle+0x19>
            schedule();
c010afbf:	e8 94 07 00 00       	call   c010b758 <schedule>
        }
    }
c010afc4:	eb ed                	jmp    c010afb3 <cpu_idle+0x6>
c010afc6:	eb eb                	jmp    c010afb3 <cpu_idle+0x6>

c010afc8 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010afc8:	55                   	push   %ebp
c010afc9:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010afcb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010afcf:	75 11                	jne    c010afe2 <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010afd1:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010afd6:	c7 80 9c 00 00 00 01 	movl   $0x1,0x9c(%eax)
c010afdd:	00 00 00 
c010afe0:	eb 0e                	jmp    c010aff0 <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010afe2:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010afe7:	8b 55 08             	mov    0x8(%ebp),%edx
c010afea:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
}
c010aff0:	5d                   	pop    %ebp
c010aff1:	c3                   	ret    

c010aff2 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010aff2:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010aff6:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010aff8:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010affb:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010affe:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010b001:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010b004:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010b007:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010b00a:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010b00d:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010b011:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010b014:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010b017:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010b01a:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010b01d:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010b020:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010b023:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010b026:	ff 30                	pushl  (%eax)

    ret
c010b028:	c3                   	ret    

c010b029 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010b029:	55                   	push   %ebp
c010b02a:	89 e5                	mov    %esp,%ebp
c010b02c:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010b02f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b033:	75 08                	jne    c010b03d <skew_heap_merge+0x14>
c010b035:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b038:	e9 bd 00 00 00       	jmp    c010b0fa <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010b03d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b041:	75 08                	jne    c010b04b <skew_heap_merge+0x22>
c010b043:	8b 45 08             	mov    0x8(%ebp),%eax
c010b046:	e9 af 00 00 00       	jmp    c010b0fa <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010b04b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b04e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b052:	8b 45 08             	mov    0x8(%ebp),%eax
c010b055:	89 04 24             	mov    %eax,(%esp)
c010b058:	8b 45 10             	mov    0x10(%ebp),%eax
c010b05b:	ff d0                	call   *%eax
c010b05d:	83 f8 ff             	cmp    $0xffffffff,%eax
c010b060:	75 4d                	jne    c010b0af <skew_heap_merge+0x86>
     {
          r = a->left;
c010b062:	8b 45 08             	mov    0x8(%ebp),%eax
c010b065:	8b 40 04             	mov    0x4(%eax),%eax
c010b068:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010b06b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b06e:	8b 40 08             	mov    0x8(%eax),%eax
c010b071:	8b 55 10             	mov    0x10(%ebp),%edx
c010b074:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b078:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b07b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b07f:	89 04 24             	mov    %eax,(%esp)
c010b082:	e8 a2 ff ff ff       	call   c010b029 <skew_heap_merge>
c010b087:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010b08a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b08d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b090:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010b093:	8b 45 08             	mov    0x8(%ebp),%eax
c010b096:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b099:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010b09c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b0a0:	74 08                	je     c010b0aa <skew_heap_merge+0x81>
c010b0a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b0a5:	8b 55 08             	mov    0x8(%ebp),%edx
c010b0a8:	89 10                	mov    %edx,(%eax)

          return a;
c010b0aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0ad:	eb 4b                	jmp    c010b0fa <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010b0af:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0b2:	8b 40 04             	mov    0x4(%eax),%eax
c010b0b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010b0b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0bb:	8b 40 08             	mov    0x8(%eax),%eax
c010b0be:	8b 55 10             	mov    0x10(%ebp),%edx
c010b0c1:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b0c5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b0c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0cc:	89 04 24             	mov    %eax,(%esp)
c010b0cf:	e8 55 ff ff ff       	call   c010b029 <skew_heap_merge>
c010b0d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010b0d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0da:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b0dd:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010b0e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b0e6:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010b0e9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b0ed:	74 08                	je     c010b0f7 <skew_heap_merge+0xce>
c010b0ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b0f2:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b0f5:	89 10                	mov    %edx,(%eax)

          return b;
c010b0f7:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010b0fa:	c9                   	leave  
c010b0fb:	c3                   	ret    

c010b0fc <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010b0fc:	55                   	push   %ebp
c010b0fd:	89 e5                	mov    %esp,%ebp
c010b0ff:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010b102:	8b 45 08             	mov    0x8(%ebp),%eax
c010b105:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010b10a:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010b10d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b110:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010b115:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010b118:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b11b:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010b121:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b124:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010b12a:	29 c2                	sub    %eax,%edx
c010b12c:	89 d0                	mov    %edx,%eax
c010b12e:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010b131:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b135:	7e 07                	jle    c010b13e <proc_stride_comp_f+0x42>
c010b137:	b8 01 00 00 00       	mov    $0x1,%eax
c010b13c:	eb 12                	jmp    c010b150 <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010b13e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b142:	75 07                	jne    c010b14b <proc_stride_comp_f+0x4f>
c010b144:	b8 00 00 00 00       	mov    $0x0,%eax
c010b149:	eb 05                	jmp    c010b150 <proc_stride_comp_f+0x54>
     else return -1;
c010b14b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010b150:	c9                   	leave  
c010b151:	c3                   	ret    

c010b152 <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010b152:	55                   	push   %ebp
c010b153:	89 e5                	mov    %esp,%ebp
c010b155:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE 
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0       
      */
	list_init(&(rq->run_list));
c010b158:	8b 45 08             	mov    0x8(%ebp),%eax
c010b15b:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010b15e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b161:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010b164:	89 50 04             	mov    %edx,0x4(%eax)
c010b167:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b16a:	8b 50 04             	mov    0x4(%eax),%edx
c010b16d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b170:	89 10                	mov    %edx,(%eax)
	rq->lab6_run_pool = NULL;
c010b172:	8b 45 08             	mov    0x8(%ebp),%eax
c010b175:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
	rq->proc_num = 0;
c010b17c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b17f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010b186:	c9                   	leave  
c010b187:	c3                   	ret    

c010b188 <stride_enqueue>:
 * 
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010b188:	55                   	push   %ebp
c010b189:	89 e5                	mov    %esp,%ebp
c010b18b:	83 ec 28             	sub    $0x28,%esp
      *         list_add_before: insert  a entry into the last of list   
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
	rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010b18e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b191:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
c010b197:	8b 45 08             	mov    0x8(%ebp),%eax
c010b19a:	8b 40 10             	mov    0x10(%eax),%eax
c010b19d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b1a0:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010b1a3:	c7 45 ec fc b0 10 c0 	movl   $0xc010b0fc,-0x14(%ebp)
c010b1aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1ad:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010b1b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1b3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010b1b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1bc:	8b 10                	mov    (%eax),%edx
c010b1be:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1c1:	89 50 08             	mov    %edx,0x8(%eax)
c010b1c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1c7:	8b 50 08             	mov    0x8(%eax),%edx
c010b1ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1cd:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010b1d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1d3:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b1d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1da:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b1de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1e1:	89 04 24             	mov    %eax,(%esp)
c010b1e4:	e8 40 fe ff ff       	call   c010b029 <skew_heap_merge>
c010b1e9:	89 c2                	mov    %eax,%edx
c010b1eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1ee:	89 50 10             	mov    %edx,0x10(%eax)
	if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010b1f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b1f4:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010b1fa:	85 c0                	test   %eax,%eax
c010b1fc:	74 13                	je     c010b211 <stride_enqueue+0x89>
c010b1fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b201:	8b 90 88 00 00 00    	mov    0x88(%eax),%edx
c010b207:	8b 45 08             	mov    0x8(%ebp),%eax
c010b20a:	8b 40 0c             	mov    0xc(%eax),%eax
c010b20d:	39 c2                	cmp    %eax,%edx
c010b20f:	7e 0f                	jle    c010b220 <stride_enqueue+0x98>
		proc->time_slice = rq->max_time_slice;
c010b211:	8b 45 08             	mov    0x8(%ebp),%eax
c010b214:	8b 50 0c             	mov    0xc(%eax),%edx
c010b217:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b21a:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
	}
	proc->rq = rq;
c010b220:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b223:	8b 55 08             	mov    0x8(%ebp),%edx
c010b226:	89 50 7c             	mov    %edx,0x7c(%eax)
	rq->proc_num ++;
c010b229:	8b 45 08             	mov    0x8(%ebp),%eax
c010b22c:	8b 40 08             	mov    0x8(%eax),%eax
c010b22f:	8d 50 01             	lea    0x1(%eax),%edx
c010b232:	8b 45 08             	mov    0x8(%ebp),%eax
c010b235:	89 50 08             	mov    %edx,0x8(%eax)
}
c010b238:	c9                   	leave  
c010b239:	c3                   	ret    

c010b23a <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010b23a:	55                   	push   %ebp
c010b23b:	89 e5                	mov    %esp,%ebp
c010b23d:	83 ec 38             	sub    $0x38,%esp
      * (1) remove the proc from rq correctly
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
	rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010b240:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b243:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
c010b249:	8b 45 08             	mov    0x8(%ebp),%eax
c010b24c:	8b 40 10             	mov    0x10(%eax),%eax
c010b24f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b252:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010b255:	c7 45 ec fc b0 10 c0 	movl   $0xc010b0fc,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010b25c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b25f:	8b 00                	mov    (%eax),%eax
c010b261:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010b264:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b267:	8b 50 08             	mov    0x8(%eax),%edx
c010b26a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b26d:	8b 40 04             	mov    0x4(%eax),%eax
c010b270:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010b273:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b277:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b27b:	89 04 24             	mov    %eax,(%esp)
c010b27e:	e8 a6 fd ff ff       	call   c010b029 <skew_heap_merge>
c010b283:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010b286:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010b28a:	74 08                	je     c010b294 <stride_dequeue+0x5a>
c010b28c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b28f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b292:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010b294:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b298:	74 24                	je     c010b2be <stride_dequeue+0x84>
     {
          if (p->left == b)
c010b29a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b29d:	8b 40 04             	mov    0x4(%eax),%eax
c010b2a0:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010b2a3:	75 0b                	jne    c010b2b0 <stride_dequeue+0x76>
               p->left = rep;
c010b2a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b2a8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b2ab:	89 50 04             	mov    %edx,0x4(%eax)
c010b2ae:	eb 09                	jmp    c010b2b9 <stride_dequeue+0x7f>
          else p->right = rep;
c010b2b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b2b3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b2b6:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010b2b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2bc:	eb 03                	jmp    c010b2c1 <stride_dequeue+0x87>
     }
     else return rep;
c010b2be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b2c1:	89 c2                	mov    %eax,%edx
c010b2c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2c6:	89 50 10             	mov    %edx,0x10(%eax)
	rq->proc_num --;
c010b2c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2cc:	8b 40 08             	mov    0x8(%eax),%eax
c010b2cf:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b2d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2d5:	89 50 08             	mov    %edx,0x8(%eax)
}
c010b2d8:	c9                   	leave  
c010b2d9:	c3                   	ret    

c010b2da <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010b2da:	55                   	push   %ebp
c010b2db:	89 e5                	mov    %esp,%ebp
c010b2dd:	53                   	push   %ebx
c010b2de:	83 ec 10             	sub    $0x10,%esp
             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
             (1.2) If using list, we have to search list to find the p with minimum stride value
      * (2) update p;s stride value: p->lab6_stride
      * (3) return p
      */
	if(rq->lab6_run_pool == NULL)
c010b2e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2e4:	8b 40 10             	mov    0x10(%eax),%eax
c010b2e7:	85 c0                	test   %eax,%eax
c010b2e9:	75 07                	jne    c010b2f2 <stride_pick_next+0x18>
	{
		return NULL;
c010b2eb:	b8 00 00 00 00       	mov    $0x0,%eax
c010b2f0:	eb 62                	jmp    c010b354 <stride_pick_next+0x7a>
	}
	struct proc_struct* p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010b2f2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2f5:	8b 40 10             	mov    0x10(%eax),%eax
c010b2f8:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010b2fd:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (p->lab6_priority == 0)
c010b300:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b303:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b309:	85 c0                	test   %eax,%eax
c010b30b:	75 1a                	jne    c010b327 <stride_pick_next+0x4d>
	{
		p->lab6_stride += BIG_STRIDE;
c010b30d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b310:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010b316:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c010b31c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b31f:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
c010b325:	eb 2a                	jmp    c010b351 <stride_pick_next+0x77>
	}
	else
	{
		p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010b327:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b32a:	8b 88 98 00 00 00    	mov    0x98(%eax),%ecx
c010b330:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b333:	8b 98 9c 00 00 00    	mov    0x9c(%eax),%ebx
c010b339:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010b33e:	ba 00 00 00 00       	mov    $0x0,%edx
c010b343:	f7 f3                	div    %ebx
c010b345:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010b348:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b34b:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
	}
	return p;
c010b351:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010b354:	83 c4 10             	add    $0x10,%esp
c010b357:	5b                   	pop    %ebx
c010b358:	5d                   	pop    %ebp
c010b359:	c3                   	ret    

c010b35a <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010b35a:	55                   	push   %ebp
c010b35b:	89 e5                	mov    %esp,%ebp
     /* LAB6: YOUR CODE */
	if (proc->time_slice > 0)
c010b35d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b360:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010b366:	85 c0                	test   %eax,%eax
c010b368:	7e 15                	jle    c010b37f <stride_proc_tick+0x25>
	{
		 proc->time_slice --;
c010b36a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b36d:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010b373:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b376:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b379:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
	}
	if (proc->time_slice == 0)
c010b37f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b382:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010b388:	85 c0                	test   %eax,%eax
c010b38a:	75 0a                	jne    c010b396 <stride_proc_tick+0x3c>
	{
		 proc->need_resched = 1;
c010b38c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b38f:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
	}
}
c010b396:	5d                   	pop    %ebp
c010b397:	c3                   	ret    

c010b398 <RR_init>:
#include <proc.h>
#include <assert.h>
#include <default_sched.h>

static void
RR_init(struct run_queue *rq) {
c010b398:	55                   	push   %ebp
c010b399:	89 e5                	mov    %esp,%ebp
c010b39b:	83 ec 10             	sub    $0x10,%esp
    list_init(&(rq->run_list));
c010b39e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3a1:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010b3a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b3a7:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010b3aa:	89 50 04             	mov    %edx,0x4(%eax)
c010b3ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b3b0:	8b 50 04             	mov    0x4(%eax),%edx
c010b3b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b3b6:	89 10                	mov    %edx,(%eax)
    rq->proc_num = 0;
c010b3b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3bb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010b3c2:	c9                   	leave  
c010b3c3:	c3                   	ret    

c010b3c4 <RR_enqueue>:

static void
RR_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010b3c4:	55                   	push   %ebp
c010b3c5:	89 e5                	mov    %esp,%ebp
c010b3c7:	83 ec 20             	sub    $0x20,%esp
    //assert(list_empty(&(proc->run_link)));
    list_add_before(&(rq->run_list), &(proc->run_link));
c010b3ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b3cd:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
c010b3d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3d6:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010b3d9:	89 55 f8             	mov    %edx,-0x8(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010b3dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b3df:	8b 00                	mov    (%eax),%eax
c010b3e1:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010b3e4:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010b3e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b3ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b3ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010b3f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b3f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b3f6:	89 10                	mov    %edx,(%eax)
c010b3f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b3fb:	8b 10                	mov    (%eax),%edx
c010b3fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b400:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010b403:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b406:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b409:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010b40c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b40f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b412:	89 10                	mov    %edx,(%eax)
    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010b414:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b417:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010b41d:	85 c0                	test   %eax,%eax
c010b41f:	74 13                	je     c010b434 <RR_enqueue+0x70>
c010b421:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b424:	8b 90 88 00 00 00    	mov    0x88(%eax),%edx
c010b42a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b42d:	8b 40 0c             	mov    0xc(%eax),%eax
c010b430:	39 c2                	cmp    %eax,%edx
c010b432:	7e 0f                	jle    c010b443 <RR_enqueue+0x7f>
        proc->time_slice = rq->max_time_slice;
c010b434:	8b 45 08             	mov    0x8(%ebp),%eax
c010b437:	8b 50 0c             	mov    0xc(%eax),%edx
c010b43a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b43d:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    }
    proc->rq = rq;
c010b443:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b446:	8b 55 08             	mov    0x8(%ebp),%edx
c010b449:	89 50 7c             	mov    %edx,0x7c(%eax)
    rq->proc_num ++;
c010b44c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b44f:	8b 40 08             	mov    0x8(%eax),%eax
c010b452:	8d 50 01             	lea    0x1(%eax),%edx
c010b455:	8b 45 08             	mov    0x8(%ebp),%eax
c010b458:	89 50 08             	mov    %edx,0x8(%eax)
}
c010b45b:	c9                   	leave  
c010b45c:	c3                   	ret    

c010b45d <RR_dequeue>:

static void
RR_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010b45d:	55                   	push   %ebp
c010b45e:	89 e5                	mov    %esp,%ebp
c010b460:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
c010b463:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b466:	83 e8 80             	sub    $0xffffff80,%eax
c010b469:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010b46c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b46f:	8b 40 04             	mov    0x4(%eax),%eax
c010b472:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b475:	0f 94 c0             	sete   %al
c010b478:	0f b6 c0             	movzbl %al,%eax
c010b47b:	85 c0                	test   %eax,%eax
c010b47d:	75 0b                	jne    c010b48a <RR_dequeue+0x2d>
c010b47f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b482:	8b 40 7c             	mov    0x7c(%eax),%eax
c010b485:	3b 45 08             	cmp    0x8(%ebp),%eax
c010b488:	74 24                	je     c010b4ae <RR_dequeue+0x51>
c010b48a:	c7 44 24 0c 20 ee 10 	movl   $0xc010ee20,0xc(%esp)
c010b491:	c0 
c010b492:	c7 44 24 08 51 ee 10 	movl   $0xc010ee51,0x8(%esp)
c010b499:	c0 
c010b49a:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c010b4a1:	00 
c010b4a2:	c7 04 24 68 ee 10 c0 	movl   $0xc010ee68,(%esp)
c010b4a9:	e8 26 59 ff ff       	call   c0100dd4 <__panic>
    list_del_init(&(proc->run_link));
c010b4ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b4b1:	83 e8 80             	sub    $0xffffff80,%eax
c010b4b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b4b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b4ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010b4bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4c0:	8b 40 04             	mov    0x4(%eax),%eax
c010b4c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b4c6:	8b 12                	mov    (%edx),%edx
c010b4c8:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010b4cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010b4ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b4d1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b4d4:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010b4d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b4da:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b4dd:	89 10                	mov    %edx,(%eax)
c010b4df:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b4e2:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010b4e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b4e8:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010b4eb:	89 50 04             	mov    %edx,0x4(%eax)
c010b4ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b4f1:	8b 50 04             	mov    0x4(%eax),%edx
c010b4f4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b4f7:	89 10                	mov    %edx,(%eax)
    rq->proc_num --;
c010b4f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4fc:	8b 40 08             	mov    0x8(%eax),%eax
c010b4ff:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b502:	8b 45 08             	mov    0x8(%ebp),%eax
c010b505:	89 50 08             	mov    %edx,0x8(%eax)
}
c010b508:	c9                   	leave  
c010b509:	c3                   	ret    

c010b50a <RR_pick_next>:

static struct proc_struct *
RR_pick_next(struct run_queue *rq) {
c010b50a:	55                   	push   %ebp
c010b50b:	89 e5                	mov    %esp,%ebp
c010b50d:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(rq->run_list));
c010b510:	8b 45 08             	mov    0x8(%ebp),%eax
c010b513:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b516:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b519:	8b 40 04             	mov    0x4(%eax),%eax
c010b51c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(rq->run_list)) {
c010b51f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b522:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010b525:	74 08                	je     c010b52f <RR_pick_next+0x25>
        return le2proc(le, run_link);
c010b527:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b52a:	83 c0 80             	add    $0xffffff80,%eax
c010b52d:	eb 05                	jmp    c010b534 <RR_pick_next+0x2a>
    }
    return NULL;
c010b52f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b534:	c9                   	leave  
c010b535:	c3                   	ret    

c010b536 <RR_proc_tick>:

static void
RR_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010b536:	55                   	push   %ebp
c010b537:	89 e5                	mov    %esp,%ebp
    if (proc->time_slice > 0) {
c010b539:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b53c:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010b542:	85 c0                	test   %eax,%eax
c010b544:	7e 15                	jle    c010b55b <RR_proc_tick+0x25>
        proc->time_slice --;
c010b546:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b549:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010b54f:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b552:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b555:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    }
    if (proc->time_slice == 0) {
c010b55b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b55e:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010b564:	85 c0                	test   %eax,%eax
c010b566:	75 0a                	jne    c010b572 <RR_proc_tick+0x3c>
        proc->need_resched = 1;
c010b568:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b56b:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010b572:	5d                   	pop    %ebp
c010b573:	c3                   	ret    

c010b574 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010b574:	55                   	push   %ebp
c010b575:	89 e5                	mov    %esp,%ebp
c010b577:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010b57a:	9c                   	pushf  
c010b57b:	58                   	pop    %eax
c010b57c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010b57f:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010b582:	25 00 02 00 00       	and    $0x200,%eax
c010b587:	85 c0                	test   %eax,%eax
c010b589:	74 0c                	je     c010b597 <__intr_save+0x23>
        intr_disable();
c010b58b:	e8 9c 6a ff ff       	call   c010202c <intr_disable>
        return 1;
c010b590:	b8 01 00 00 00       	mov    $0x1,%eax
c010b595:	eb 05                	jmp    c010b59c <__intr_save+0x28>
    }
    return 0;
c010b597:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b59c:	c9                   	leave  
c010b59d:	c3                   	ret    

c010b59e <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010b59e:	55                   	push   %ebp
c010b59f:	89 e5                	mov    %esp,%ebp
c010b5a1:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010b5a4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b5a8:	74 05                	je     c010b5af <__intr_restore+0x11>
        intr_enable();
c010b5aa:	e8 77 6a ff ff       	call   c0102026 <intr_enable>
    }
}
c010b5af:	c9                   	leave  
c010b5b0:	c3                   	ret    

c010b5b1 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010b5b1:	55                   	push   %ebp
c010b5b2:	89 e5                	mov    %esp,%ebp
c010b5b4:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010b5b7:	a1 20 0e 1b c0       	mov    0xc01b0e20,%eax
c010b5bc:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b5bf:	74 1a                	je     c010b5db <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010b5c1:	a1 5c 2e 1b c0       	mov    0xc01b2e5c,%eax
c010b5c6:	8b 40 08             	mov    0x8(%eax),%eax
c010b5c9:	8b 15 60 2e 1b c0    	mov    0xc01b2e60,%edx
c010b5cf:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010b5d2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010b5d6:	89 14 24             	mov    %edx,(%esp)
c010b5d9:	ff d0                	call   *%eax
    }
}
c010b5db:	c9                   	leave  
c010b5dc:	c3                   	ret    

c010b5dd <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010b5dd:	55                   	push   %ebp
c010b5de:	89 e5                	mov    %esp,%ebp
c010b5e0:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010b5e3:	a1 5c 2e 1b c0       	mov    0xc01b2e5c,%eax
c010b5e8:	8b 40 0c             	mov    0xc(%eax),%eax
c010b5eb:	8b 15 60 2e 1b c0    	mov    0xc01b2e60,%edx
c010b5f1:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010b5f4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010b5f8:	89 14 24             	mov    %edx,(%esp)
c010b5fb:	ff d0                	call   *%eax
}
c010b5fd:	c9                   	leave  
c010b5fe:	c3                   	ret    

c010b5ff <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010b5ff:	55                   	push   %ebp
c010b600:	89 e5                	mov    %esp,%ebp
c010b602:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010b605:	a1 5c 2e 1b c0       	mov    0xc01b2e5c,%eax
c010b60a:	8b 40 10             	mov    0x10(%eax),%eax
c010b60d:	8b 15 60 2e 1b c0    	mov    0xc01b2e60,%edx
c010b613:	89 14 24             	mov    %edx,(%esp)
c010b616:	ff d0                	call   *%eax
}
c010b618:	c9                   	leave  
c010b619:	c3                   	ret    

c010b61a <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010b61a:	55                   	push   %ebp
c010b61b:	89 e5                	mov    %esp,%ebp
c010b61d:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010b620:	a1 20 0e 1b c0       	mov    0xc01b0e20,%eax
c010b625:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b628:	74 1c                	je     c010b646 <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010b62a:	a1 5c 2e 1b c0       	mov    0xc01b2e5c,%eax
c010b62f:	8b 40 14             	mov    0x14(%eax),%eax
c010b632:	8b 15 60 2e 1b c0    	mov    0xc01b2e60,%edx
c010b638:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010b63b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010b63f:	89 14 24             	mov    %edx,(%esp)
c010b642:	ff d0                	call   *%eax
c010b644:	eb 0a                	jmp    c010b650 <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010b646:	8b 45 08             	mov    0x8(%ebp),%eax
c010b649:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010b650:	c9                   	leave  
c010b651:	c3                   	ret    

c010b652 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010b652:	55                   	push   %ebp
c010b653:	89 e5                	mov    %esp,%ebp
c010b655:	83 ec 28             	sub    $0x28,%esp
c010b658:	c7 45 f4 54 2e 1b c0 	movl   $0xc01b2e54,-0xc(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010b65f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b662:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b665:	89 50 04             	mov    %edx,0x4(%eax)
c010b668:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b66b:	8b 50 04             	mov    0x4(%eax),%edx
c010b66e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b671:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010b673:	c7 05 5c 2e 1b c0 88 	movl   $0xc012ea88,0xc01b2e5c
c010b67a:	ea 12 c0 

    rq = &__rq;
c010b67d:	c7 05 60 2e 1b c0 64 	movl   $0xc01b2e64,0xc01b2e60
c010b684:	2e 1b c0 
    rq->max_time_slice = MAX_TIME_SLICE;
c010b687:	a1 60 2e 1b c0       	mov    0xc01b2e60,%eax
c010b68c:	c7 40 0c 08 00 00 00 	movl   $0x8,0xc(%eax)
    sched_class->init(rq);
c010b693:	a1 5c 2e 1b c0       	mov    0xc01b2e5c,%eax
c010b698:	8b 40 04             	mov    0x4(%eax),%eax
c010b69b:	8b 15 60 2e 1b c0    	mov    0xc01b2e60,%edx
c010b6a1:	89 14 24             	mov    %edx,(%esp)
c010b6a4:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010b6a6:	a1 5c 2e 1b c0       	mov    0xc01b2e5c,%eax
c010b6ab:	8b 00                	mov    (%eax),%eax
c010b6ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b6b1:	c7 04 24 8c ee 10 c0 	movl   $0xc010ee8c,(%esp)
c010b6b8:	e8 9b 4c ff ff       	call   c0100358 <cprintf>
}
c010b6bd:	c9                   	leave  
c010b6be:	c3                   	ret    

c010b6bf <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010b6bf:	55                   	push   %ebp
c010b6c0:	89 e5                	mov    %esp,%ebp
c010b6c2:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010b6c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6c8:	8b 00                	mov    (%eax),%eax
c010b6ca:	83 f8 03             	cmp    $0x3,%eax
c010b6cd:	75 24                	jne    c010b6f3 <wakeup_proc+0x34>
c010b6cf:	c7 44 24 0c 9d ee 10 	movl   $0xc010ee9d,0xc(%esp)
c010b6d6:	c0 
c010b6d7:	c7 44 24 08 b8 ee 10 	movl   $0xc010eeb8,0x8(%esp)
c010b6de:	c0 
c010b6df:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010b6e6:	00 
c010b6e7:	c7 04 24 cd ee 10 c0 	movl   $0xc010eecd,(%esp)
c010b6ee:	e8 e1 56 ff ff       	call   c0100dd4 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010b6f3:	e8 7c fe ff ff       	call   c010b574 <__intr_save>
c010b6f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010b6fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6fe:	8b 00                	mov    (%eax),%eax
c010b700:	83 f8 02             	cmp    $0x2,%eax
c010b703:	74 2a                	je     c010b72f <wakeup_proc+0x70>
            proc->state = PROC_RUNNABLE;
c010b705:	8b 45 08             	mov    0x8(%ebp),%eax
c010b708:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010b70e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b711:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
            if (proc != current) {
c010b718:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010b71d:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b720:	74 29                	je     c010b74b <wakeup_proc+0x8c>
                sched_class_enqueue(proc);
c010b722:	8b 45 08             	mov    0x8(%ebp),%eax
c010b725:	89 04 24             	mov    %eax,(%esp)
c010b728:	e8 84 fe ff ff       	call   c010b5b1 <sched_class_enqueue>
c010b72d:	eb 1c                	jmp    c010b74b <wakeup_proc+0x8c>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010b72f:	c7 44 24 08 e3 ee 10 	movl   $0xc010eee3,0x8(%esp)
c010b736:	c0 
c010b737:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c010b73e:	00 
c010b73f:	c7 04 24 cd ee 10 c0 	movl   $0xc010eecd,(%esp)
c010b746:	e8 f5 56 ff ff       	call   c0100e40 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010b74b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b74e:	89 04 24             	mov    %eax,(%esp)
c010b751:	e8 48 fe ff ff       	call   c010b59e <__intr_restore>
}
c010b756:	c9                   	leave  
c010b757:	c3                   	ret    

c010b758 <schedule>:

void
schedule(void) {
c010b758:	55                   	push   %ebp
c010b759:	89 e5                	mov    %esp,%ebp
c010b75b:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010b75e:	e8 11 fe ff ff       	call   c010b574 <__intr_save>
c010b763:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010b766:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010b76b:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010b772:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010b777:	8b 00                	mov    (%eax),%eax
c010b779:	83 f8 02             	cmp    $0x2,%eax
c010b77c:	75 0d                	jne    c010b78b <schedule+0x33>
            sched_class_enqueue(current);
c010b77e:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010b783:	89 04 24             	mov    %eax,(%esp)
c010b786:	e8 26 fe ff ff       	call   c010b5b1 <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010b78b:	e8 6f fe ff ff       	call   c010b5ff <sched_class_pick_next>
c010b790:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b793:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b797:	74 0b                	je     c010b7a4 <schedule+0x4c>
            sched_class_dequeue(next);
c010b799:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b79c:	89 04 24             	mov    %eax,(%esp)
c010b79f:	e8 39 fe ff ff       	call   c010b5dd <sched_class_dequeue>
        }
        if (next == NULL) {
c010b7a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b7a8:	75 08                	jne    c010b7b2 <schedule+0x5a>
            next = idleproc;
c010b7aa:	a1 20 0e 1b c0       	mov    0xc01b0e20,%eax
c010b7af:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010b7b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7b5:	8b 40 08             	mov    0x8(%eax),%eax
c010b7b8:	8d 50 01             	lea    0x1(%eax),%edx
c010b7bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7be:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010b7c1:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010b7c6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b7c9:	74 0b                	je     c010b7d6 <schedule+0x7e>
            proc_run(next);
c010b7cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7ce:	89 04 24             	mov    %eax,(%esp)
c010b7d1:	e8 21 e2 ff ff       	call   c01099f7 <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010b7d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7d9:	89 04 24             	mov    %eax,(%esp)
c010b7dc:	e8 bd fd ff ff       	call   c010b59e <__intr_restore>
}
c010b7e1:	c9                   	leave  
c010b7e2:	c3                   	ret    

c010b7e3 <add_timer>:

// add timer to timer_list
void
add_timer(timer_t *timer) {
c010b7e3:	55                   	push   %ebp
c010b7e4:	89 e5                	mov    %esp,%ebp
c010b7e6:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010b7e9:	e8 86 fd ff ff       	call   c010b574 <__intr_save>
c010b7ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010b7f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7f4:	8b 00                	mov    (%eax),%eax
c010b7f6:	85 c0                	test   %eax,%eax
c010b7f8:	74 0a                	je     c010b804 <add_timer+0x21>
c010b7fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7fd:	8b 40 04             	mov    0x4(%eax),%eax
c010b800:	85 c0                	test   %eax,%eax
c010b802:	75 24                	jne    c010b828 <add_timer+0x45>
c010b804:	c7 44 24 0c 00 ef 10 	movl   $0xc010ef00,0xc(%esp)
c010b80b:	c0 
c010b80c:	c7 44 24 08 b8 ee 10 	movl   $0xc010eeb8,0x8(%esp)
c010b813:	c0 
c010b814:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010b81b:	00 
c010b81c:	c7 04 24 cd ee 10 c0 	movl   $0xc010eecd,(%esp)
c010b823:	e8 ac 55 ff ff       	call   c0100dd4 <__panic>
        assert(list_empty(&(timer->timer_link)));
c010b828:	8b 45 08             	mov    0x8(%ebp),%eax
c010b82b:	83 c0 08             	add    $0x8,%eax
c010b82e:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010b831:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b834:	8b 40 04             	mov    0x4(%eax),%eax
c010b837:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010b83a:	0f 94 c0             	sete   %al
c010b83d:	0f b6 c0             	movzbl %al,%eax
c010b840:	85 c0                	test   %eax,%eax
c010b842:	75 24                	jne    c010b868 <add_timer+0x85>
c010b844:	c7 44 24 0c 2c ef 10 	movl   $0xc010ef2c,0xc(%esp)
c010b84b:	c0 
c010b84c:	c7 44 24 08 b8 ee 10 	movl   $0xc010eeb8,0x8(%esp)
c010b853:	c0 
c010b854:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c010b85b:	00 
c010b85c:	c7 04 24 cd ee 10 c0 	movl   $0xc010eecd,(%esp)
c010b863:	e8 6c 55 ff ff       	call   c0100dd4 <__panic>
c010b868:	c7 45 e4 54 2e 1b c0 	movl   $0xc01b2e54,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b86f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b872:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010b875:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010b878:	eb 4a                	jmp    c010b8c4 <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010b87a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b87d:	83 e8 08             	sub    $0x8,%eax
c010b880:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010b883:	8b 45 08             	mov    0x8(%ebp),%eax
c010b886:	8b 10                	mov    (%eax),%edx
c010b888:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b88b:	8b 00                	mov    (%eax),%eax
c010b88d:	39 c2                	cmp    %eax,%edx
c010b88f:	73 13                	jae    c010b8a4 <add_timer+0xc1>
                next->expires -= timer->expires;
c010b891:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b894:	8b 10                	mov    (%eax),%edx
c010b896:	8b 45 08             	mov    0x8(%ebp),%eax
c010b899:	8b 00                	mov    (%eax),%eax
c010b89b:	29 c2                	sub    %eax,%edx
c010b89d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b8a0:	89 10                	mov    %edx,(%eax)
                break;
c010b8a2:	eb 29                	jmp    c010b8cd <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010b8a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8a7:	8b 10                	mov    (%eax),%edx
c010b8a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b8ac:	8b 00                	mov    (%eax),%eax
c010b8ae:	29 c2                	sub    %eax,%edx
c010b8b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8b3:	89 10                	mov    %edx,(%eax)
c010b8b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8b8:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b8bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b8be:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010b8c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010b8c4:	81 7d f4 54 2e 1b c0 	cmpl   $0xc01b2e54,-0xc(%ebp)
c010b8cb:	75 ad                	jne    c010b87a <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010b8cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8d0:	8d 50 08             	lea    0x8(%eax),%edx
c010b8d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8d6:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b8d9:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010b8dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b8df:	8b 00                	mov    (%eax),%eax
c010b8e1:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b8e4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010b8e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b8ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b8ed:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010b8f0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b8f3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b8f6:	89 10                	mov    %edx,(%eax)
c010b8f8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b8fb:	8b 10                	mov    (%eax),%edx
c010b8fd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b900:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010b903:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b906:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010b909:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010b90c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b90f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b912:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010b914:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b917:	89 04 24             	mov    %eax,(%esp)
c010b91a:	e8 7f fc ff ff       	call   c010b59e <__intr_restore>
}
c010b91f:	c9                   	leave  
c010b920:	c3                   	ret    

c010b921 <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010b921:	55                   	push   %ebp
c010b922:	89 e5                	mov    %esp,%ebp
c010b924:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010b927:	e8 48 fc ff ff       	call   c010b574 <__intr_save>
c010b92c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010b92f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b932:	83 c0 08             	add    $0x8,%eax
c010b935:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010b938:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b93b:	8b 40 04             	mov    0x4(%eax),%eax
c010b93e:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010b941:	0f 94 c0             	sete   %al
c010b944:	0f b6 c0             	movzbl %al,%eax
c010b947:	85 c0                	test   %eax,%eax
c010b949:	0f 85 89 00 00 00    	jne    c010b9d8 <del_timer+0xb7>
            if (timer->expires != 0) {
c010b94f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b952:	8b 00                	mov    (%eax),%eax
c010b954:	85 c0                	test   %eax,%eax
c010b956:	74 35                	je     c010b98d <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010b958:	8b 45 08             	mov    0x8(%ebp),%eax
c010b95b:	83 c0 08             	add    $0x8,%eax
c010b95e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b961:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b964:	8b 40 04             	mov    0x4(%eax),%eax
c010b967:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010b96a:	81 7d f0 54 2e 1b c0 	cmpl   $0xc01b2e54,-0x10(%ebp)
c010b971:	74 1a                	je     c010b98d <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010b973:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b976:	83 e8 08             	sub    $0x8,%eax
c010b979:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010b97c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b97f:	8b 10                	mov    (%eax),%edx
c010b981:	8b 45 08             	mov    0x8(%ebp),%eax
c010b984:	8b 00                	mov    (%eax),%eax
c010b986:	01 c2                	add    %eax,%edx
c010b988:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b98b:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010b98d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b990:	83 c0 08             	add    $0x8,%eax
c010b993:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b996:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b999:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010b99c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b99f:	8b 40 04             	mov    0x4(%eax),%eax
c010b9a2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010b9a5:	8b 12                	mov    (%edx),%edx
c010b9a7:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010b9aa:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010b9ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b9b0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b9b3:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010b9b6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b9b9:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b9bc:	89 10                	mov    %edx,(%eax)
c010b9be:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b9c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010b9c4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b9c7:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b9ca:	89 50 04             	mov    %edx,0x4(%eax)
c010b9cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b9d0:	8b 50 04             	mov    0x4(%eax),%edx
c010b9d3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b9d6:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010b9d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9db:	89 04 24             	mov    %eax,(%esp)
c010b9de:	e8 bb fb ff ff       	call   c010b59e <__intr_restore>
}
c010b9e3:	c9                   	leave  
c010b9e4:	c3                   	ret    

c010b9e5 <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010b9e5:	55                   	push   %ebp
c010b9e6:	89 e5                	mov    %esp,%ebp
c010b9e8:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010b9eb:	e8 84 fb ff ff       	call   c010b574 <__intr_save>
c010b9f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b9f3:	c7 45 e4 54 2e 1b c0 	movl   $0xc01b2e54,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b9fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b9fd:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010ba00:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010ba03:	81 7d f4 54 2e 1b c0 	cmpl   $0xc01b2e54,-0xc(%ebp)
c010ba0a:	0f 84 f5 00 00 00    	je     c010bb05 <run_timer_list+0x120>
            timer_t *timer = le2timer(le, timer_link);
c010ba10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba13:	83 e8 08             	sub    $0x8,%eax
c010ba16:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010ba19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba1c:	8b 00                	mov    (%eax),%eax
c010ba1e:	85 c0                	test   %eax,%eax
c010ba20:	75 24                	jne    c010ba46 <run_timer_list+0x61>
c010ba22:	c7 44 24 0c 4d ef 10 	movl   $0xc010ef4d,0xc(%esp)
c010ba29:	c0 
c010ba2a:	c7 44 24 08 b8 ee 10 	movl   $0xc010eeb8,0x8(%esp)
c010ba31:	c0 
c010ba32:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010ba39:	00 
c010ba3a:	c7 04 24 cd ee 10 c0 	movl   $0xc010eecd,(%esp)
c010ba41:	e8 8e 53 ff ff       	call   c0100dd4 <__panic>
            timer->expires --;
c010ba46:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba49:	8b 00                	mov    (%eax),%eax
c010ba4b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ba4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba51:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010ba53:	e9 a0 00 00 00       	jmp    c010baf8 <run_timer_list+0x113>
c010ba58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba5b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010ba5e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ba61:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010ba64:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010ba67:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba6a:	8b 40 04             	mov    0x4(%eax),%eax
c010ba6d:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010ba70:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ba73:	8b 40 6c             	mov    0x6c(%eax),%eax
c010ba76:	85 c0                	test   %eax,%eax
c010ba78:	74 2e                	je     c010baa8 <run_timer_list+0xc3>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010ba7a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ba7d:	8b 40 6c             	mov    0x6c(%eax),%eax
c010ba80:	85 c0                	test   %eax,%eax
c010ba82:	78 4a                	js     c010bace <run_timer_list+0xe9>
c010ba84:	c7 44 24 0c 64 ef 10 	movl   $0xc010ef64,0xc(%esp)
c010ba8b:	c0 
c010ba8c:	c7 44 24 08 b8 ee 10 	movl   $0xc010eeb8,0x8(%esp)
c010ba93:	c0 
c010ba94:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010ba9b:	00 
c010ba9c:	c7 04 24 cd ee 10 c0 	movl   $0xc010eecd,(%esp)
c010baa3:	e8 2c 53 ff ff       	call   c0100dd4 <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010baa8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010baab:	8b 40 04             	mov    0x4(%eax),%eax
c010baae:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bab2:	c7 44 24 08 88 ef 10 	movl   $0xc010ef88,0x8(%esp)
c010bab9:	c0 
c010baba:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c010bac1:	00 
c010bac2:	c7 04 24 cd ee 10 c0 	movl   $0xc010eecd,(%esp)
c010bac9:	e8 72 53 ff ff       	call   c0100e40 <__warn>
                }
                wakeup_proc(proc);
c010bace:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bad1:	89 04 24             	mov    %eax,(%esp)
c010bad4:	e8 e6 fb ff ff       	call   c010b6bf <wakeup_proc>
                del_timer(timer);
c010bad9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010badc:	89 04 24             	mov    %eax,(%esp)
c010badf:	e8 3d fe ff ff       	call   c010b921 <del_timer>
                if (le == &timer_list) {
c010bae4:	81 7d f4 54 2e 1b c0 	cmpl   $0xc01b2e54,-0xc(%ebp)
c010baeb:	75 02                	jne    c010baef <run_timer_list+0x10a>
                    break;
c010baed:	eb 16                	jmp    c010bb05 <run_timer_list+0x120>
                }
                timer = le2timer(le, timer_link);
c010baef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010baf2:	83 e8 08             	sub    $0x8,%eax
c010baf5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010baf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bafb:	8b 00                	mov    (%eax),%eax
c010bafd:	85 c0                	test   %eax,%eax
c010baff:	0f 84 53 ff ff ff    	je     c010ba58 <run_timer_list+0x73>
                    break;
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010bb05:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010bb0a:	89 04 24             	mov    %eax,(%esp)
c010bb0d:	e8 08 fb ff ff       	call   c010b61a <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010bb12:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bb15:	89 04 24             	mov    %eax,(%esp)
c010bb18:	e8 81 fa ff ff       	call   c010b59e <__intr_restore>
}
c010bb1d:	c9                   	leave  
c010bb1e:	c3                   	ret    

c010bb1f <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010bb1f:	55                   	push   %ebp
c010bb20:	89 e5                	mov    %esp,%ebp
c010bb22:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010bb25:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb28:	8b 00                	mov    (%eax),%eax
c010bb2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010bb2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb30:	89 04 24             	mov    %eax,(%esp)
c010bb33:	e8 23 e5 ff ff       	call   c010a05b <do_exit>
}
c010bb38:	c9                   	leave  
c010bb39:	c3                   	ret    

c010bb3a <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010bb3a:	55                   	push   %ebp
c010bb3b:	89 e5                	mov    %esp,%ebp
c010bb3d:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010bb40:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010bb45:	8b 40 3c             	mov    0x3c(%eax),%eax
c010bb48:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010bb4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb4e:	8b 40 44             	mov    0x44(%eax),%eax
c010bb51:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010bb54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb57:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bb5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb5e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb62:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010bb69:	e8 cc e3 ff ff       	call   c0109f3a <do_fork>
}
c010bb6e:	c9                   	leave  
c010bb6f:	c3                   	ret    

c010bb70 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010bb70:	55                   	push   %ebp
c010bb71:	89 e5                	mov    %esp,%ebp
c010bb73:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010bb76:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb79:	8b 00                	mov    (%eax),%eax
c010bb7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010bb7e:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb81:	83 c0 04             	add    $0x4,%eax
c010bb84:	8b 00                	mov    (%eax),%eax
c010bb86:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010bb89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb8c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb93:	89 04 24             	mov    %eax,(%esp)
c010bb96:	e8 3e ee ff ff       	call   c010a9d9 <do_wait>
}
c010bb9b:	c9                   	leave  
c010bb9c:	c3                   	ret    

c010bb9d <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010bb9d:	55                   	push   %ebp
c010bb9e:	89 e5                	mov    %esp,%ebp
c010bba0:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010bba3:	8b 45 08             	mov    0x8(%ebp),%eax
c010bba6:	8b 00                	mov    (%eax),%eax
c010bba8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010bbab:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbae:	8b 40 04             	mov    0x4(%eax),%eax
c010bbb1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010bbb4:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbb7:	83 c0 08             	add    $0x8,%eax
c010bbba:	8b 00                	mov    (%eax),%eax
c010bbbc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010bbbf:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbc2:	8b 40 0c             	mov    0xc(%eax),%eax
c010bbc5:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010bbc8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bbcb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bbcf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bbd2:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bbd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbd9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bbdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbe0:	89 04 24             	mov    %eax,(%esp)
c010bbe3:	e8 a5 ec ff ff       	call   c010a88d <do_execve>
}
c010bbe8:	c9                   	leave  
c010bbe9:	c3                   	ret    

c010bbea <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010bbea:	55                   	push   %ebp
c010bbeb:	89 e5                	mov    %esp,%ebp
c010bbed:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010bbf0:	e8 ce ed ff ff       	call   c010a9c3 <do_yield>
}
c010bbf5:	c9                   	leave  
c010bbf6:	c3                   	ret    

c010bbf7 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010bbf7:	55                   	push   %ebp
c010bbf8:	89 e5                	mov    %esp,%ebp
c010bbfa:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010bbfd:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc00:	8b 00                	mov    (%eax),%eax
c010bc02:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010bc05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc08:	89 04 24             	mov    %eax,(%esp)
c010bc0b:	e8 5d ef ff ff       	call   c010ab6d <do_kill>
}
c010bc10:	c9                   	leave  
c010bc11:	c3                   	ret    

c010bc12 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010bc12:	55                   	push   %ebp
c010bc13:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010bc15:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010bc1a:	8b 40 04             	mov    0x4(%eax),%eax
}
c010bc1d:	5d                   	pop    %ebp
c010bc1e:	c3                   	ret    

c010bc1f <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010bc1f:	55                   	push   %ebp
c010bc20:	89 e5                	mov    %esp,%ebp
c010bc22:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010bc25:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc28:	8b 00                	mov    (%eax),%eax
c010bc2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010bc2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc30:	89 04 24             	mov    %eax,(%esp)
c010bc33:	e8 46 47 ff ff       	call   c010037e <cputchar>
    return 0;
c010bc38:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bc3d:	c9                   	leave  
c010bc3e:	c3                   	ret    

c010bc3f <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010bc3f:	55                   	push   %ebp
c010bc40:	89 e5                	mov    %esp,%ebp
c010bc42:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010bc45:	e8 d7 b0 ff ff       	call   c0106d21 <print_pgdir>
    return 0;
c010bc4a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bc4f:	c9                   	leave  
c010bc50:	c3                   	ret    

c010bc51 <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010bc51:	55                   	push   %ebp
c010bc52:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010bc54:	a1 78 2e 1b c0       	mov    0xc01b2e78,%eax
}
c010bc59:	5d                   	pop    %ebp
c010bc5a:	c3                   	ret    

c010bc5b <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010bc5b:	55                   	push   %ebp
c010bc5c:	89 e5                	mov    %esp,%ebp
c010bc5e:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010bc61:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc64:	8b 00                	mov    (%eax),%eax
c010bc66:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010bc69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc6c:	89 04 24             	mov    %eax,(%esp)
c010bc6f:	e8 54 f3 ff ff       	call   c010afc8 <lab6_set_priority>
    return 0;
c010bc74:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bc79:	c9                   	leave  
c010bc7a:	c3                   	ret    

c010bc7b <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010bc7b:	55                   	push   %ebp
c010bc7c:	89 e5                	mov    %esp,%ebp
c010bc7e:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010bc81:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010bc86:	8b 40 3c             	mov    0x3c(%eax),%eax
c010bc89:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010bc8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc8f:	8b 40 1c             	mov    0x1c(%eax),%eax
c010bc92:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010bc95:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bc99:	78 60                	js     c010bcfb <syscall+0x80>
c010bc9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc9e:	3d ff 00 00 00       	cmp    $0xff,%eax
c010bca3:	77 56                	ja     c010bcfb <syscall+0x80>
        if (syscalls[num] != NULL) {
c010bca5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bca8:	8b 04 85 a0 ea 12 c0 	mov    -0x3fed1560(,%eax,4),%eax
c010bcaf:	85 c0                	test   %eax,%eax
c010bcb1:	74 48                	je     c010bcfb <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010bcb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcb6:	8b 40 14             	mov    0x14(%eax),%eax
c010bcb9:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010bcbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcbf:	8b 40 18             	mov    0x18(%eax),%eax
c010bcc2:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010bcc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcc8:	8b 40 10             	mov    0x10(%eax),%eax
c010bccb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010bcce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcd1:	8b 00                	mov    (%eax),%eax
c010bcd3:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010bcd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcd9:	8b 40 04             	mov    0x4(%eax),%eax
c010bcdc:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010bcdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bce2:	8b 04 85 a0 ea 12 c0 	mov    -0x3fed1560(,%eax,4),%eax
c010bce9:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010bcec:	89 14 24             	mov    %edx,(%esp)
c010bcef:	ff d0                	call   *%eax
c010bcf1:	89 c2                	mov    %eax,%edx
c010bcf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcf6:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010bcf9:	eb 46                	jmp    c010bd41 <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010bcfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcfe:	89 04 24             	mov    %eax,(%esp)
c010bd01:	e8 80 68 ff ff       	call   c0102586 <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010bd06:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010bd0b:	8d 50 48             	lea    0x48(%eax),%edx
c010bd0e:	a1 28 0e 1b c0       	mov    0xc01b0e28,%eax
c010bd13:	8b 40 04             	mov    0x4(%eax),%eax
c010bd16:	89 54 24 14          	mov    %edx,0x14(%esp)
c010bd1a:	89 44 24 10          	mov    %eax,0x10(%esp)
c010bd1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd21:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bd25:	c7 44 24 08 a8 ef 10 	movl   $0xc010efa8,0x8(%esp)
c010bd2c:	c0 
c010bd2d:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c010bd34:	00 
c010bd35:	c7 04 24 d4 ef 10 c0 	movl   $0xc010efd4,(%esp)
c010bd3c:	e8 93 50 ff ff       	call   c0100dd4 <__panic>
            num, current->pid, current->name);
}
c010bd41:	c9                   	leave  
c010bd42:	c3                   	ret    

c010bd43 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010bd43:	55                   	push   %ebp
c010bd44:	89 e5                	mov    %esp,%ebp
c010bd46:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010bd49:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd4c:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010bd52:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010bd55:	b8 20 00 00 00       	mov    $0x20,%eax
c010bd5a:	2b 45 0c             	sub    0xc(%ebp),%eax
c010bd5d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010bd60:	89 c1                	mov    %eax,%ecx
c010bd62:	d3 ea                	shr    %cl,%edx
c010bd64:	89 d0                	mov    %edx,%eax
}
c010bd66:	c9                   	leave  
c010bd67:	c3                   	ret    

c010bd68 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010bd68:	55                   	push   %ebp
c010bd69:	89 e5                	mov    %esp,%ebp
c010bd6b:	83 ec 58             	sub    $0x58,%esp
c010bd6e:	8b 45 10             	mov    0x10(%ebp),%eax
c010bd71:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010bd74:	8b 45 14             	mov    0x14(%ebp),%eax
c010bd77:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010bd7a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010bd7d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010bd80:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010bd83:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010bd86:	8b 45 18             	mov    0x18(%ebp),%eax
c010bd89:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010bd8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bd92:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010bd95:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010bd98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bd9e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bda2:	74 1c                	je     c010bdc0 <printnum+0x58>
c010bda4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bda7:	ba 00 00 00 00       	mov    $0x0,%edx
c010bdac:	f7 75 e4             	divl   -0x1c(%ebp)
c010bdaf:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010bdb2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bdb5:	ba 00 00 00 00       	mov    $0x0,%edx
c010bdba:	f7 75 e4             	divl   -0x1c(%ebp)
c010bdbd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bdc0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bdc3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bdc6:	f7 75 e4             	divl   -0x1c(%ebp)
c010bdc9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010bdcc:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010bdcf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bdd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010bdd5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010bdd8:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010bddb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010bdde:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010bde1:	8b 45 18             	mov    0x18(%ebp),%eax
c010bde4:	ba 00 00 00 00       	mov    $0x0,%edx
c010bde9:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010bdec:	77 56                	ja     c010be44 <printnum+0xdc>
c010bdee:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010bdf1:	72 05                	jb     c010bdf8 <printnum+0x90>
c010bdf3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010bdf6:	77 4c                	ja     c010be44 <printnum+0xdc>
        printnum(putch, putdat, result, base, width - 1, padc);
c010bdf8:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010bdfb:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bdfe:	8b 45 20             	mov    0x20(%ebp),%eax
c010be01:	89 44 24 18          	mov    %eax,0x18(%esp)
c010be05:	89 54 24 14          	mov    %edx,0x14(%esp)
c010be09:	8b 45 18             	mov    0x18(%ebp),%eax
c010be0c:	89 44 24 10          	mov    %eax,0x10(%esp)
c010be10:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010be13:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010be16:	89 44 24 08          	mov    %eax,0x8(%esp)
c010be1a:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010be1e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be21:	89 44 24 04          	mov    %eax,0x4(%esp)
c010be25:	8b 45 08             	mov    0x8(%ebp),%eax
c010be28:	89 04 24             	mov    %eax,(%esp)
c010be2b:	e8 38 ff ff ff       	call   c010bd68 <printnum>
c010be30:	eb 1c                	jmp    c010be4e <printnum+0xe6>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010be32:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be35:	89 44 24 04          	mov    %eax,0x4(%esp)
c010be39:	8b 45 20             	mov    0x20(%ebp),%eax
c010be3c:	89 04 24             	mov    %eax,(%esp)
c010be3f:	8b 45 08             	mov    0x8(%ebp),%eax
c010be42:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010be44:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010be48:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010be4c:	7f e4                	jg     c010be32 <printnum+0xca>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010be4e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010be51:	05 04 f1 10 c0       	add    $0xc010f104,%eax
c010be56:	0f b6 00             	movzbl (%eax),%eax
c010be59:	0f be c0             	movsbl %al,%eax
c010be5c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010be5f:	89 54 24 04          	mov    %edx,0x4(%esp)
c010be63:	89 04 24             	mov    %eax,(%esp)
c010be66:	8b 45 08             	mov    0x8(%ebp),%eax
c010be69:	ff d0                	call   *%eax
}
c010be6b:	c9                   	leave  
c010be6c:	c3                   	ret    

c010be6d <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010be6d:	55                   	push   %ebp
c010be6e:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010be70:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010be74:	7e 14                	jle    c010be8a <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010be76:	8b 45 08             	mov    0x8(%ebp),%eax
c010be79:	8b 00                	mov    (%eax),%eax
c010be7b:	8d 48 08             	lea    0x8(%eax),%ecx
c010be7e:	8b 55 08             	mov    0x8(%ebp),%edx
c010be81:	89 0a                	mov    %ecx,(%edx)
c010be83:	8b 50 04             	mov    0x4(%eax),%edx
c010be86:	8b 00                	mov    (%eax),%eax
c010be88:	eb 30                	jmp    c010beba <getuint+0x4d>
    }
    else if (lflag) {
c010be8a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010be8e:	74 16                	je     c010bea6 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010be90:	8b 45 08             	mov    0x8(%ebp),%eax
c010be93:	8b 00                	mov    (%eax),%eax
c010be95:	8d 48 04             	lea    0x4(%eax),%ecx
c010be98:	8b 55 08             	mov    0x8(%ebp),%edx
c010be9b:	89 0a                	mov    %ecx,(%edx)
c010be9d:	8b 00                	mov    (%eax),%eax
c010be9f:	ba 00 00 00 00       	mov    $0x0,%edx
c010bea4:	eb 14                	jmp    c010beba <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010bea6:	8b 45 08             	mov    0x8(%ebp),%eax
c010bea9:	8b 00                	mov    (%eax),%eax
c010beab:	8d 48 04             	lea    0x4(%eax),%ecx
c010beae:	8b 55 08             	mov    0x8(%ebp),%edx
c010beb1:	89 0a                	mov    %ecx,(%edx)
c010beb3:	8b 00                	mov    (%eax),%eax
c010beb5:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010beba:	5d                   	pop    %ebp
c010bebb:	c3                   	ret    

c010bebc <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010bebc:	55                   	push   %ebp
c010bebd:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010bebf:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010bec3:	7e 14                	jle    c010bed9 <getint+0x1d>
        return va_arg(*ap, long long);
c010bec5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bec8:	8b 00                	mov    (%eax),%eax
c010beca:	8d 48 08             	lea    0x8(%eax),%ecx
c010becd:	8b 55 08             	mov    0x8(%ebp),%edx
c010bed0:	89 0a                	mov    %ecx,(%edx)
c010bed2:	8b 50 04             	mov    0x4(%eax),%edx
c010bed5:	8b 00                	mov    (%eax),%eax
c010bed7:	eb 28                	jmp    c010bf01 <getint+0x45>
    }
    else if (lflag) {
c010bed9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bedd:	74 12                	je     c010bef1 <getint+0x35>
        return va_arg(*ap, long);
c010bedf:	8b 45 08             	mov    0x8(%ebp),%eax
c010bee2:	8b 00                	mov    (%eax),%eax
c010bee4:	8d 48 04             	lea    0x4(%eax),%ecx
c010bee7:	8b 55 08             	mov    0x8(%ebp),%edx
c010beea:	89 0a                	mov    %ecx,(%edx)
c010beec:	8b 00                	mov    (%eax),%eax
c010beee:	99                   	cltd   
c010beef:	eb 10                	jmp    c010bf01 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010bef1:	8b 45 08             	mov    0x8(%ebp),%eax
c010bef4:	8b 00                	mov    (%eax),%eax
c010bef6:	8d 48 04             	lea    0x4(%eax),%ecx
c010bef9:	8b 55 08             	mov    0x8(%ebp),%edx
c010befc:	89 0a                	mov    %ecx,(%edx)
c010befe:	8b 00                	mov    (%eax),%eax
c010bf00:	99                   	cltd   
    }
}
c010bf01:	5d                   	pop    %ebp
c010bf02:	c3                   	ret    

c010bf03 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010bf03:	55                   	push   %ebp
c010bf04:	89 e5                	mov    %esp,%ebp
c010bf06:	83 ec 28             	sub    $0x28,%esp
    va_list ap;

    va_start(ap, fmt);
c010bf09:	8d 45 14             	lea    0x14(%ebp),%eax
c010bf0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010bf0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf12:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bf16:	8b 45 10             	mov    0x10(%ebp),%eax
c010bf19:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bf1d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf20:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bf24:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf27:	89 04 24             	mov    %eax,(%esp)
c010bf2a:	e8 02 00 00 00       	call   c010bf31 <vprintfmt>
    va_end(ap);
}
c010bf2f:	c9                   	leave  
c010bf30:	c3                   	ret    

c010bf31 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010bf31:	55                   	push   %ebp
c010bf32:	89 e5                	mov    %esp,%ebp
c010bf34:	56                   	push   %esi
c010bf35:	53                   	push   %ebx
c010bf36:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010bf39:	eb 18                	jmp    c010bf53 <vprintfmt+0x22>
            if (ch == '\0') {
c010bf3b:	85 db                	test   %ebx,%ebx
c010bf3d:	75 05                	jne    c010bf44 <vprintfmt+0x13>
                return;
c010bf3f:	e9 d1 03 00 00       	jmp    c010c315 <vprintfmt+0x3e4>
            }
            putch(ch, putdat);
c010bf44:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf47:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bf4b:	89 1c 24             	mov    %ebx,(%esp)
c010bf4e:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf51:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010bf53:	8b 45 10             	mov    0x10(%ebp),%eax
c010bf56:	8d 50 01             	lea    0x1(%eax),%edx
c010bf59:	89 55 10             	mov    %edx,0x10(%ebp)
c010bf5c:	0f b6 00             	movzbl (%eax),%eax
c010bf5f:	0f b6 d8             	movzbl %al,%ebx
c010bf62:	83 fb 25             	cmp    $0x25,%ebx
c010bf65:	75 d4                	jne    c010bf3b <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010bf67:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010bf6b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010bf72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bf75:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010bf78:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010bf7f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010bf82:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010bf85:	8b 45 10             	mov    0x10(%ebp),%eax
c010bf88:	8d 50 01             	lea    0x1(%eax),%edx
c010bf8b:	89 55 10             	mov    %edx,0x10(%ebp)
c010bf8e:	0f b6 00             	movzbl (%eax),%eax
c010bf91:	0f b6 d8             	movzbl %al,%ebx
c010bf94:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010bf97:	83 f8 55             	cmp    $0x55,%eax
c010bf9a:	0f 87 44 03 00 00    	ja     c010c2e4 <vprintfmt+0x3b3>
c010bfa0:	8b 04 85 28 f1 10 c0 	mov    -0x3fef0ed8(,%eax,4),%eax
c010bfa7:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010bfa9:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010bfad:	eb d6                	jmp    c010bf85 <vprintfmt+0x54>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010bfaf:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010bfb3:	eb d0                	jmp    c010bf85 <vprintfmt+0x54>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010bfb5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010bfbc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010bfbf:	89 d0                	mov    %edx,%eax
c010bfc1:	c1 e0 02             	shl    $0x2,%eax
c010bfc4:	01 d0                	add    %edx,%eax
c010bfc6:	01 c0                	add    %eax,%eax
c010bfc8:	01 d8                	add    %ebx,%eax
c010bfca:	83 e8 30             	sub    $0x30,%eax
c010bfcd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010bfd0:	8b 45 10             	mov    0x10(%ebp),%eax
c010bfd3:	0f b6 00             	movzbl (%eax),%eax
c010bfd6:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010bfd9:	83 fb 2f             	cmp    $0x2f,%ebx
c010bfdc:	7e 0b                	jle    c010bfe9 <vprintfmt+0xb8>
c010bfde:	83 fb 39             	cmp    $0x39,%ebx
c010bfe1:	7f 06                	jg     c010bfe9 <vprintfmt+0xb8>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010bfe3:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010bfe7:	eb d3                	jmp    c010bfbc <vprintfmt+0x8b>
            goto process_precision;
c010bfe9:	eb 33                	jmp    c010c01e <vprintfmt+0xed>

        case '*':
            precision = va_arg(ap, int);
c010bfeb:	8b 45 14             	mov    0x14(%ebp),%eax
c010bfee:	8d 50 04             	lea    0x4(%eax),%edx
c010bff1:	89 55 14             	mov    %edx,0x14(%ebp)
c010bff4:	8b 00                	mov    (%eax),%eax
c010bff6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010bff9:	eb 23                	jmp    c010c01e <vprintfmt+0xed>

        case '.':
            if (width < 0)
c010bffb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010bfff:	79 0c                	jns    c010c00d <vprintfmt+0xdc>
                width = 0;
c010c001:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010c008:	e9 78 ff ff ff       	jmp    c010bf85 <vprintfmt+0x54>
c010c00d:	e9 73 ff ff ff       	jmp    c010bf85 <vprintfmt+0x54>

        case '#':
            altflag = 1;
c010c012:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010c019:	e9 67 ff ff ff       	jmp    c010bf85 <vprintfmt+0x54>

        process_precision:
            if (width < 0)
c010c01e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c022:	79 12                	jns    c010c036 <vprintfmt+0x105>
                width = precision, precision = -1;
c010c024:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c027:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c02a:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010c031:	e9 4f ff ff ff       	jmp    c010bf85 <vprintfmt+0x54>
c010c036:	e9 4a ff ff ff       	jmp    c010bf85 <vprintfmt+0x54>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010c03b:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010c03f:	e9 41 ff ff ff       	jmp    c010bf85 <vprintfmt+0x54>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010c044:	8b 45 14             	mov    0x14(%ebp),%eax
c010c047:	8d 50 04             	lea    0x4(%eax),%edx
c010c04a:	89 55 14             	mov    %edx,0x14(%ebp)
c010c04d:	8b 00                	mov    (%eax),%eax
c010c04f:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c052:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c056:	89 04 24             	mov    %eax,(%esp)
c010c059:	8b 45 08             	mov    0x8(%ebp),%eax
c010c05c:	ff d0                	call   *%eax
            break;
c010c05e:	e9 ac 02 00 00       	jmp    c010c30f <vprintfmt+0x3de>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010c063:	8b 45 14             	mov    0x14(%ebp),%eax
c010c066:	8d 50 04             	lea    0x4(%eax),%edx
c010c069:	89 55 14             	mov    %edx,0x14(%ebp)
c010c06c:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010c06e:	85 db                	test   %ebx,%ebx
c010c070:	79 02                	jns    c010c074 <vprintfmt+0x143>
                err = -err;
c010c072:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010c074:	83 fb 18             	cmp    $0x18,%ebx
c010c077:	7f 0b                	jg     c010c084 <vprintfmt+0x153>
c010c079:	8b 34 9d a0 f0 10 c0 	mov    -0x3fef0f60(,%ebx,4),%esi
c010c080:	85 f6                	test   %esi,%esi
c010c082:	75 23                	jne    c010c0a7 <vprintfmt+0x176>
                printfmt(putch, putdat, "error %d", err);
c010c084:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010c088:	c7 44 24 08 15 f1 10 	movl   $0xc010f115,0x8(%esp)
c010c08f:	c0 
c010c090:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c093:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c097:	8b 45 08             	mov    0x8(%ebp),%eax
c010c09a:	89 04 24             	mov    %eax,(%esp)
c010c09d:	e8 61 fe ff ff       	call   c010bf03 <printfmt>
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010c0a2:	e9 68 02 00 00       	jmp    c010c30f <vprintfmt+0x3de>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010c0a7:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010c0ab:	c7 44 24 08 1e f1 10 	movl   $0xc010f11e,0x8(%esp)
c010c0b2:	c0 
c010c0b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c0b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c0ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0bd:	89 04 24             	mov    %eax,(%esp)
c010c0c0:	e8 3e fe ff ff       	call   c010bf03 <printfmt>
            }
            break;
c010c0c5:	e9 45 02 00 00       	jmp    c010c30f <vprintfmt+0x3de>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010c0ca:	8b 45 14             	mov    0x14(%ebp),%eax
c010c0cd:	8d 50 04             	lea    0x4(%eax),%edx
c010c0d0:	89 55 14             	mov    %edx,0x14(%ebp)
c010c0d3:	8b 30                	mov    (%eax),%esi
c010c0d5:	85 f6                	test   %esi,%esi
c010c0d7:	75 05                	jne    c010c0de <vprintfmt+0x1ad>
                p = "(null)";
c010c0d9:	be 21 f1 10 c0       	mov    $0xc010f121,%esi
            }
            if (width > 0 && padc != '-') {
c010c0de:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c0e2:	7e 3e                	jle    c010c122 <vprintfmt+0x1f1>
c010c0e4:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010c0e8:	74 38                	je     c010c122 <vprintfmt+0x1f1>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010c0ea:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c010c0ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c0f0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c0f4:	89 34 24             	mov    %esi,(%esp)
c010c0f7:	e8 ed 03 00 00       	call   c010c4e9 <strnlen>
c010c0fc:	29 c3                	sub    %eax,%ebx
c010c0fe:	89 d8                	mov    %ebx,%eax
c010c100:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c103:	eb 17                	jmp    c010c11c <vprintfmt+0x1eb>
                    putch(padc, putdat);
c010c105:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010c109:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c10c:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c110:	89 04 24             	mov    %eax,(%esp)
c010c113:	8b 45 08             	mov    0x8(%ebp),%eax
c010c116:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010c118:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010c11c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c120:	7f e3                	jg     c010c105 <vprintfmt+0x1d4>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010c122:	eb 38                	jmp    c010c15c <vprintfmt+0x22b>
                if (altflag && (ch < ' ' || ch > '~')) {
c010c124:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010c128:	74 1f                	je     c010c149 <vprintfmt+0x218>
c010c12a:	83 fb 1f             	cmp    $0x1f,%ebx
c010c12d:	7e 05                	jle    c010c134 <vprintfmt+0x203>
c010c12f:	83 fb 7e             	cmp    $0x7e,%ebx
c010c132:	7e 15                	jle    c010c149 <vprintfmt+0x218>
                    putch('?', putdat);
c010c134:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c137:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c13b:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c010c142:	8b 45 08             	mov    0x8(%ebp),%eax
c010c145:	ff d0                	call   *%eax
c010c147:	eb 0f                	jmp    c010c158 <vprintfmt+0x227>
                }
                else {
                    putch(ch, putdat);
c010c149:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c14c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c150:	89 1c 24             	mov    %ebx,(%esp)
c010c153:	8b 45 08             	mov    0x8(%ebp),%eax
c010c156:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010c158:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010c15c:	89 f0                	mov    %esi,%eax
c010c15e:	8d 70 01             	lea    0x1(%eax),%esi
c010c161:	0f b6 00             	movzbl (%eax),%eax
c010c164:	0f be d8             	movsbl %al,%ebx
c010c167:	85 db                	test   %ebx,%ebx
c010c169:	74 10                	je     c010c17b <vprintfmt+0x24a>
c010c16b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010c16f:	78 b3                	js     c010c124 <vprintfmt+0x1f3>
c010c171:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010c175:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010c179:	79 a9                	jns    c010c124 <vprintfmt+0x1f3>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010c17b:	eb 17                	jmp    c010c194 <vprintfmt+0x263>
                putch(' ', putdat);
c010c17d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c180:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c184:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010c18b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c18e:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010c190:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010c194:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c198:	7f e3                	jg     c010c17d <vprintfmt+0x24c>
                putch(' ', putdat);
            }
            break;
c010c19a:	e9 70 01 00 00       	jmp    c010c30f <vprintfmt+0x3de>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010c19f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c1a2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c1a6:	8d 45 14             	lea    0x14(%ebp),%eax
c010c1a9:	89 04 24             	mov    %eax,(%esp)
c010c1ac:	e8 0b fd ff ff       	call   c010bebc <getint>
c010c1b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c1b4:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010c1b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c1ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c1bd:	85 d2                	test   %edx,%edx
c010c1bf:	79 26                	jns    c010c1e7 <vprintfmt+0x2b6>
                putch('-', putdat);
c010c1c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1c4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c1c8:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c010c1cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1d2:	ff d0                	call   *%eax
                num = -(long long)num;
c010c1d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c1d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c1da:	f7 d8                	neg    %eax
c010c1dc:	83 d2 00             	adc    $0x0,%edx
c010c1df:	f7 da                	neg    %edx
c010c1e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c1e4:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010c1e7:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010c1ee:	e9 a8 00 00 00       	jmp    c010c29b <vprintfmt+0x36a>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010c1f3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c1f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c1fa:	8d 45 14             	lea    0x14(%ebp),%eax
c010c1fd:	89 04 24             	mov    %eax,(%esp)
c010c200:	e8 68 fc ff ff       	call   c010be6d <getuint>
c010c205:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c208:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010c20b:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010c212:	e9 84 00 00 00       	jmp    c010c29b <vprintfmt+0x36a>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010c217:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c21a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c21e:	8d 45 14             	lea    0x14(%ebp),%eax
c010c221:	89 04 24             	mov    %eax,(%esp)
c010c224:	e8 44 fc ff ff       	call   c010be6d <getuint>
c010c229:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c22c:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010c22f:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010c236:	eb 63                	jmp    c010c29b <vprintfmt+0x36a>

        // pointer
        case 'p':
            putch('0', putdat);
c010c238:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c23b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c23f:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c010c246:	8b 45 08             	mov    0x8(%ebp),%eax
c010c249:	ff d0                	call   *%eax
            putch('x', putdat);
c010c24b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c24e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c252:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c010c259:	8b 45 08             	mov    0x8(%ebp),%eax
c010c25c:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010c25e:	8b 45 14             	mov    0x14(%ebp),%eax
c010c261:	8d 50 04             	lea    0x4(%eax),%edx
c010c264:	89 55 14             	mov    %edx,0x14(%ebp)
c010c267:	8b 00                	mov    (%eax),%eax
c010c269:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c26c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010c273:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010c27a:	eb 1f                	jmp    c010c29b <vprintfmt+0x36a>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010c27c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c27f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c283:	8d 45 14             	lea    0x14(%ebp),%eax
c010c286:	89 04 24             	mov    %eax,(%esp)
c010c289:	e8 df fb ff ff       	call   c010be6d <getuint>
c010c28e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c291:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010c294:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010c29b:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010c29f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c2a2:	89 54 24 18          	mov    %edx,0x18(%esp)
c010c2a6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c2a9:	89 54 24 14          	mov    %edx,0x14(%esp)
c010c2ad:	89 44 24 10          	mov    %eax,0x10(%esp)
c010c2b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c2b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c2b7:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c2bb:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010c2bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c2c2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c2c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2c9:	89 04 24             	mov    %eax,(%esp)
c010c2cc:	e8 97 fa ff ff       	call   c010bd68 <printnum>
            break;
c010c2d1:	eb 3c                	jmp    c010c30f <vprintfmt+0x3de>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010c2d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c2d6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c2da:	89 1c 24             	mov    %ebx,(%esp)
c010c2dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2e0:	ff d0                	call   *%eax
            break;
c010c2e2:	eb 2b                	jmp    c010c30f <vprintfmt+0x3de>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010c2e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c2e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c2eb:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010c2f2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2f5:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c010c2f7:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010c2fb:	eb 04                	jmp    c010c301 <vprintfmt+0x3d0>
c010c2fd:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010c301:	8b 45 10             	mov    0x10(%ebp),%eax
c010c304:	83 e8 01             	sub    $0x1,%eax
c010c307:	0f b6 00             	movzbl (%eax),%eax
c010c30a:	3c 25                	cmp    $0x25,%al
c010c30c:	75 ef                	jne    c010c2fd <vprintfmt+0x3cc>
                /* do nothing */;
            break;
c010c30e:	90                   	nop
        }
    }
c010c30f:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010c310:	e9 3e fc ff ff       	jmp    c010bf53 <vprintfmt+0x22>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010c315:	83 c4 40             	add    $0x40,%esp
c010c318:	5b                   	pop    %ebx
c010c319:	5e                   	pop    %esi
c010c31a:	5d                   	pop    %ebp
c010c31b:	c3                   	ret    

c010c31c <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010c31c:	55                   	push   %ebp
c010c31d:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010c31f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c322:	8b 40 08             	mov    0x8(%eax),%eax
c010c325:	8d 50 01             	lea    0x1(%eax),%edx
c010c328:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c32b:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010c32e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c331:	8b 10                	mov    (%eax),%edx
c010c333:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c336:	8b 40 04             	mov    0x4(%eax),%eax
c010c339:	39 c2                	cmp    %eax,%edx
c010c33b:	73 12                	jae    c010c34f <sprintputch+0x33>
        *b->buf ++ = ch;
c010c33d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c340:	8b 00                	mov    (%eax),%eax
c010c342:	8d 48 01             	lea    0x1(%eax),%ecx
c010c345:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c348:	89 0a                	mov    %ecx,(%edx)
c010c34a:	8b 55 08             	mov    0x8(%ebp),%edx
c010c34d:	88 10                	mov    %dl,(%eax)
    }
}
c010c34f:	5d                   	pop    %ebp
c010c350:	c3                   	ret    

c010c351 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010c351:	55                   	push   %ebp
c010c352:	89 e5                	mov    %esp,%ebp
c010c354:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010c357:	8d 45 14             	lea    0x14(%ebp),%eax
c010c35a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010c35d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c360:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c364:	8b 45 10             	mov    0x10(%ebp),%eax
c010c367:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c36b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c36e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c372:	8b 45 08             	mov    0x8(%ebp),%eax
c010c375:	89 04 24             	mov    %eax,(%esp)
c010c378:	e8 08 00 00 00       	call   c010c385 <vsnprintf>
c010c37d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010c380:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010c383:	c9                   	leave  
c010c384:	c3                   	ret    

c010c385 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010c385:	55                   	push   %ebp
c010c386:	89 e5                	mov    %esp,%ebp
c010c388:	83 ec 28             	sub    $0x28,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010c38b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c38e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c391:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c394:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c397:	8b 45 08             	mov    0x8(%ebp),%eax
c010c39a:	01 d0                	add    %edx,%eax
c010c39c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c39f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010c3a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c3aa:	74 0a                	je     c010c3b6 <vsnprintf+0x31>
c010c3ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c3af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c3b2:	39 c2                	cmp    %eax,%edx
c010c3b4:	76 07                	jbe    c010c3bd <vsnprintf+0x38>
        return -E_INVAL;
c010c3b6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010c3bb:	eb 2a                	jmp    c010c3e7 <vsnprintf+0x62>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010c3bd:	8b 45 14             	mov    0x14(%ebp),%eax
c010c3c0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c3c4:	8b 45 10             	mov    0x10(%ebp),%eax
c010c3c7:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c3cb:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010c3ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c3d2:	c7 04 24 1c c3 10 c0 	movl   $0xc010c31c,(%esp)
c010c3d9:	e8 53 fb ff ff       	call   c010bf31 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c010c3de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c3e1:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010c3e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010c3e7:	c9                   	leave  
c010c3e8:	c3                   	ret    

c010c3e9 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010c3e9:	55                   	push   %ebp
c010c3ea:	89 e5                	mov    %esp,%ebp
c010c3ec:	57                   	push   %edi
c010c3ed:	56                   	push   %esi
c010c3ee:	53                   	push   %ebx
c010c3ef:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010c3f2:	a1 a0 ee 12 c0       	mov    0xc012eea0,%eax
c010c3f7:	8b 15 a4 ee 12 c0    	mov    0xc012eea4,%edx
c010c3fd:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010c403:	6b f0 05             	imul   $0x5,%eax,%esi
c010c406:	01 f7                	add    %esi,%edi
c010c408:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c010c40d:	f7 e6                	mul    %esi
c010c40f:	8d 34 17             	lea    (%edi,%edx,1),%esi
c010c412:	89 f2                	mov    %esi,%edx
c010c414:	83 c0 0b             	add    $0xb,%eax
c010c417:	83 d2 00             	adc    $0x0,%edx
c010c41a:	89 c7                	mov    %eax,%edi
c010c41c:	83 e7 ff             	and    $0xffffffff,%edi
c010c41f:	89 f9                	mov    %edi,%ecx
c010c421:	0f b7 da             	movzwl %dx,%ebx
c010c424:	89 0d a0 ee 12 c0    	mov    %ecx,0xc012eea0
c010c42a:	89 1d a4 ee 12 c0    	mov    %ebx,0xc012eea4
    unsigned long long result = (next >> 12);
c010c430:	a1 a0 ee 12 c0       	mov    0xc012eea0,%eax
c010c435:	8b 15 a4 ee 12 c0    	mov    0xc012eea4,%edx
c010c43b:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010c43f:	c1 ea 0c             	shr    $0xc,%edx
c010c442:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c445:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010c448:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010c44f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c452:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c455:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010c458:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c45b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c45e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c461:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c465:	74 1c                	je     c010c483 <rand+0x9a>
c010c467:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c46a:	ba 00 00 00 00       	mov    $0x0,%edx
c010c46f:	f7 75 dc             	divl   -0x24(%ebp)
c010c472:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010c475:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c478:	ba 00 00 00 00       	mov    $0x0,%edx
c010c47d:	f7 75 dc             	divl   -0x24(%ebp)
c010c480:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c483:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c486:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c489:	f7 75 dc             	divl   -0x24(%ebp)
c010c48c:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010c48f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010c492:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c495:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c498:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c49b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c49e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010c4a1:	83 c4 24             	add    $0x24,%esp
c010c4a4:	5b                   	pop    %ebx
c010c4a5:	5e                   	pop    %esi
c010c4a6:	5f                   	pop    %edi
c010c4a7:	5d                   	pop    %ebp
c010c4a8:	c3                   	ret    

c010c4a9 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010c4a9:	55                   	push   %ebp
c010c4aa:	89 e5                	mov    %esp,%ebp
    next = seed;
c010c4ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4af:	ba 00 00 00 00       	mov    $0x0,%edx
c010c4b4:	a3 a0 ee 12 c0       	mov    %eax,0xc012eea0
c010c4b9:	89 15 a4 ee 12 c0    	mov    %edx,0xc012eea4
}
c010c4bf:	5d                   	pop    %ebp
c010c4c0:	c3                   	ret    

c010c4c1 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010c4c1:	55                   	push   %ebp
c010c4c2:	89 e5                	mov    %esp,%ebp
c010c4c4:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010c4c7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010c4ce:	eb 04                	jmp    c010c4d4 <strlen+0x13>
        cnt ++;
c010c4d0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010c4d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4d7:	8d 50 01             	lea    0x1(%eax),%edx
c010c4da:	89 55 08             	mov    %edx,0x8(%ebp)
c010c4dd:	0f b6 00             	movzbl (%eax),%eax
c010c4e0:	84 c0                	test   %al,%al
c010c4e2:	75 ec                	jne    c010c4d0 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010c4e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010c4e7:	c9                   	leave  
c010c4e8:	c3                   	ret    

c010c4e9 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010c4e9:	55                   	push   %ebp
c010c4ea:	89 e5                	mov    %esp,%ebp
c010c4ec:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010c4ef:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010c4f6:	eb 04                	jmp    c010c4fc <strnlen+0x13>
        cnt ++;
c010c4f8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010c4fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c4ff:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010c502:	73 10                	jae    c010c514 <strnlen+0x2b>
c010c504:	8b 45 08             	mov    0x8(%ebp),%eax
c010c507:	8d 50 01             	lea    0x1(%eax),%edx
c010c50a:	89 55 08             	mov    %edx,0x8(%ebp)
c010c50d:	0f b6 00             	movzbl (%eax),%eax
c010c510:	84 c0                	test   %al,%al
c010c512:	75 e4                	jne    c010c4f8 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010c514:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010c517:	c9                   	leave  
c010c518:	c3                   	ret    

c010c519 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010c519:	55                   	push   %ebp
c010c51a:	89 e5                	mov    %esp,%ebp
c010c51c:	57                   	push   %edi
c010c51d:	56                   	push   %esi
c010c51e:	83 ec 20             	sub    $0x20,%esp
c010c521:	8b 45 08             	mov    0x8(%ebp),%eax
c010c524:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c527:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c52a:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010c52d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c530:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c533:	89 d1                	mov    %edx,%ecx
c010c535:	89 c2                	mov    %eax,%edx
c010c537:	89 ce                	mov    %ecx,%esi
c010c539:	89 d7                	mov    %edx,%edi
c010c53b:	ac                   	lods   %ds:(%esi),%al
c010c53c:	aa                   	stos   %al,%es:(%edi)
c010c53d:	84 c0                	test   %al,%al
c010c53f:	75 fa                	jne    c010c53b <strcpy+0x22>
c010c541:	89 fa                	mov    %edi,%edx
c010c543:	89 f1                	mov    %esi,%ecx
c010c545:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010c548:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c54b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010c54e:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010c551:	83 c4 20             	add    $0x20,%esp
c010c554:	5e                   	pop    %esi
c010c555:	5f                   	pop    %edi
c010c556:	5d                   	pop    %ebp
c010c557:	c3                   	ret    

c010c558 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010c558:	55                   	push   %ebp
c010c559:	89 e5                	mov    %esp,%ebp
c010c55b:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010c55e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c561:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010c564:	eb 21                	jmp    c010c587 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010c566:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c569:	0f b6 10             	movzbl (%eax),%edx
c010c56c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c56f:	88 10                	mov    %dl,(%eax)
c010c571:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c574:	0f b6 00             	movzbl (%eax),%eax
c010c577:	84 c0                	test   %al,%al
c010c579:	74 04                	je     c010c57f <strncpy+0x27>
            src ++;
c010c57b:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010c57f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010c583:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010c587:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c58b:	75 d9                	jne    c010c566 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010c58d:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010c590:	c9                   	leave  
c010c591:	c3                   	ret    

c010c592 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010c592:	55                   	push   %ebp
c010c593:	89 e5                	mov    %esp,%ebp
c010c595:	57                   	push   %edi
c010c596:	56                   	push   %esi
c010c597:	83 ec 20             	sub    $0x20,%esp
c010c59a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c59d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c5a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c5a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010c5a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c5a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5ac:	89 d1                	mov    %edx,%ecx
c010c5ae:	89 c2                	mov    %eax,%edx
c010c5b0:	89 ce                	mov    %ecx,%esi
c010c5b2:	89 d7                	mov    %edx,%edi
c010c5b4:	ac                   	lods   %ds:(%esi),%al
c010c5b5:	ae                   	scas   %es:(%edi),%al
c010c5b6:	75 08                	jne    c010c5c0 <strcmp+0x2e>
c010c5b8:	84 c0                	test   %al,%al
c010c5ba:	75 f8                	jne    c010c5b4 <strcmp+0x22>
c010c5bc:	31 c0                	xor    %eax,%eax
c010c5be:	eb 04                	jmp    c010c5c4 <strcmp+0x32>
c010c5c0:	19 c0                	sbb    %eax,%eax
c010c5c2:	0c 01                	or     $0x1,%al
c010c5c4:	89 fa                	mov    %edi,%edx
c010c5c6:	89 f1                	mov    %esi,%ecx
c010c5c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c5cb:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010c5ce:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010c5d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010c5d4:	83 c4 20             	add    $0x20,%esp
c010c5d7:	5e                   	pop    %esi
c010c5d8:	5f                   	pop    %edi
c010c5d9:	5d                   	pop    %ebp
c010c5da:	c3                   	ret    

c010c5db <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010c5db:	55                   	push   %ebp
c010c5dc:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010c5de:	eb 0c                	jmp    c010c5ec <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010c5e0:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010c5e4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c5e8:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010c5ec:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c5f0:	74 1a                	je     c010c60c <strncmp+0x31>
c010c5f2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5f5:	0f b6 00             	movzbl (%eax),%eax
c010c5f8:	84 c0                	test   %al,%al
c010c5fa:	74 10                	je     c010c60c <strncmp+0x31>
c010c5fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5ff:	0f b6 10             	movzbl (%eax),%edx
c010c602:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c605:	0f b6 00             	movzbl (%eax),%eax
c010c608:	38 c2                	cmp    %al,%dl
c010c60a:	74 d4                	je     c010c5e0 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010c60c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c610:	74 18                	je     c010c62a <strncmp+0x4f>
c010c612:	8b 45 08             	mov    0x8(%ebp),%eax
c010c615:	0f b6 00             	movzbl (%eax),%eax
c010c618:	0f b6 d0             	movzbl %al,%edx
c010c61b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c61e:	0f b6 00             	movzbl (%eax),%eax
c010c621:	0f b6 c0             	movzbl %al,%eax
c010c624:	29 c2                	sub    %eax,%edx
c010c626:	89 d0                	mov    %edx,%eax
c010c628:	eb 05                	jmp    c010c62f <strncmp+0x54>
c010c62a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c62f:	5d                   	pop    %ebp
c010c630:	c3                   	ret    

c010c631 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010c631:	55                   	push   %ebp
c010c632:	89 e5                	mov    %esp,%ebp
c010c634:	83 ec 04             	sub    $0x4,%esp
c010c637:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c63a:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010c63d:	eb 14                	jmp    c010c653 <strchr+0x22>
        if (*s == c) {
c010c63f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c642:	0f b6 00             	movzbl (%eax),%eax
c010c645:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010c648:	75 05                	jne    c010c64f <strchr+0x1e>
            return (char *)s;
c010c64a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c64d:	eb 13                	jmp    c010c662 <strchr+0x31>
        }
        s ++;
c010c64f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010c653:	8b 45 08             	mov    0x8(%ebp),%eax
c010c656:	0f b6 00             	movzbl (%eax),%eax
c010c659:	84 c0                	test   %al,%al
c010c65b:	75 e2                	jne    c010c63f <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010c65d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c662:	c9                   	leave  
c010c663:	c3                   	ret    

c010c664 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010c664:	55                   	push   %ebp
c010c665:	89 e5                	mov    %esp,%ebp
c010c667:	83 ec 04             	sub    $0x4,%esp
c010c66a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c66d:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010c670:	eb 11                	jmp    c010c683 <strfind+0x1f>
        if (*s == c) {
c010c672:	8b 45 08             	mov    0x8(%ebp),%eax
c010c675:	0f b6 00             	movzbl (%eax),%eax
c010c678:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010c67b:	75 02                	jne    c010c67f <strfind+0x1b>
            break;
c010c67d:	eb 0e                	jmp    c010c68d <strfind+0x29>
        }
        s ++;
c010c67f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010c683:	8b 45 08             	mov    0x8(%ebp),%eax
c010c686:	0f b6 00             	movzbl (%eax),%eax
c010c689:	84 c0                	test   %al,%al
c010c68b:	75 e5                	jne    c010c672 <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c010c68d:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010c690:	c9                   	leave  
c010c691:	c3                   	ret    

c010c692 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010c692:	55                   	push   %ebp
c010c693:	89 e5                	mov    %esp,%ebp
c010c695:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010c698:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010c69f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010c6a6:	eb 04                	jmp    c010c6ac <strtol+0x1a>
        s ++;
c010c6a8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010c6ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6af:	0f b6 00             	movzbl (%eax),%eax
c010c6b2:	3c 20                	cmp    $0x20,%al
c010c6b4:	74 f2                	je     c010c6a8 <strtol+0x16>
c010c6b6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6b9:	0f b6 00             	movzbl (%eax),%eax
c010c6bc:	3c 09                	cmp    $0x9,%al
c010c6be:	74 e8                	je     c010c6a8 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010c6c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6c3:	0f b6 00             	movzbl (%eax),%eax
c010c6c6:	3c 2b                	cmp    $0x2b,%al
c010c6c8:	75 06                	jne    c010c6d0 <strtol+0x3e>
        s ++;
c010c6ca:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c6ce:	eb 15                	jmp    c010c6e5 <strtol+0x53>
    }
    else if (*s == '-') {
c010c6d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6d3:	0f b6 00             	movzbl (%eax),%eax
c010c6d6:	3c 2d                	cmp    $0x2d,%al
c010c6d8:	75 0b                	jne    c010c6e5 <strtol+0x53>
        s ++, neg = 1;
c010c6da:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c6de:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010c6e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c6e9:	74 06                	je     c010c6f1 <strtol+0x5f>
c010c6eb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010c6ef:	75 24                	jne    c010c715 <strtol+0x83>
c010c6f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6f4:	0f b6 00             	movzbl (%eax),%eax
c010c6f7:	3c 30                	cmp    $0x30,%al
c010c6f9:	75 1a                	jne    c010c715 <strtol+0x83>
c010c6fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6fe:	83 c0 01             	add    $0x1,%eax
c010c701:	0f b6 00             	movzbl (%eax),%eax
c010c704:	3c 78                	cmp    $0x78,%al
c010c706:	75 0d                	jne    c010c715 <strtol+0x83>
        s += 2, base = 16;
c010c708:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010c70c:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010c713:	eb 2a                	jmp    c010c73f <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010c715:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c719:	75 17                	jne    c010c732 <strtol+0xa0>
c010c71b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c71e:	0f b6 00             	movzbl (%eax),%eax
c010c721:	3c 30                	cmp    $0x30,%al
c010c723:	75 0d                	jne    c010c732 <strtol+0xa0>
        s ++, base = 8;
c010c725:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c729:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010c730:	eb 0d                	jmp    c010c73f <strtol+0xad>
    }
    else if (base == 0) {
c010c732:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c736:	75 07                	jne    c010c73f <strtol+0xad>
        base = 10;
c010c738:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010c73f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c742:	0f b6 00             	movzbl (%eax),%eax
c010c745:	3c 2f                	cmp    $0x2f,%al
c010c747:	7e 1b                	jle    c010c764 <strtol+0xd2>
c010c749:	8b 45 08             	mov    0x8(%ebp),%eax
c010c74c:	0f b6 00             	movzbl (%eax),%eax
c010c74f:	3c 39                	cmp    $0x39,%al
c010c751:	7f 11                	jg     c010c764 <strtol+0xd2>
            dig = *s - '0';
c010c753:	8b 45 08             	mov    0x8(%ebp),%eax
c010c756:	0f b6 00             	movzbl (%eax),%eax
c010c759:	0f be c0             	movsbl %al,%eax
c010c75c:	83 e8 30             	sub    $0x30,%eax
c010c75f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c762:	eb 48                	jmp    c010c7ac <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010c764:	8b 45 08             	mov    0x8(%ebp),%eax
c010c767:	0f b6 00             	movzbl (%eax),%eax
c010c76a:	3c 60                	cmp    $0x60,%al
c010c76c:	7e 1b                	jle    c010c789 <strtol+0xf7>
c010c76e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c771:	0f b6 00             	movzbl (%eax),%eax
c010c774:	3c 7a                	cmp    $0x7a,%al
c010c776:	7f 11                	jg     c010c789 <strtol+0xf7>
            dig = *s - 'a' + 10;
c010c778:	8b 45 08             	mov    0x8(%ebp),%eax
c010c77b:	0f b6 00             	movzbl (%eax),%eax
c010c77e:	0f be c0             	movsbl %al,%eax
c010c781:	83 e8 57             	sub    $0x57,%eax
c010c784:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c787:	eb 23                	jmp    c010c7ac <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010c789:	8b 45 08             	mov    0x8(%ebp),%eax
c010c78c:	0f b6 00             	movzbl (%eax),%eax
c010c78f:	3c 40                	cmp    $0x40,%al
c010c791:	7e 3d                	jle    c010c7d0 <strtol+0x13e>
c010c793:	8b 45 08             	mov    0x8(%ebp),%eax
c010c796:	0f b6 00             	movzbl (%eax),%eax
c010c799:	3c 5a                	cmp    $0x5a,%al
c010c79b:	7f 33                	jg     c010c7d0 <strtol+0x13e>
            dig = *s - 'A' + 10;
c010c79d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7a0:	0f b6 00             	movzbl (%eax),%eax
c010c7a3:	0f be c0             	movsbl %al,%eax
c010c7a6:	83 e8 37             	sub    $0x37,%eax
c010c7a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010c7ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7af:	3b 45 10             	cmp    0x10(%ebp),%eax
c010c7b2:	7c 02                	jl     c010c7b6 <strtol+0x124>
            break;
c010c7b4:	eb 1a                	jmp    c010c7d0 <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c010c7b6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c7ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c7bd:	0f af 45 10          	imul   0x10(%ebp),%eax
c010c7c1:	89 c2                	mov    %eax,%edx
c010c7c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7c6:	01 d0                	add    %edx,%eax
c010c7c8:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010c7cb:	e9 6f ff ff ff       	jmp    c010c73f <strtol+0xad>

    if (endptr) {
c010c7d0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c7d4:	74 08                	je     c010c7de <strtol+0x14c>
        *endptr = (char *) s;
c010c7d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c7d9:	8b 55 08             	mov    0x8(%ebp),%edx
c010c7dc:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010c7de:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010c7e2:	74 07                	je     c010c7eb <strtol+0x159>
c010c7e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c7e7:	f7 d8                	neg    %eax
c010c7e9:	eb 03                	jmp    c010c7ee <strtol+0x15c>
c010c7eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010c7ee:	c9                   	leave  
c010c7ef:	c3                   	ret    

c010c7f0 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010c7f0:	55                   	push   %ebp
c010c7f1:	89 e5                	mov    %esp,%ebp
c010c7f3:	57                   	push   %edi
c010c7f4:	83 ec 24             	sub    $0x24,%esp
c010c7f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c7fa:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010c7fd:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010c801:	8b 55 08             	mov    0x8(%ebp),%edx
c010c804:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c807:	88 45 f7             	mov    %al,-0x9(%ebp)
c010c80a:	8b 45 10             	mov    0x10(%ebp),%eax
c010c80d:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010c810:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010c813:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010c817:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c81a:	89 d7                	mov    %edx,%edi
c010c81c:	f3 aa                	rep stos %al,%es:(%edi)
c010c81e:	89 fa                	mov    %edi,%edx
c010c820:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010c823:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010c826:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010c829:	83 c4 24             	add    $0x24,%esp
c010c82c:	5f                   	pop    %edi
c010c82d:	5d                   	pop    %ebp
c010c82e:	c3                   	ret    

c010c82f <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010c82f:	55                   	push   %ebp
c010c830:	89 e5                	mov    %esp,%ebp
c010c832:	57                   	push   %edi
c010c833:	56                   	push   %esi
c010c834:	53                   	push   %ebx
c010c835:	83 ec 30             	sub    $0x30,%esp
c010c838:	8b 45 08             	mov    0x8(%ebp),%eax
c010c83b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c83e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c841:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c844:	8b 45 10             	mov    0x10(%ebp),%eax
c010c847:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010c84a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c84d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010c850:	73 42                	jae    c010c894 <memmove+0x65>
c010c852:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c855:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c858:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c85b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c85e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c861:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010c864:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c867:	c1 e8 02             	shr    $0x2,%eax
c010c86a:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010c86c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c86f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c872:	89 d7                	mov    %edx,%edi
c010c874:	89 c6                	mov    %eax,%esi
c010c876:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c878:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010c87b:	83 e1 03             	and    $0x3,%ecx
c010c87e:	74 02                	je     c010c882 <memmove+0x53>
c010c880:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c882:	89 f0                	mov    %esi,%eax
c010c884:	89 fa                	mov    %edi,%edx
c010c886:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010c889:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010c88c:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010c88f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c892:	eb 36                	jmp    c010c8ca <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010c894:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c897:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c89a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c89d:	01 c2                	add    %eax,%edx
c010c89f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c8a2:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010c8a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c8a8:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010c8ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c8ae:	89 c1                	mov    %eax,%ecx
c010c8b0:	89 d8                	mov    %ebx,%eax
c010c8b2:	89 d6                	mov    %edx,%esi
c010c8b4:	89 c7                	mov    %eax,%edi
c010c8b6:	fd                   	std    
c010c8b7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c8b9:	fc                   	cld    
c010c8ba:	89 f8                	mov    %edi,%eax
c010c8bc:	89 f2                	mov    %esi,%edx
c010c8be:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010c8c1:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010c8c4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010c8c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010c8ca:	83 c4 30             	add    $0x30,%esp
c010c8cd:	5b                   	pop    %ebx
c010c8ce:	5e                   	pop    %esi
c010c8cf:	5f                   	pop    %edi
c010c8d0:	5d                   	pop    %ebp
c010c8d1:	c3                   	ret    

c010c8d2 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010c8d2:	55                   	push   %ebp
c010c8d3:	89 e5                	mov    %esp,%ebp
c010c8d5:	57                   	push   %edi
c010c8d6:	56                   	push   %esi
c010c8d7:	83 ec 20             	sub    $0x20,%esp
c010c8da:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c8e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c8e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c8e6:	8b 45 10             	mov    0x10(%ebp),%eax
c010c8e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010c8ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c8ef:	c1 e8 02             	shr    $0x2,%eax
c010c8f2:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010c8f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c8f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c8fa:	89 d7                	mov    %edx,%edi
c010c8fc:	89 c6                	mov    %eax,%esi
c010c8fe:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c900:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010c903:	83 e1 03             	and    $0x3,%ecx
c010c906:	74 02                	je     c010c90a <memcpy+0x38>
c010c908:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c90a:	89 f0                	mov    %esi,%eax
c010c90c:	89 fa                	mov    %edi,%edx
c010c90e:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010c911:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c914:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010c917:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010c91a:	83 c4 20             	add    $0x20,%esp
c010c91d:	5e                   	pop    %esi
c010c91e:	5f                   	pop    %edi
c010c91f:	5d                   	pop    %ebp
c010c920:	c3                   	ret    

c010c921 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010c921:	55                   	push   %ebp
c010c922:	89 e5                	mov    %esp,%ebp
c010c924:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010c927:	8b 45 08             	mov    0x8(%ebp),%eax
c010c92a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010c92d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c930:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010c933:	eb 30                	jmp    c010c965 <memcmp+0x44>
        if (*s1 != *s2) {
c010c935:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c938:	0f b6 10             	movzbl (%eax),%edx
c010c93b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c93e:	0f b6 00             	movzbl (%eax),%eax
c010c941:	38 c2                	cmp    %al,%dl
c010c943:	74 18                	je     c010c95d <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010c945:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c948:	0f b6 00             	movzbl (%eax),%eax
c010c94b:	0f b6 d0             	movzbl %al,%edx
c010c94e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c951:	0f b6 00             	movzbl (%eax),%eax
c010c954:	0f b6 c0             	movzbl %al,%eax
c010c957:	29 c2                	sub    %eax,%edx
c010c959:	89 d0                	mov    %edx,%eax
c010c95b:	eb 1a                	jmp    c010c977 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010c95d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010c961:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010c965:	8b 45 10             	mov    0x10(%ebp),%eax
c010c968:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c96b:	89 55 10             	mov    %edx,0x10(%ebp)
c010c96e:	85 c0                	test   %eax,%eax
c010c970:	75 c3                	jne    c010c935 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010c972:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c977:	c9                   	leave  
c010c978:	c3                   	ret    
